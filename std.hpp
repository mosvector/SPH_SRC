/* Autogenerated header */
#pragma once

class/*or struct*/ std
{
public:
  // Nested containers:
  class/*or struct*/ _Locinfo
  {
    // Functions:
    public: struct _Cvtvec _Getcvt(void) const
    public: unsigned short const * _W_Getdays(void) const
    public: unsigned short const * _W_Getmonths(void) const
  public:
  };

  class/*or struct*/ _System_error : public runtime_error
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::runtime_error
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };

  template<typename T0, typename T1, typename T2, typename T3, typename T5  >
  class _Tmap_traits
  {
  public:
  };
#if 0 // Instances:
// <class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>
#if 0
  template<>
  class _Tmap_traits<class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>
  {
  public:
  };
#endif
// <class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>, 0>
#if 0
  template<>
  class _Tmap_traits<class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>, 0>
  {
  public:
  };
#endif
// <class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>, 0>
#if 0
  template<>
  class _Tmap_traits<class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>, 0>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>, 0>
#if 0
  template<>
  class _Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>, 0>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>, 0>
#if 0
  template<>
  class _Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>, 0>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>
#if 0
  template<>
  class _Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>
  {
  public:
  };
#endif
// <class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>, 0>
#if 0
  template<>
  class _Tmap_traits<class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>, 0>
  {
  public:
  };
#endif
#endif


  template<typename T1  >
  class/*or struct*/ _Tree
  {
  public:
  };
#if 0 // Instances:
// <class std::_Tmap_traits<class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>>
#if 0
  template<>
  class/*or struct*/ _Tree<class std::_Tmap_traits<class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>>
  {
  public:
  };
#endif
// <class std::_Tmap_traits<class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>, 0>>
#if 0
  template<>
  class/*or struct*/ _Tree<class std::_Tmap_traits<class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>, 0>>
  {
  public:
  };
#endif
// <class std::_Tmap_traits<class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>, 0>>
#if 0
  template<>
  class/*or struct*/ _Tree<class std::_Tmap_traits<class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>, 0>>
  {
  public:
  };
#endif
// <class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>, 0>>
#if 0
  template<>
  class/*or struct*/ _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>, 0>>
  {
  public:
  };
#endif
// <class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>, 0>>
#if 0
  template<>
  class/*or struct*/ _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>, 0>>
  {
  public:
  };
#endif
// <class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>>
#if 0
  template<>
  class/*or struct*/ _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>>
  {
  public:
  };
#endif
// <class std::_Tmap_traits<class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>, 0>>
#if 0
  template<>
  class/*or struct*/ _Tree<class std::_Tmap_traits<class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>, 0>>
  {
  public:
  };
#endif
// <class std::_Tset_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, 0>>
#if 0
  template<>
  class/*or struct*/ _Tree<class std::_Tset_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, 0>>
  {
  public:
  };
#endif
#endif


  template<typename T0, typename T1, typename T2, typename T4  >
  class _Tset_traits
  {
  public:
  };
#if 0 // Instances:
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, 0>
#if 0
  template<>
  class _Tset_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, 0>
  {
  public:
  };
#endif
#endif


  template<typename T1  >
  class allocator
  {
  public:
  };
#if 0 // Instances:
// <char>
#if 0
  template<>
  class allocator<char>
  {
  public:
  };
#endif
// <class sophis::tools::dataModel::Data const *>
#if 0
  template<>
  class allocator<class sophis::tools::dataModel::Data const *>
  {
  public:
  };
#endif
// <class sophis::tools::dataModel::DataContainer const *>
#if 0
  template<>
  class allocator<class sophis::tools::dataModel::DataContainer const *>
  {
  public:
  };
#endif
// <class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>>
#if 0
  template<>
  class allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
#if 0
  template<>
  class allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
  {
  public:
  };
#endif
// <struct sophis::xml::dataModel::XMLDataExporterImpl::Position>
#if 0
  template<>
  class allocator<struct sophis::xml::dataModel::XMLDataExporterImpl::Position>
  {
  public:
  };
#endif
// <struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
  template<>
  class allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
  {
  public:
  };
#endif
// <struct std::pair<class sophis::xml::util::XWString const, bool>>
#if 0
  template<>
  class allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>
  {
  public:
  };
#endif
// <struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>
#if 0
  template<>
  class allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>
  {
  public:
  };
#endif
// <struct std::pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>>
#if 0
  template<>
  class allocator<struct std::pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>>
  {
  public:
  };
#endif
// <struct std::pair<class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>>
#if 0
  template<>
  class allocator<struct std::pair<class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>>
  {
  public:
  };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>
#if 0
  template<>
  class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>
  {
  public:
  };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>
#if 0
  template<>
  class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>
  {
  public:
  };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
  template<>
  class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
  {
  public:
  };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
  template<>
  class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
  {
  public:
  };
#endif
// <struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>
#if 0
  template<>
  class allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>
  {
  public:
  };
#endif
#endif


  class/*or struct*/ bad_alloc : public exception
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::exception
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ bad_array_new_length : public bad_alloc
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::bad_alloc
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ bad_cast : public exception
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::exception
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ bad_optional_access : public exception
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::exception
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ bad_variant_access : public exception
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::exception
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ bad_weak_ptr : public exception
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::exception
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };

  template<typename T0, typename T2  >
  class/*or struct*/ basic_ios
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>>
#if 0
  template<>
  class/*or struct*/ basic_ios<char, struct std::char_traits<char>>
  {
    // Functions:
    protected: std::basic_ios<char, struct std::char_traits<char>>::basic_ios<char, struct std::char_traits<char>>(void)
    public: char std::basic_ios<char, struct std::char_traits<char>>::fill(void) const
    public: class std::basic_streambuf<char, struct std::char_traits<char>> * std::basic_ios<char, struct std::char_traits<char>>::rdbuf(void) const
    public: void std::basic_ios<char, struct std::char_traits<char>>::setstate(int, bool)
    public: class std::basic_ostream<char, struct std::char_traits<char>> * std::basic_ios<char, struct std::char_traits<char>>::tie(void) const
#if 0 // All found virtual functions names:
    public: virtual std::basic_ios<char, struct std::char_traits<char>>::~basic_ios<char, struct std::char_traits<char>>(void)
#endif

  public:
  };
#endif
#endif


  template<typename T0, typename T2  >
  class basic_istream
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>>
#if 0
  template<>
  class basic_istream<char, struct std::char_traits<char>>
  {
    // Functions:
    public: std::basic_istream<char, struct std::char_traits<char>>::basic_istream<char, struct std::char_traits<char>>(class std::basic_streambuf<char, struct std::char_traits<char>> *, bool)
    public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(short &)
    public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(unsigned short &)
    public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(int &)
    public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(long &)
    public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(unsigned long &)
    public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(float &)
    public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(double &)
    public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(__int64 &)
    public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(unsigned __int64 &)
    public: bool std::basic_istream<char, struct std::char_traits<char>>::_Ipfx(bool)
#if 0 // All found virtual functions names:
    public: virtual std::basic_istream<char, struct std::char_traits<char>>::~basic_istream<char, struct std::char_traits<char>>(void)
#endif

  public:
  };
#endif
#endif


#if 0
  template<>
  class basic_istream<char, struct std::char_traits<char>>
  {
  public:
  };
#endif

  template<typename T0, typename T1, typename T3  >
  class/*or struct*/ basic_istringstream
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>, class std::allocator<char>>
#if 0
  template<>
  class/*or struct*/ basic_istringstream<char, struct std::char_traits<char>, class std::allocator<char>>
  {
    // VFTable. Offset=144, Size=1, Start=0
    // Owner: SophisXML.dll
    // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
    public: virtual void unknown_vf_144_0(void); // 0
#endif
    // VFTable with 144 offset end

  public:
  };
#endif
#endif


  template<typename T0, typename T2  >
  class basic_ostream
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>>
#if 0
  template<>
  class basic_ostream<char, struct std::char_traits<char>>
  {
    // Functions:
    public: std::basic_ostream<char, struct std::char_traits<char>>::basic_ostream<char, struct std::char_traits<char>>(class std::basic_streambuf<char, struct std::char_traits<char>> *, bool)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(short)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(unsigned short)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(int)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(unsigned int)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(long)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(unsigned long)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(float)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(double)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(void const *)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(__int64)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(unsigned __int64)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(bool)
    public: void std::basic_ostream<char, struct std::char_traits<char>>::_Osfx(void)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::flush(void)
#if 0 // All found virtual functions names:
    public: virtual std::basic_ostream<char, struct std::char_traits<char>>::~basic_ostream<char, struct std::char_traits<char>>(void)
#endif

  public:
  };
#endif
#endif


#if 0
  template<>
  class basic_ostream<char, struct std::char_traits<char>>
  {
  public:
  };
#endif

  template<typename T0, typename T1, typename T3  >
  class/*or struct*/ basic_ostringstream
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>, class std::allocator<char>>
#if 0
  template<>
  class/*or struct*/ basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>
  {
    // VFTable. Offset=136, Size=1, Start=0
    // Owner: SophisXML.dll
    // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
    public: virtual void unknown_vf_136_0(void); // 0
#endif
    // VFTable with 136 offset end

  public:
  };
#endif
#endif


  template<typename T0, typename T2  >
  class basic_streambuf
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>>
#if 0
  template<>
  class basic_streambuf<char, struct std::char_traits<char>>
  {
    // Functions:
    protected: std::basic_streambuf<char, struct std::char_traits<char>>::basic_streambuf<char, struct std::char_traits<char>>(void)
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::_Pninc(void)
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::eback(void) const
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::egptr(void) const
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::epptr(void) const
    protected: void std::basic_streambuf<char, struct std::char_traits<char>>::gbump(int)
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::gptr(void) const
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::pbase(void) const
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::pptr(void) const
    public: int std::basic_streambuf<char, struct std::char_traits<char>>::sbumpc(void)
    protected: void std::basic_streambuf<char, struct std::char_traits<char>>::setg(char *, char *, char *)
    protected: void std::basic_streambuf<char, struct std::char_traits<char>>::setp(char *, char *, char *)
    protected: void std::basic_streambuf<char, struct std::char_traits<char>>::setp(char *, char *)
    public: int std::basic_streambuf<char, struct std::char_traits<char>>::sputc(char)
    public: __int64 std::basic_streambuf<char, struct std::char_traits<char>>::sputn(char const *, __int64)
#if 0 // All found virtual functions names:
    public: virtual std::basic_streambuf<char, struct std::char_traits<char>>::~basic_streambuf<char, struct std::char_traits<char>>(void)
    public: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::_Lock(void)
    public: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::_Unlock(void)
    protected: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::imbue(class std::locale const &)
    protected: virtual class std::basic_streambuf<char, struct std::char_traits<char>> * std::basic_streambuf<char, struct std::char_traits<char>>::setbuf(char *, __int64)
    protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::showmanyc(void)
    protected: virtual int std::basic_streambuf<char, struct std::char_traits<char>>::sync(void)
    protected: virtual int std::basic_streambuf<char, struct std::char_traits<char>>::uflow(void)
    protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::xsgetn(char *, __int64)
    protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::xsputn(char const *, __int64)
#endif

    // VFTable. Offset=0, Size=15, Start=0
    // Added virtual functions:
    public: virtual std::basic_streambuf<char, struct std::char_traits<char>>::~basic_streambuf<char, struct std::char_traits<char>>(void); // 0
    public: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::_Lock(void); // 1
    public: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::_Unlock(void); // 2
    public: virtual void unknown_vf_0_3(void); // 3
    public: virtual void unknown_vf_0_4(void); // 4
    protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::showmanyc(void); // 5
    public: virtual void unknown_vf_0_6(void); // 6
    protected: virtual int std::basic_streambuf<char, struct std::char_traits<char>>::uflow(void); // 7
    protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::xsgetn(char *, __int64); // 8
    protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::xsputn(char const *, __int64); // 9
    public: virtual void unknown_vf_0_10(void); // 10
    public: virtual void unknown_vf_0_11(void); // 11
    protected: virtual class std::basic_streambuf<char, struct std::char_traits<char>> * std::basic_streambuf<char, struct std::char_traits<char>>::setbuf(char *, __int64); // 12
    protected: virtual int std::basic_streambuf<char, struct std::char_traits<char>>::sync(void); // 13
    protected: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::imbue(class std::locale const &); // 14
    // VFTable with 0 offset end

  public:
  };
#endif
#endif


#if 0
  template<>
  class basic_streambuf<char, struct std::char_traits<char>>
  {
  public:
  };
#endif

  template<typename T0, typename T1, typename T3  >
  class basic_string
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>, class std::allocator<char>>
#if 0
  template<>
  class basic_string<char, struct std::char_traits<char>, class std::allocator<char>>
  {
  public:
  };
#endif
#endif


#if 0
  template<>
  class basic_string<char, struct std::char_traits<char>, class std::allocator<char>>
  {
  public:
  };
#endif

  template<typename T0, typename T1, typename T3  >
  class/*or struct*/ basic_stringbuf
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>, class std::allocator<char>>
#if 0
  template<>
  class/*or struct*/ basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>> : public basic_streambuf<char, struct std::char_traits<char>>
  {
    // VFTable. Offset=0, Size=15, Start=15
    // Corresponding base: basic_streambuf::basic_streambuf::basic_streambuf<char, struct std::char_traits<char>>
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };
#endif
#endif


  template<typename T1  >
  struct char_traits
  {
  public:
  };
#if 0 // Instances:
// <char>
#if 0
  template<>
  struct char_traits<char>
  {
  public:
  };
#endif
#endif


  class/*or struct*/ exception
  {
    // VFTable. Offset=0, Size=2, Start=0
    // Owner: SophisXML.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void unknown_vf_0_1(void); // 1
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ ios_base
  {
  public:
    // Nested containers:
    class/*or struct*/ failure : public system_error
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::system_error
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };


    // Functions:
    public: int flags(void) const
    public: bool good(void) const
    public: __int64 width(__int64)
    public: __int64 width(void) const
  public:
  };

  template<typename T1  >
  struct less
  {
  public:
  };
#if 0 // Instances:
// <class sophis::tools::dataModel::PlainValue const *>
#if 0
  template<>
  struct less<class sophis::tools::dataModel::PlainValue const *>
  {
  public:
  };
#endif
// <class sophis::xml::util::XWString>
#if 0
  template<>
  struct less<class sophis::xml::util::XWString>
  {
  public:
  };
#endif
// <class sophisTools::FlyWeightString>
#if 0
  template<>
  struct less<class sophisTools::FlyWeightString>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
#if 0
  template<>
  struct less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
  {
  public:
  };
#endif
// <class xercesc_3_2::DOMNode const *>
#if 0
  template<>
  struct less<class xercesc_3_2::DOMNode const *>
  {
  public:
  };
#endif
#endif


  template<typename T0, typename T2  >
  class list
  {
  public:
  };
#if 0 // Instances:
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
  template<>
  class list<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
  {
  public:
  };
#endif
// <struct sophis::xml::dataModel::XMLDataExporterImpl::Position, class std::allocator<struct sophis::xml::dataModel::XMLDataExporterImpl::Position>>
#if 0
  template<>
  class/*or struct*/ list<struct sophis::xml::dataModel::XMLDataExporterImpl::Position, class std::allocator<struct sophis::xml::dataModel::XMLDataExporterImpl::Position>>
  {
  public:
  };
#endif
// <struct std::pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>>>
#if 0
  template<>
  class/*or struct*/ list<struct std::pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>>>
  {
  public:
  };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
#if 0
  template<>
  class/*or struct*/ list<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
  {
  public:
  };
#endif
#endif


  class locale
  {
  public:
  };

  class/*or struct*/ logic_error : public exception
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::exception
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };

  template<typename T0, typename T1, typename T2, typename T4  >
  class map
  {
  public:
  };
#if 0 // Instances:
// <class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
#if 0
  template<>
  class/*or struct*/ map<class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>> : public _Tree<class std::_Tmap_traits<class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>>
  {
  public:
  };
#endif
// <class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>>
#if 0
  template<>
  class/*or struct*/ map<class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>> : public _Tree<class std::_Tmap_traits<class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>, 0>>
  {
  public:
  };
#endif
// <class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>>
#if 0
  template<>
  class/*or struct*/ map<class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>> : public _Tree<class std::_Tmap_traits<class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>, 0>>
  {
  public:
  };
#endif
// <class sophisTools::FlyWeightString, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>, struct std::less<class sophisTools::FlyWeightString>, class std::allocator<struct std::pair<class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>>>
#if 0
  template<>
  class map<class sophisTools::FlyWeightString, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>, struct std::less<class sophisTools::FlyWeightString>, class std::allocator<struct std::pair<class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>>>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>>
#if 0
  template<>
  class/*or struct*/ map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>> : public _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>, 0>>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>>
#if 0
  template<>
  class/*or struct*/ map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>> : public _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>, 0>>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
#if 0
  template<>
  class/*or struct*/ map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>> : public _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>>
  {
  public:
  };
#endif
// <class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>>
#if 0
  template<>
  class/*or struct*/ map<class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>> : public _Tree<class std::_Tmap_traits<class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>, 0>>
  {
  public:
  };
#endif
#endif


  class/*or struct*/ out_of_range : public logic_error
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::logic_error
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };

  template<typename T0, typename T2  >
  struct pair
  {
  public:
  };
#if 0 // Instances:
// <class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
#if 0
  template<>
  struct pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
  {
  public:
  };
#endif
// <class sophis::xml::dataModel::XMLDataExporterImpl::PositionList, class sophis::xml::dataModel::XMLDataExporterImpl::PositionList>
#if 0
  template<>
  class/*or struct*/ pair<class sophis::xml::dataModel::XMLDataExporterImpl::PositionList, class sophis::xml::dataModel::XMLDataExporterImpl::PositionList>
  {
  public:
  };
#endif
// <class sophis::xml::util::XWString const, bool>
#if 0
  template<>
  struct pair<class sophis::xml::util::XWString const, bool>
  {
  public:
  };
#endif
// <class sophis::xml::util::XWString const, class sophis::xml::util::XWString>
#if 0
  template<>
  struct pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>
  {
  public:
  };
#endif
// <class sophis::xml::util::XWString, class sophis::xml::util::XWString>
#if 0
  template<>
  struct pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>
  {
  public:
  };
#endif
// <class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>
#if 0
  template<>
  struct pair<class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>
#if 0
  template<>
  struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>
#if 0
  template<>
  struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
#if 0
  template<>
  struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
#if 0
  template<>
  struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
  {
    // Functions:
    public: std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>(struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>> const &)
  public:
  };
#endif
// <class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>
#if 0
  template<>
  struct pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>
  {
  public:
  };
#endif
#endif


#if 0
  template<>
  struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
  {
  public:
  };
#endif

  class/*or struct*/ range_error : public runtime_error
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::runtime_error
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ runtime_error : public exception
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::exception
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };

  template<typename T0, typename T1, typename T3  >
  class set
  {
  public:
  };
#if 0 // Instances:
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
  template<>
  class set<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>> : public _Tree<class std::_Tset_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, 0>>
  {
  public:
  };
#endif
#endif


  class/*or struct*/ system_error : public _System_error
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::_System_error
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };

  template<typename T0, typename T2  >
  class vector
  {
  public:
  };
#if 0 // Instances:
// <class sophis::tools::dataModel::Data const *, class std::allocator<class sophis::tools::dataModel::Data const *>>
#if 0
  template<>
  class/*or struct*/ vector<class sophis::tools::dataModel::Data const *, class std::allocator<class sophis::tools::dataModel::Data const *>>
  {
  public:
  };
#endif
// <class sophis::tools::dataModel::DataContainer const *, class std::allocator<class sophis::tools::dataModel::DataContainer const *>>
#if 0
  template<>
  class/*or struct*/ vector<class sophis::tools::dataModel::DataContainer const *, class std::allocator<class sophis::tools::dataModel::DataContainer const *>>
  {
  public:
  };
#endif
// <class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>>>
#if 0
  template<>
  class vector<class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>>>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
  template<>
  class vector<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
  {
  public:
  };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
#if 0
  template<>
  class vector<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
  {
  public:
  };
#endif
#endif



  // Functions:
  void _Xbad_alloc(void)
  void _Xlength_error(char const *)
  void _Xout_of_range(char const *)
  bool uncaught_exception(void)
public:
};
