/* Autogenerated header */
#pragma once

class/*or struct*/ std
{
public:
  // Nested containers:
  template<typename T0, typename T1, typename T3  >
  class/*or struct*/ _Func_base
  {
  public:
  };
#if 0 // Instances:
// <void, struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *&&, unsigned long>
#if 0
  template<>
  class/*or struct*/ _Func_base<void, struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *&&, unsigned long>
  {
  public:
  };
#endif
// <void, struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *&&, unsigned long>
#if 0
  template<>
  class/*or struct*/ _Func_base<void, struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *&&, unsigned long>
  {
  public:
  };
#endif
#endif


  template<typename T0, typename T1, typename T2, typename T4  >
  class/*or struct*/ _Func_impl_no_alloc
  {
  public:
  };
#if 0 // Instances:
// <class std::function<void __cdecl(struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *, unsigned long)>, void, struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *&&, unsigned long>
#if 0
  template<>
  class/*or struct*/ _Func_impl_no_alloc<class std::function<void __cdecl(struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *, unsigned long)>, void, struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *&&, unsigned long> : public _Func_base<void, struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *&&, unsigned long>
  {
    // VFTable. Offset=0, Size=6, Start=0
    // Corresponding base: _Func_base::_Func_base::_Func_base<void, struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *&&, unsigned long>
    // Owner: SophisXmlTools.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void unknown_vf_0_1(void); // 1
    public: virtual void unknown_vf_0_2(void); // 2
    public: virtual void unknown_vf_0_3(void); // 3
    public: virtual void unknown_vf_0_4(void); // 4
    public: virtual void unknown_vf_0_5(void); // 5
    // VFTable with 0 offset end

  public:
  };
#endif
// <class std::function<void __cdecl(struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *, unsigned long)>, void, struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *&&, unsigned long>
#if 0
  template<>
  class/*or struct*/ _Func_impl_no_alloc<class std::function<void __cdecl(struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *, unsigned long)>, void, struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *&&, unsigned long> : public _Func_base<void, struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *&&, unsigned long>
  {
    // VFTable. Offset=0, Size=6, Start=0
    // Corresponding base: _Func_base::_Func_base::_Func_base<void, struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *&&, unsigned long>
    // Owner: SophisXmlTools.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void unknown_vf_0_1(void); // 1
    public: virtual void unknown_vf_0_2(void); // 2
    public: virtual void unknown_vf_0_3(void); // 3
    public: virtual void unknown_vf_0_4(void); // 4
    public: virtual void unknown_vf_0_5(void); // 5
    // VFTable with 0 offset end

  public:
  };
#endif
#endif


  class/*or struct*/ _Ref_count_base
  {
  public:
  };

  template<typename T1  >
  class/*or struct*/ _Ref_count_obj2
  {
  public:
  };
#if 0 // Instances:
// <class std::vector<__int64, class std::allocator<__int64>>>
#if 0
  template<>
  class/*or struct*/ _Ref_count_obj2<class std::vector<__int64, class std::allocator<__int64>>> : public _Ref_count_base
  {
    // VFTable. Offset=0, Size=4, Start=0
    // Corresponding base: std::_Ref_count_base
    // Owner: SophisXmlTools.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void unknown_vf_0_1(void); // 1
    public: virtual void unknown_vf_0_2(void); // 2
    public: virtual void unknown_vf_0_3(void); // 3
    // VFTable with 0 offset end

  public:
  };
#endif
// <class std::vector<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, class std::allocator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>>>
#if 0
  template<>
  class/*or struct*/ _Ref_count_obj2<class std::vector<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, class std::allocator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>>> : public _Ref_count_base
  {
    // VFTable. Offset=0, Size=4, Start=0
    // Corresponding base: std::_Ref_count_base
    // Owner: SophisXmlTools.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void unknown_vf_0_1(void); // 1
    public: virtual void unknown_vf_0_2(void); // 2
    public: virtual void unknown_vf_0_3(void); // 3
    // VFTable with 0 offset end

  public:
  };
#endif
// <class std::vector<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, class std::allocator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>>>
#if 0
  template<>
  class/*or struct*/ _Ref_count_obj2<class std::vector<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, class std::allocator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>>> : public _Ref_count_base
  {
    // VFTable. Offset=0, Size=4, Start=0
    // Corresponding base: std::_Ref_count_base
    // Owner: SophisXmlTools.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void unknown_vf_0_1(void); // 1
    public: virtual void unknown_vf_0_2(void); // 2
    public: virtual void unknown_vf_0_3(void); // 3
    // VFTable with 0 offset end

  public:
  };
#endif
#endif


  template<typename T0, typename T1, typename T2, typename T3, typename T5  >
  class _Tmap_traits
  {
  public:
  };
#if 0 // Instances:
// <long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>, 0>
#if 0
  template<>
  class _Tmap_traits<long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>, 0>
  {
  public:
  };
#endif
#endif


  template<typename T1  >
  class/*or struct*/ _Tree
  {
  public:
  };
#if 0 // Instances:
// <class std::_Tmap_traits<long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>, 0>>
#if 0
  template<>
  class/*or struct*/ _Tree<class std::_Tmap_traits<long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>, 0>>
  {
  public:
  };
#endif
#endif


  template<typename T1  >
  class allocator
  {
  public:
  };
#if 0 // Instances:
// <__int64>
#if 0
  template<>
  class allocator<__int64>
  {
  public:
  };
#endif
// <char>
#if 0
  template<>
  class allocator<char>
  {
  public:
  };
#endif
// <class sophis::event::CSHistoricPriceData *>
#if 0
  template<>
  class allocator<class sophis::event::CSHistoricPriceData *>
  {
  public:
  };
#endif
// <class sophis::portfolio::CSRTaxLotList>
#if 0
  template<>
  class allocator<class sophis::portfolio::CSRTaxLotList>
  {
  public:
  };
#endif
// <class sophis::tools::CSRAbstractEvent *>
#if 0
  template<>
  class allocator<class sophis::tools::CSRAbstractEvent *>
  {
  public:
  };
#endif
// <class sophis::tools::CSRTagMetadata>
#if 0
  template<>
  class allocator<class sophis::tools::CSRTagMetadata>
  {
  public:
  };
#endif
// <long>
#if 0
  template<>
  class allocator<long>
  {
  public:
  };
#endif
// <struct OCILobLocator const *>
#if 0
  template<>
  class allocator<struct OCILobLocator const *>
  {
  public:
  };
#endif
// <struct PriceDB_t>
#if 0
  template<>
  class allocator<struct PriceDB_t>
  {
  public:
  };
#endif
// <struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
#if 0
  template<>
  class allocator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
  {
  public:
  };
#endif
// <struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
#if 0
  template<>
  class allocator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
  {
  public:
  };
#endif
// <struct sophis::DAL::SSRepoMargin>
#if 0
  template<>
  class allocator<struct sophis::DAL::SSRepoMargin>
  {
  public:
  };
#endif
// <struct sophis::listed_market::SeriesKey>
#if 0
  template<>
  class allocator<struct sophis::listed_market::SeriesKey>
  {
  public:
  };
#endif
// <struct sophis::market_data::SSDividend>
#if 0
  template<>
  class allocator<struct sophis::market_data::SSDividend>
  {
  public:
  };
#endif
// <struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping>
#if 0
  template<>
  class allocator<struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping>
  {
  public:
  };
#endif
// <struct std::pair<char const *, char const *>>
#if 0
  template<>
  class allocator<struct std::pair<char const *, char const *>>
  {
  public:
  };
#endif
// <struct std::pair<char const *const, class sophis::misc::fpml::alerts::AlertToolkit *>>
#if 0
  template<>
  class allocator<struct std::pair<char const *const, class sophis::misc::fpml::alerts::AlertToolkit *>>
  {
  public:
  };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>
#if 0
  template<>
  class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>
  {
  public:
  };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>>
#if 0
  template<>
  class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>>
  {
  public:
  };
#endif
// <struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>
#if 0
  template<>
  class allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>
  {
  public:
  };
#endif
// <struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>
#if 0
  template<>
  class allocator<struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>
  {
  public:
  };
#endif
// <struct std::pair<long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>>
#if 0
  template<>
  class allocator<struct std::pair<long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>>
  {
  public:
  };
#endif
// <struct std::pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>
#if 0
  template<>
  class allocator<struct std::pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>
  {
  public:
  };
#endif
// <struct std::pair<struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>>
#if 0
  template<>
  class allocator<struct std::pair<struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>>
  {
  public:
  };
#endif
// <unsigned __int64>
#if 0
  template<>
  class allocator<unsigned __int64>
  {
  public:
  };
#endif
// <void const *>
#if 0
  template<>
  class allocator<void const *>
  {
  public:
  };
#endif
#endif


  class/*or struct*/ bad_alloc : public exception
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::exception
    // Owner: SophisXmlTools.dll
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ bad_array_new_length : public bad_alloc
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::bad_alloc
    // Owner: SophisXmlTools.dll
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ bad_cast : public exception
  {
    // VFTable. Offset=0, Size=2, Start=2
    // Corresponding base: std::exception
    // Owner: SophisXmlTools.dll
    // VFTable with 0 offset end

  public:
  };

  template<typename T0, typename T2  >
  class/*or struct*/ basic_ios
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>>
#if 0
  template<>
  class/*or struct*/ basic_ios<char, struct std::char_traits<char>>
  {
    // Functions:
    protected: std::basic_ios<char, struct std::char_traits<char>>::basic_ios<char, struct std::char_traits<char>>(void)
    public: void std::basic_ios<char, struct std::char_traits<char>>::setstate(int, bool)
    public: char std::basic_ios<char, struct std::char_traits<char>>::widen(char) const
#if 0 // All found virtual functions names:
    public: virtual std::basic_ios<char, struct std::char_traits<char>>::~basic_ios<char, struct std::char_traits<char>>(void)
#endif

  public:
  };
#endif
#endif


  template<typename T0, typename T2  >
  class basic_ostream
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>>
#if 0
  template<>
  class basic_ostream<char, struct std::char_traits<char>>
  {
    // Functions:
    public: std::basic_ostream<char, struct std::char_traits<char>>::basic_ostream<char, struct std::char_traits<char>>(class std::basic_streambuf<char, struct std::char_traits<char>> *, bool)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(int)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(long)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(unsigned long)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(double)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> & (__cdecl *)(class std::basic_ostream<char, struct std::char_traits<char>> &))
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(__int64)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(unsigned __int64)
    public: void std::basic_ostream<char, struct std::char_traits<char>>::_Osfx(void)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::flush(void)
    public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::put(char)
#if 0 // All found virtual functions names:
    public: virtual std::basic_ostream<char, struct std::char_traits<char>>::~basic_ostream<char, struct std::char_traits<char>>(void)
#endif

  public:
  };
#endif
#endif


#if 0
  template<>
  class basic_ostream<char, struct std::char_traits<char>>
  {
  public:
  };
#endif

  template<typename T0, typename T1, typename T3  >
  class/*or struct*/ basic_ostringstream
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>, class std::allocator<char>>
#if 0
  template<>
  class/*or struct*/ basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>
  {
    // VFTable. Offset=136, Size=1, Start=0
    // Owner: SophisXmlTools.dll
    // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
    public: virtual void unknown_vf_136_0(void); // 0
#endif
    // VFTable with 136 offset end

  public:
  };
#endif
#endif


  template<typename T0, typename T2  >
  class basic_streambuf
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>>
#if 0
  template<>
  class basic_streambuf<char, struct std::char_traits<char>>
  {
    // Functions:
    protected: std::basic_streambuf<char, struct std::char_traits<char>>::basic_streambuf<char, struct std::char_traits<char>>(void)
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::_Pninc(void)
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::eback(void) const
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::egptr(void) const
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::epptr(void) const
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::gptr(void) const
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::pbase(void) const
    protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::pptr(void) const
    public: int std::basic_streambuf<char, struct std::char_traits<char>>::sputc(char)
    public: __int64 std::basic_streambuf<char, struct std::char_traits<char>>::sputn(char const *, __int64)
#if 0 // All found virtual functions names:
    public: virtual std::basic_streambuf<char, struct std::char_traits<char>>::~basic_streambuf<char, struct std::char_traits<char>>(void)
    public: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::_Lock(void)
    public: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::_Unlock(void)
    protected: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::imbue(class std::locale const &)
    protected: virtual class std::basic_streambuf<char, struct std::char_traits<char>> * std::basic_streambuf<char, struct std::char_traits<char>>::setbuf(char *, __int64)
    protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::showmanyc(void)
    protected: virtual int std::basic_streambuf<char, struct std::char_traits<char>>::sync(void)
    protected: virtual int std::basic_streambuf<char, struct std::char_traits<char>>::uflow(void)
    protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::xsgetn(char *, __int64)
    protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::xsputn(char const *, __int64)
#endif

    // VFTable. Offset=0, Size=15, Start=0
    // Added virtual functions:
    public: virtual std::basic_streambuf<char, struct std::char_traits<char>>::~basic_streambuf<char, struct std::char_traits<char>>(void); // 0
    public: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::_Lock(void); // 1
    public: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::_Unlock(void); // 2
    public: virtual void unknown_vf_0_3(void); // 3
    public: virtual void unknown_vf_0_4(void); // 4
    protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::showmanyc(void); // 5
    public: virtual void unknown_vf_0_6(void); // 6
    protected: virtual int std::basic_streambuf<char, struct std::char_traits<char>>::uflow(void); // 7
    protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::xsgetn(char *, __int64); // 8
    protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::xsputn(char const *, __int64); // 9
    public: virtual void unknown_vf_0_10(void); // 10
    public: virtual void unknown_vf_0_11(void); // 11
    protected: virtual class std::basic_streambuf<char, struct std::char_traits<char>> * std::basic_streambuf<char, struct std::char_traits<char>>::setbuf(char *, __int64); // 12
    protected: virtual int std::basic_streambuf<char, struct std::char_traits<char>>::sync(void); // 13
    protected: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::imbue(class std::locale const &); // 14
    // VFTable with 0 offset end

  public:
  };
#endif
#endif


#if 0
  template<>
  class basic_streambuf<char, struct std::char_traits<char>>
  {
  public:
  };
#endif

  template<typename T0, typename T1, typename T3  >
  class basic_string
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>, class std::allocator<char>>
#if 0
  template<>
  class basic_string<char, struct std::char_traits<char>, class std::allocator<char>>
  {
  public:
  };
#endif
#endif


  template<typename T0, typename T1, typename T3  >
  class/*or struct*/ basic_stringbuf
  {
  public:
  };
#if 0 // Instances:
// <char, struct std::char_traits<char>, class std::allocator<char>>
#if 0
  template<>
  class/*or struct*/ basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>> : public basic_streambuf<char, struct std::char_traits<char>>
  {
    // VFTable. Offset=0, Size=15, Start=15
    // Corresponding base: basic_streambuf::basic_streambuf::basic_streambuf<char, struct std::char_traits<char>>
    // Owner: SophisXmlTools.dll
    // VFTable with 0 offset end

  public:
  };
#endif
#endif


  template<typename T1  >
  struct char_traits
  {
  public:
  };
#if 0 // Instances:
// <char>
#if 0
  template<>
  struct char_traits<char>
  {
  public:
  };
#endif
#endif


  class/*or struct*/ exception
  {
    // VFTable. Offset=0, Size=2, Start=0
    // Owner: SophisXmlTools.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void unknown_vf_0_1(void); // 1
    // VFTable with 0 offset end

  public:
  };

  template<typename T1  >
  class function
  {
  public:
  };
#if 0 // Instances:
// <void __cdecl(struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *, unsigned long)>
#if 0
  template<>
  class function<void __cdecl(struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *, unsigned long)>
  {
  public:
  };
#endif
// <void __cdecl(struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *, unsigned long)>
#if 0
  template<>
  class function<void __cdecl(struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *, unsigned long)>
  {
  public:
  };
#endif
#endif


  template<typename T0, typename T2  >
  struct integral_constant
  {
  public:
  };
#if 0 // Instances:
// <bool, 0>
#if 0
  template<>
  struct integral_constant<bool, 0>
  {
  public:
  };
#endif
// <bool, 1>
#if 0
  template<>
  struct integral_constant<bool, 1>
  {
  public:
  };
#endif
#endif


  template<typename T1  >
  struct less
  {
  public:
  };
#if 0 // Instances:
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
#if 0
  template<>
  struct less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
  {
  public:
  };
#endif
// <long>
#if 0
  template<>
  struct less<long>
  {
  public:
  };
#endif
// <struct QuoteKey_t>
#if 0
  template<>
  struct less<struct QuoteKey_t>
  {
  public:
  };
#endif
#endif


  template<typename T0, typename T2  >
  class list
  {
  public:
  };
#if 0 // Instances:
// <class sophis::event::CSHistoricPriceData *, class std::allocator<class sophis::event::CSHistoricPriceData *>>
#if 0
  template<>
  class list<class sophis::event::CSHistoricPriceData *, class std::allocator<class sophis::event::CSHistoricPriceData *>>
  {
  public:
  };
#endif
// <class sophis::portfolio::CSRTaxLotList, class std::allocator<class sophis::portfolio::CSRTaxLotList>>
#if 0
  template<>
  class list<class sophis::portfolio::CSRTaxLotList, class std::allocator<class sophis::portfolio::CSRTaxLotList>>
  {
  public:
  };
#endif
// <struct std::pair<char const *, char const *>, class std::allocator<struct std::pair<char const *, char const *>>>
#if 0
  template<>
  class list<struct std::pair<char const *, char const *>, class std::allocator<struct std::pair<char const *, char const *>>>
  {
  public:
  };
#endif
#endif


  class locale
  {
  public:
  };

  template<typename T0, typename T1, typename T2, typename T4  >
  class map
  {
  public:
  };
#if 0 // Instances:
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>
#if 0
  template<>
  class map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct SnapshotColumnDB_t, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>>>
#if 0
  template<>
  class map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct SnapshotColumnDB_t, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>>>
  {
  public:
  };
#endif
// <long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>>
#if 0
  template<>
  class/*or struct*/ map<long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>> : public _Tree<class std::_Tmap_traits<long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>, 0>>
  {
  public:
  };
#endif
// <long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>>
#if 0
  template<>
  class map<long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>>
  {
  public:
  };
#endif
// <long, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>>>
#if 0
  template<>
  class map<long, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>>>
  {
  public:
  };
#endif
// <struct QuoteKey_t, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>>
#if 0
  template<>
  class map<struct QuoteKey_t, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>>
  {
  public:
  };
#endif
// <struct QuoteKey_t, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>>>
#if 0
  template<>
  class map<struct QuoteKey_t, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>>>
  {
  public:
  };
#endif
#endif


  template<typename T0, typename T2  >
  struct pair
  {
  public:
  };
#if 0 // Instances:
// <char const *, char const *>
#if 0
  template<>
  struct pair<char const *, char const *>
  {
  public:
  };
#endif
// <char const *const, class sophis::misc::fpml::alerts::AlertToolkit *>
#if 0
  template<>
  struct pair<char const *const, class sophis::misc::fpml::alerts::AlertToolkit *>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>
#if 0
  template<>
  struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>
  {
  public:
  };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>
#if 0
  template<>
  struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>
  {
  public:
  };
#endif
// <long const, class sophis::misc::fpml::quotation::QuotesByDate>
#if 0
  template<>
  struct pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>
  {
  public:
  };
#endif
// <long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>
#if 0
  template<>
  struct pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>
  {
  public:
  };
#endif
// <long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>
#if 0
  template<>
  struct pair<long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>
  {
  public:
  };
#endif
// <struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>
#if 0
  template<>
  struct pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>
  {
  public:
  };
#endif
// <struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>
#if 0
  template<>
  struct pair<struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>
  {
  public:
  };
#endif
#endif


  template<typename T0, typename T1, typename T3  >
  class set
  {
  public:
  };
#if 0 // Instances:
// <long, struct std::less<long>, class std::allocator<long>>
#if 0
  template<>
  class set<long, struct std::less<long>, class std::allocator<long>>
  {
  public:
  };
#endif
#endif


  template<typename T1  >
  class shared_ptr
  {
  public:
  };
#if 0 // Instances:
// <class sophis::portfolio::ISRTaxLotPoolFactorHelper>
#if 0
  template<>
  class shared_ptr<class sophis::portfolio::ISRTaxLotPoolFactorHelper>
  {
  public:
  };
#endif
#endif


  template<typename T0, typename T2  >
  class vector
  {
  public:
  };
#if 0 // Instances:
// <__int64, class std::allocator<__int64>>
#if 0
  template<>
  class vector<__int64, class std::allocator<__int64>>
  {
  public:
  };
#endif
// <class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>>
#if 0
  template<>
  class/*or struct*/ vector<class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>>
  {
    // Functions:
    public: class std::vector<class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>> & std::vector<class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>>::operator=(class std::vector<class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>> &&)
    public: void std::vector<class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>>::push_back(class sophis::tools::CSRAbstractEvent *&&)
  public:
  };
#endif
// <class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>>
#if 0
  template<>
  class vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>>
  {
  public:
  };
#endif
// <long, class std::allocator<long>>
#if 0
  template<>
  class vector<long, class std::allocator<long>>
  {
  public:
  };
#endif
// <struct OCILobLocator const *, class std::allocator<struct OCILobLocator const *>>
#if 0
  template<>
  class vector<struct OCILobLocator const *, class std::allocator<struct OCILobLocator const *>>
  {
  public:
  };
#endif
// <struct PriceDB_t, class std::allocator<struct PriceDB_t>>
#if 0
  template<>
  class vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>
  {
  public:
  };
#endif
// <struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, class std::allocator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>>
#if 0
  template<>
  class vector<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, class std::allocator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>>
  {
  public:
  };
#endif
// <struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, class std::allocator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>>
#if 0
  template<>
  class vector<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, class std::allocator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>>
  {
  public:
  };
#endif
// <struct sophis::DAL::SSRepoMargin, class std::allocator<struct sophis::DAL::SSRepoMargin>>
#if 0
  template<>
  class/*or struct*/ vector<struct sophis::DAL::SSRepoMargin, class std::allocator<struct sophis::DAL::SSRepoMargin>>
  {
  public:
  };
#endif
// <struct sophis::listed_market::SeriesKey, class std::allocator<struct sophis::listed_market::SeriesKey>>
#if 0
  template<>
  class vector<struct sophis::listed_market::SeriesKey, class std::allocator<struct sophis::listed_market::SeriesKey>>
  {
  public:
  };
#endif
// <struct sophis::market_data::SSDividend, class std::allocator<struct sophis::market_data::SSDividend>>
#if 0
  template<>
  class/*or struct*/ vector<struct sophis::market_data::SSDividend, class std::allocator<struct sophis::market_data::SSDividend>>
  {
  public:
  };
#endif
// <struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping, class std::allocator<struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping>>
#if 0
  template<>
  class vector<struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping, class std::allocator<struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping>>
  {
  public:
  };
#endif
// <unsigned __int64, class std::allocator<unsigned __int64>>
#if 0
  template<>
  class vector<unsigned __int64, class std::allocator<unsigned __int64>>
  {
  public:
  };
#endif
// <void const *, class std::allocator<void const *>>
#if 0
  template<>
  class vector<void const *, class std::allocator<void const *>>
  {
  public:
  };
#endif
#endif


#if 0
  template<>
  class vector<class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>>
  {
  public:
  };
#endif


  // Functions:
  void _Xbad_function_call(void)
  void _Xlength_error(char const *)
  void _Xout_of_range(char const *)
  bool uncaught_exception(void)
public:
};
