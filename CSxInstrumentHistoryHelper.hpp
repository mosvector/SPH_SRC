/* Autogenerated header */
#pragma once

class CSxInstrumentHistoryHelper
{
  // Functions:
  public: CSxInstrumentHistoryHelper(class CSxInstrumentHistoryHelper const &)
  public: CSxInstrumentHistoryHelper(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
  public: class CSxInstrumentHistoryHelper & operator=(class CSxInstrumentHistoryHelper const &)
  private: void _saveHistoricalPrices(class std::map<long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>> const &)
  private: void _saveHistoricalPricesForOneDate(long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &)
  private: void _saveSnapshotPrices(class std::map<struct QuoteKey_t, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>> const &)
  private: void _saveSnapshotPricesForOneDate(struct QuoteKey_t const &, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &, class sophis::tools::CSREventVector &)
  public: bool hasHistoryFor(double, char const *) const
  public: bool hasSnapshotHistoryFor(double, char const *) const
  public: void resetInstrument(long)
  public: bool savePricesForDates(class std::map<long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>> const &, class std::map<struct QuoteKey_t, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>> const &, bool, class sophis::tools::CSREventVector &)
  public: bool savePricesForOneDate(struct QuoteKey_t const &, bool, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &, class sophis::tools::CSREventVector &)
  // Static functions:
  public: static double GetFixingForField(long, long, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
  protected: static bool MustSendSAISMessage(void)
  public: static void SetQuotationsCoherencyMode(enum EQuotationsCoherencyMode)
  // Variables:
  private: static char const *__CLASS__
  private: static enum EQuotationsCoherencyMode fQuotationsCoherencyMode
#if 0 // All found virtual functions names:
  public: virtual ~CSxInstrumentHistoryHelper(void)
  protected: virtual bool DataToBeSaved(long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &)
  public: virtual void Notify(class sophis::tools::CSREventVector &) const
  protected: virtual void UpdateCache(long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &)
#endif

  // VFTable. Offset=0, Size=4, Start=0
  // Owner: SophisXmlTools.dll
  // Added virtual functions:
  public: virtual ~CSxInstrumentHistoryHelper(void); // 0
  public: virtual void Notify(class sophis::tools::CSREventVector &) const; // 1
  protected: virtual bool DataToBeSaved(long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &); // 2
  protected: virtual void UpdateCache(long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &); // 3
  // VFTable with 0 offset end

public:
};
