/* Autogenerated header */
#pragma once

namespace/*or class/struct?*/ sphSystem
{
  // Nested containers:
  namespace/*or class/struct?*/ dataModel
  {
    // Nested containers:
    class/*or struct*/ BasicTransformer
    {
      // Functions:
      public: sphSystem::dataModel::BasicTransformer::BasicTransformer(void)
#if 0 // All found virtual functions names:
      public: virtual sphSystem::dataModel::BasicTransformer::~BasicTransformer(void)
      public: virtual void sphSystem::dataModel::BasicTransformer::getEntryValue(char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
      public: virtual bool sphSystem::dataModel::BasicTransformer::hasEntry(char const *)
#endif

    public:
    };


  };

  namespace/*or class/struct?*/ thread
  {
    // Nested containers:
    class/*or struct*/ BasicWorker
    {
      // Static functions:
      public: static class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> sphSystem::thread::BasicWorker::create(void)
    public:
    };

    class/*or struct*/ ThreadedWorker
    {
      // Static functions:
      public: static class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> sphSystem::thread::ThreadedWorker::create(class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>)
    public:
    };


  };


};
