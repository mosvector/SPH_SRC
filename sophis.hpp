/* Autogenerated header */
#pragma once

namespace/*or class/struct?*/ sophis
{
  // Nested containers:
  namespace/*or class/struct?*/ tools
  {
    // Nested containers:
    class/*or struct*/ dataModel
    {
    public:
      // Enumerations:
      enum ValueKind : int {
      };

      // Nested containers:
      class ArrayOfStrings
      {
        // Functions:
        public: sophis::tools::dataModel::ArrayOfStrings::ArrayOfStrings(class sophis::tools::dataModel::ArrayOfStrings const &)
        public: sophis::tools::dataModel::ArrayOfStrings::ArrayOfStrings(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::ArrayOfStrings::~ArrayOfStrings(void)
#endif

      public:
      };

      class Attribute
      {
      public:
      };

      class AttributeSet
      {
        // Functions:
        public: class sophis::tools::dataModel::Attribute & sophis::tools::dataModel::AttributeSet::add_wons(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::AttributeSet::~AttributeSet(void)
#endif

        // VFTable. Offset=0, Size=14, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual sophis::tools::dataModel::AttributeSet::~AttributeSet(void) = 0; // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void) = 0; // 2
        public: virtual void unknown_vf_0_3(void) = 0; // 3
        public: virtual void unknown_vf_0_4(void) = 0; // 4
        public: virtual void unknown_vf_0_5(void) = 0; // 5
        public: virtual void unknown_vf_0_6(void) = 0; // 6
        public: virtual void unknown_vf_0_7(void) = 0; // 7
        public: virtual void unknown_vf_0_8(void) = 0; // 8
        public: virtual void unknown_vf_0_9(void) = 0; // 9
        public: virtual void unknown_vf_0_10(void) = 0; // 10
        public: virtual void unknown_vf_0_11(void) = 0; // 11
        public: virtual void unknown_vf_0_12(void) = 0; // 12
        public: virtual void unknown_vf_0_13(void); // 13
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ BasicDataSet
      {
        // Functions:
        public: sophis::tools::dataModel::BasicDataSet::BasicDataSet(void)
        public: void sophis::tools::dataModel::BasicDataSet::`vbase dtor'(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::BasicDataSet::~BasicDataSet(void)
        public: virtual void sophis::tools::dataModel::BasicDataSet::clear(void)
        public: virtual class sophis::tools::dataModel::Value * sophis::tools::dataModel::BasicDataSet::clone(void) const
        public: virtual bool sophis::tools::dataModel::BasicDataSet::compare(class sophis::tools::dataModel::Value const &) const
        public: virtual unsigned __int64 sophis::tools::dataModel::BasicDataSet::componentCount(bool) const
        public: virtual class sophis::tools::dataModel::GenericDataIterator<class sophis::tools::dataModel::Data> * sophis::tools::dataModel::BasicDataSet::components(void)
        public: virtual class sophis::tools::dataModel::GenericDataIterator<class sophis::tools::dataModel::Data const> * sophis::tools::dataModel::BasicDataSet::components(void) const
        public: virtual class sophis::tools::dataModel::Data & sophis::tools::dataModel::BasicDataSet::getData(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *)
        public: virtual class sophis::tools::dataModel::Data const & sophis::tools::dataModel::BasicDataSet::getData(char const *, enum sophis::tools::dataModel::ValueKind) const
        public: virtual class sophis::tools::dataModel::Data & sophis::tools::dataModel::BasicDataSet::getDataFront(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *)
        public: virtual bool sophis::tools::dataModel::BasicDataSet::has(char const *, bool) const
        public: virtual enum sophis::tools::dataModel::ValueKind sophis::tools::dataModel::BasicDataSet::kind(void) const
        public: virtual class sophis::tools::dataModel::Data & sophis::tools::dataModel::BasicDataSet::lookup(char const *, bool)
        public: virtual class sophis::tools::dataModel::Data const & sophis::tools::dataModel::BasicDataSet::lookup(char const *, bool) const
        public: virtual void sophis::tools::dataModel::BasicDataSet::mergeWith(class sophis::tools::dataModel::DataSet const &, bool)
        public: virtual void sophis::tools::dataModel::BasicDataSet::ns(char const *)
        public: virtual char const * sophis::tools::dataModel::BasicDataSet::ns(void) const
        public: virtual void sophis::tools::dataModel::BasicDataSet::print(class std::basic_ostream<char, struct std::char_traits<char>> &) const
        public: virtual bool sophis::tools::dataModel::BasicDataSet::remove(char const *, bool)
        public: virtual void sophis::tools::dataModel::BasicDataSet::type(char const *)
        public: virtual char const * sophis::tools::dataModel::BasicDataSet::type(void) const
#endif

        // VFTable. Offset=0, Size=22, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual enum sophis::tools::dataModel::ValueKind sophis::tools::dataModel::BasicDataSet::kind(void) const; // 0
        public: virtual class sophis::tools::dataModel::Value * sophis::tools::dataModel::BasicDataSet::clone(void) const; // 1
        public: virtual bool sophis::tools::dataModel::BasicDataSet::compare(class sophis::tools::dataModel::Value const &) const; // 2
        public: virtual char const * sophis::tools::dataModel::BasicDataSet::ns(void) const; // 3
        public: virtual void sophis::tools::dataModel::BasicDataSet::ns(char const *); // 4
        public: virtual char const * sophis::tools::dataModel::BasicDataSet::type(void) const; // 5
        public: virtual void sophis::tools::dataModel::BasicDataSet::type(char const *); // 6
        public: virtual void sophis::tools::dataModel::BasicDataSet::print(class std::basic_ostream<char, struct std::char_traits<char>> &) const; // 7
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual class sophis::tools::dataModel::GenericDataIterator<class sophis::tools::dataModel::Data const> * sophis::tools::dataModel::BasicDataSet::components(void) const; // 9
        public: virtual class sophis::tools::dataModel::GenericDataIterator<class sophis::tools::dataModel::Data> * sophis::tools::dataModel::BasicDataSet::components(void); // 10
        public: virtual unsigned __int64 sophis::tools::dataModel::BasicDataSet::componentCount(bool) const; // 11
        public: virtual void sophis::tools::dataModel::BasicDataSet::clear(void); // 12
        public: virtual class sophis::tools::dataModel::Data const & sophis::tools::dataModel::BasicDataSet::lookup(char const *, bool) const; // 13
        public: virtual class sophis::tools::dataModel::Data & sophis::tools::dataModel::BasicDataSet::lookup(char const *, bool); // 14
        public: virtual class sophis::tools::dataModel::Data const & sophis::tools::dataModel::BasicDataSet::getData(char const *, enum sophis::tools::dataModel::ValueKind) const; // 15
        public: virtual class sophis::tools::dataModel::Data & sophis::tools::dataModel::BasicDataSet::getData(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *); // 16
        public: virtual class sophis::tools::dataModel::Data & sophis::tools::dataModel::BasicDataSet::getDataFront(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *); // 17
        public: virtual bool sophis::tools::dataModel::BasicDataSet::has(char const *, bool) const; // 18
        public: virtual bool sophis::tools::dataModel::BasicDataSet::remove(char const *, bool); // 19
        public: virtual void sophis::tools::dataModel::BasicDataSet::mergeWith(class sophis::tools::dataModel::DataSet const &, bool); // 20
        public: virtual void unknown_vf_0_21(void); // 21
        // VFTable with 0 offset end

        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sophis::tools::dataModel::BasicDataSet::~BasicDataSet(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      namespace/*or class/struct?*/ Constants
      {
        // Variables:
        public: static char const *sophis::tools::dataModel::Constants::SOPHIS_COMMON_BYTE
        public: static char const *sophis::tools::dataModel::Constants::SOPHIS_COMMON_NAMESPACE
        public: static char const *sophis::tools::dataModel::Constants::SOPHIS_COMMON_RELATIVE_DATE
      };

      class Data
      {
        // VFTable. Offset=0, Size=8, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void) = 0; // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void) = 0; // 2
        public: virtual void unknown_vf_0_3(void) = 0; // 3
        public: virtual void unknown_vf_0_4(void) = 0; // 4
        public: virtual void unknown_vf_0_5(void) = 0; // 5
        public: virtual void unknown_vf_0_6(void) = 0; // 6
        public: virtual void unknown_vf_0_7(void); // 7
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ DataAdapter
      {
      public:
      };

      class DataContainer : public Value
      {
        // Functions:
        public: sophis::tools::dataModel::DataContainer::DataContainer(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::DataContainer::~DataContainer(void)
#endif

        // VFTable. Offset=0, Size=0, Start=0
        // Corresponding base: dataModel::dataModel::dataModel::Value
        // VFTable with 0 offset end

      public:
      };

      class DataExportException
      {
        // Functions:
        public: sophis::tools::dataModel::DataExportException::DataExportException(class sophis::tools::dataModel::DataExportException const &)
        public: sophis::tools::dataModel::DataExportException::DataExportException(char const *)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::DataExportException::~DataExportException(void)
#endif

      public:
      };

      class/*or struct*/ DataExporter
      {
        // Functions:
        public: sophis::tools::dataModel::DataExporter::DataExporter(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::DataExporter::~DataExporter(void)
#endif

      public:
      };

      class DataImportException : public DataModelException
      {
        // Functions:
        public: sophis::tools::dataModel::DataImportException::DataImportException(class sophis::tools::dataModel::DataImportException &&)
        public: sophis::tools::dataModel::DataImportException::DataImportException(class sophis::tools::dataModel::DataImportException const &)
        public: sophis::tools::dataModel::DataImportException::DataImportException(char const *, char const *)
        public: class sophis::tools::dataModel::DataImportException & sophis::tools::dataModel::DataImportException::operator=(class sophis::tools::dataModel::DataImportException &&)
        public: class sophis::tools::dataModel::DataImportException & sophis::tools::dataModel::DataImportException::operator=(class sophis::tools::dataModel::DataImportException const &)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::DataImportException::~DataImportException(void)
#endif

      public:
      };

      class/*or struct*/ DataImporter
      {
        // Functions:
        public: sophis::tools::dataModel::DataImporter::DataImporter(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::DataImporter::~DataImporter(void)
#endif

      public:
      };

      class DataModelException : public ExceptionBase
      {
        // Functions:
        protected: sophis::tools::dataModel::DataModelException::DataModelException(char const *, char const *)
        public: sophis::tools::dataModel::DataModelException::DataModelException(class sophis::tools::dataModel::DataModelException const &)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::DataModelException::~DataModelException(void)
#endif

      public:
      };

      class DataSequence : public DataContainer
      {
        // VFTable. Offset=0, Size=20, Start=0
        // Corresponding base: dataModel::dataModel::dataModel::DataContainer
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void) = 0; // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void) = 0; // 2
        public: virtual void unknown_vf_0_3(void) = 0; // 3
        public: virtual void unknown_vf_0_4(void) = 0; // 4
        public: virtual void unknown_vf_0_5(void) = 0; // 5
        public: virtual void unknown_vf_0_6(void) = 0; // 6
        public: virtual void unknown_vf_0_7(void) = 0; // 7
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual void unknown_vf_0_9(void) = 0; // 9
        public: virtual void unknown_vf_0_10(void) = 0; // 10
        public: virtual void unknown_vf_0_11(void) = 0; // 11
        public: virtual void unknown_vf_0_12(void) = 0; // 12
        public: virtual void unknown_vf_0_13(void) = 0; // 13
        public: virtual void unknown_vf_0_14(void) = 0; // 14
        public: virtual void unknown_vf_0_15(void) = 0; // 15
        public: virtual void unknown_vf_0_16(void) = 0; // 16
        public: virtual void unknown_vf_0_17(void) = 0; // 17
        public: virtual void unknown_vf_0_18(void) = 0; // 18
        public: virtual void unknown_vf_0_19(void) = 0; // 19
        // VFTable with 0 offset end

      public:
      };

      class DataSet : public DataContainer
      {
        // Functions:
        public: sophis::tools::dataModel::DataSet::DataSet(void)
        public: class sophis::tools::dataModel::Value & sophis::tools::dataModel::DataSet::get(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *)
        public: class sophis::tools::dataModel::AttributeSet & sophis::tools::dataModel::DataSet::getAttributes(char const *)
        public: class sophis::tools::dataModel::Data const & sophis::tools::dataModel::DataSet::getData(char const *, unsigned __int64) const
        public: class sophis::tools::dataModel::DataSequence & sophis::tools::dataModel::DataSet::getDataSequence(char const *, class sophis::tools::dataModel::Documentation const *)
        public: class sophis::tools::dataModel::DataSequence const & sophis::tools::dataModel::DataSet::getDataSequence(char const *) const
        public: class sophis::tools::dataModel::DataSet & sophis::tools::dataModel::DataSet::getDataSet(char const *, class sophis::tools::dataModel::Documentation const *)
        public: class sophis::tools::dataModel::DataSet const & sophis::tools::dataModel::DataSet::getDataSet(char const *) const
        public: unsigned __int64 sophis::tools::dataModel::DataSet::size(char const *) const
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::DataSet::~DataSet(void)
        public: virtual void sophis::tools::dataModel::DataSet::DeriveFrom(char const *)
#endif

        // VFTable. Offset=0, Size=22, Start=0
        // Corresponding base: dataModel::dataModel::dataModel::DataContainer
        // Added virtual functions:
        public: virtual sophis::tools::dataModel::DataSet::~DataSet(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void); // 4
        public: virtual void unknown_vf_0_5(void); // 5
        public: virtual void unknown_vf_0_6(void); // 6
        public: virtual void unknown_vf_0_7(void); // 7
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual void unknown_vf_0_9(void); // 9
        public: virtual void unknown_vf_0_10(void); // 10
        public: virtual void unknown_vf_0_11(void); // 11
        public: virtual void unknown_vf_0_12(void); // 12
        public: virtual void unknown_vf_0_13(void); // 13
        public: virtual void unknown_vf_0_14(void); // 14
        public: virtual void unknown_vf_0_15(void); // 15
        public: virtual void unknown_vf_0_16(void); // 16
        public: virtual void unknown_vf_0_17(void); // 17
        public: virtual void unknown_vf_0_18(void); // 18
        public: virtual void unknown_vf_0_19(void); // 19
        public: virtual void unknown_vf_0_20(void); // 20
        public: virtual void sophis::tools::dataModel::DataSet::DeriveFrom(char const *); // 21
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ DataSetUtil
      {
        // Static functions:
        public: static void sophis::tools::dataModel::DataSetUtil::copy(class sophis::tools::dataModel::Data &, class sophis::tools::dataModel::Data const &, bool, bool, bool)
        public: static void sophis::tools::dataModel::DataSetUtil::copy(class sophis::tools::dataModel::Data &, class sophis::tools::dataModel::Data const &, bool)
        public: static void sophis::tools::dataModel::DataSetUtil::copy(class sophis::tools::dataModel::Value &, class sophis::tools::dataModel::Value const &)
      public:
      };

      class/*or struct*/ DataTraversal
      {
        // Functions:
        public: sophis::tools::dataModel::DataTraversal::DataTraversal(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::DataTraversal::~DataTraversal(void)
        public: virtual bool sophis::tools::dataModel::DataTraversal::traverseDataSequence(class sophis::tools::dataModel::DataSequence const &, class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::ParentStack>, char const *)
        public: virtual bool sophis::tools::dataModel::DataTraversal::traverseDataSet(class sophis::tools::dataModel::DataSet const &, class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::ParentStack>, char const *)
#endif

      public:
      };

      class Documentation
      {
        // Functions:
        public: sophis::tools::dataModel::Documentation::Documentation(class sophis::tools::dataModel::Documentation const &)
        public: sophis::tools::dataModel::Documentation::Documentation(void)
        public: bool sophis::tools::dataModel::Documentation::multiTypesInSequence(void) const
        public: char const * sophis::tools::dataModel::Documentation::refName(void) const
        public: char const * sophis::tools::dataModel::Documentation::refType(void) const
        public: bool sophis::tools::dataModel::Documentation::sequence(void) const
        public: char const * sophis::tools::dataModel::Documentation::substitutionGroup(void) const
        public: char const * sophis::tools::dataModel::Documentation::substitutionGroupElement(void) const
        public: char const * sophis::tools::dataModel::Documentation::substitutionGroupHeadType(void) const
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::Documentation::~Documentation(void)
        public: virtual bool sophis::tools::dataModel::Documentation::Anonymous(void) const
        public: virtual bool sophis::tools::dataModel::Documentation::Choise(void) const
        public: virtual char const * sophis::tools::dataModel::Documentation::Comment(void) const
        public: virtual char const * sophis::tools::dataModel::Documentation::CommentComplexType(void) const
        public: virtual char const * sophis::tools::dataModel::Documentation::ComplexType(void) const
        public: virtual char const * sophis::tools::dataModel::Documentation::EnumsComment(int) const
        public: virtual int sophis::tools::dataModel::Documentation::EnumsCount(void) const
        public: virtual char const * sophis::tools::dataModel::Documentation::EnumsVal(int) const
        public: virtual int sophis::tools::dataModel::Documentation::MaximumSize(void) const
        public: virtual int sophis::tools::dataModel::Documentation::MinimumSize(void) const
        public: virtual char const * sophis::tools::dataModel::Documentation::NameSpace(void) const
        public: virtual bool sophis::tools::dataModel::Documentation::NilPossible(void) const
        public: virtual bool sophis::tools::dataModel::Documentation::NormalizedString(void) const
        public: virtual bool sophis::tools::dataModel::Documentation::Optional(void) const
#endif

        // VFTable. Offset=0, Size=15, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual sophis::tools::dataModel::Documentation::~Documentation(void); // 0
        public: virtual bool sophis::tools::dataModel::Documentation::Optional(void) const; // 1
        public: virtual bool sophis::tools::dataModel::Documentation::NilPossible(void) const; // 2
        public: virtual char const * sophis::tools::dataModel::Documentation::ComplexType(void) const; // 3
        public: virtual int sophis::tools::dataModel::Documentation::MinimumSize(void) const; // 4
        public: virtual int sophis::tools::dataModel::Documentation::MaximumSize(void) const; // 5
        public: virtual bool sophis::tools::dataModel::Documentation::NormalizedString(void) const; // 6
        public: virtual char const * sophis::tools::dataModel::Documentation::Comment(void) const; // 7
        public: virtual char const * sophis::tools::dataModel::Documentation::CommentComplexType(void) const; // 8
        public: virtual int sophis::tools::dataModel::Documentation::EnumsCount(void) const; // 9
        public: virtual char const * sophis::tools::dataModel::Documentation::EnumsVal(int) const; // 10
        public: virtual char const * sophis::tools::dataModel::Documentation::EnumsComment(int) const; // 11
        public: virtual char const * sophis::tools::dataModel::Documentation::NameSpace(void) const; // 12
        public: virtual bool sophis::tools::dataModel::Documentation::Choise(void) const; // 13
        public: virtual bool sophis::tools::dataModel::Documentation::Anonymous(void) const; // 14
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ DocumentationDecorator : public Documentation
      {
        // Functions:
        public: sophis::tools::dataModel::DocumentationDecorator::DocumentationDecorator(class sophis::tools::dataModel::Documentation const *)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::DocumentationDecorator::~DocumentationDecorator(void)
        public: virtual bool sophis::tools::dataModel::DocumentationDecorator::Anonymous(void) const
        public: virtual bool sophis::tools::dataModel::DocumentationDecorator::Choise(void) const
        public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::Comment(void) const
        public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::CommentComplexType(void) const
        public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::ComplexType(void) const
        public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::EnumsComment(int) const
        public: virtual int sophis::tools::dataModel::DocumentationDecorator::EnumsCount(void) const
        public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::EnumsVal(int) const
        public: virtual int sophis::tools::dataModel::DocumentationDecorator::MaximumSize(void) const
        public: virtual int sophis::tools::dataModel::DocumentationDecorator::MinimumSize(void) const
        public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::NameSpace(void) const
        public: virtual bool sophis::tools::dataModel::DocumentationDecorator::NilPossible(void) const
        public: virtual bool sophis::tools::dataModel::DocumentationDecorator::NormalizedString(void) const
        public: virtual bool sophis::tools::dataModel::DocumentationDecorator::Optional(void) const
#endif

        // VFTable. Offset=0, Size=15, Start=15
        // Corresponding base: dataModel::dataModel::dataModel::Documentation
        // public: virtual sophis::tools::dataModel::DocumentationDecorator::~DocumentationDecorator(void); // 0
        // Overrides:
        public: virtual bool sophis::tools::dataModel::DocumentationDecorator::Optional(void) const override; // 1
        public: virtual bool sophis::tools::dataModel::DocumentationDecorator::NilPossible(void) const override; // 2
        public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::ComplexType(void) const override; // 3
        public: virtual int sophis::tools::dataModel::DocumentationDecorator::MinimumSize(void) const override; // 4
        public: virtual int sophis::tools::dataModel::DocumentationDecorator::MaximumSize(void) const override; // 5
        public: virtual bool sophis::tools::dataModel::DocumentationDecorator::NormalizedString(void) const override; // 6
        public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::Comment(void) const override; // 7
        public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::CommentComplexType(void) const override; // 8
        public: virtual int sophis::tools::dataModel::DocumentationDecorator::EnumsCount(void) const override; // 9
        public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::EnumsVal(int) const override; // 10
        public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::EnumsComment(int) const override; // 11
        public: virtual bool sophis::tools::dataModel::DocumentationDecorator::Choise(void) const override; // 13
        public: virtual bool sophis::tools::dataModel::DocumentationDecorator::Anonymous(void) const override; // 14
        // VFTable with 0 offset end

      public:
      };

      template<typename T1      >
      class GenericDataIterator
      {
      public:
      };
#if 0 // Instances:
// <class sophis::tools::dataModel::Data const>
#if 0
      template<>
      class GenericDataIterator<class sophis::tools::dataModel::Data const>
      {
      public:
      };
#endif
// <class sophis::tools::dataModel::Data>
#if 0
      template<>
      class GenericDataIterator<class sophis::tools::dataModel::Data>
      {
      public:
      };
#endif
#endif


      class/*or struct*/ InvalidDataValue : public DataModelException
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: dataModel::dataModel::dataModel::DataModelException
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class NoSuchData
      {
        // Functions:
        public: sophis::tools::dataModel::NoSuchData::NoSuchData(class sophis::tools::dataModel::NoSuchData const &)
        public: sophis::tools::dataModel::NoSuchData::NoSuchData(char const *)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::NoSuchData::~NoSuchData(void)
#endif

      public:
      };

      class ParentStack
      {
        // Functions:
        public: sophis::tools::dataModel::ParentStack::ParentStack(class sophis::tools::dataModel::ParentStack const &)
        public: void sophis::tools::dataModel::ParentStack::`vbase dtor'(void)
        // VFTable. Offset=48, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_48_0(void); // 0
        public: virtual void unknown_vf_48_1(void); // 1
        public: virtual void unknown_vf_48_2(void); // 2
        public: virtual void unknown_vf_48_3(void); // 3
#endif
        // VFTable with 48 offset end

      public:
      };

      class PlainValue
      {
      public:
      };

      class TransformationFailure
      {
        // Functions:
        public: sophis::tools::dataModel::TransformationFailure::TransformationFailure(class sophis::tools::dataModel::TransformationFailure const &)
        public: sophis::tools::dataModel::TransformationFailure::TransformationFailure(char const *)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::TransformationFailure::~TransformationFailure(void)
#endif

      public:
      };

      class Transformer
      {
      public:
      };

      class/*or struct*/ Traversal
      {
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::Traversal::~Traversal(void)
#endif

      public:
      };

      class/*or struct*/ Traverser
      {
        // Functions:
        public: sophis::tools::dataModel::Traverser::Traverser(bool, bool)
        public: void sophis::tools::dataModel::Traverser::`vbase dtor'(void)
        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class UnknownValueKind
      {
        // Functions:
        public: sophis::tools::dataModel::UnknownValueKind::UnknownValueKind(class sophis::tools::dataModel::UnknownValueKind const &)
        public: sophis::tools::dataModel::UnknownValueKind::UnknownValueKind(long)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::UnknownValueKind::~UnknownValueKind(void)
#endif

      public:
      };

      class Value
      {
        // VFTable. Offset=0, Size=0, Start=0
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ ValueTypeUtil
      {
        // Static functions:
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophis::tools::dataModel::ValueTypeUtil::getTextKind(enum sophis::tools::dataModel::ValueKind)
        public: static bool sophis::tools::dataModel::ValueTypeUtil::isPlain(enum sophis::tools::dataModel::ValueKind)
      public:
      };


      // Functions:
      class std::basic_ostream<char, struct std::char_traits<char>> & sophis::tools::dataModel::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::tools::dataModel::ArrayOfStrings const &)
      class std::basic_ostream<char, struct std::char_traits<char>> & sophis::tools::dataModel::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::tools::dataModel::Value const &)
    public:
    };

    class/*or struct*/ util
    {
    public:
      // Nested containers:
      class/*or struct*/ BasicRunnable
      {
        // Functions:
        public: sophis::tools::util::BasicRunnable::BasicRunnable(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::util::BasicRunnable::~BasicRunnable(void)
        public: virtual void sophis::tools::util::BasicRunnable::_add_ref(void)
        public: virtual void sophis::tools::util::BasicRunnable::_remove_ref(void)
        protected: virtual void sophis::tools::util::BasicRunnable::clean(void)
        public: virtual long sophis::tools::util::BasicRunnable::getRef(void) const
        public: virtual bool sophis::tools::util::BasicRunnable::isRunning(void)
        protected: virtual void sophis::tools::util::BasicRunnable::requestExit(void)
        public: virtual void sophis::tools::util::BasicRunnable::run(void)
        public: virtual void sophis::tools::util::BasicRunnable::stop(bool)
#endif

      public:
      };

      class ByteArray
      {
        // Functions:
        public: sophis::tools::util::ByteArray::ByteArray(void)
        public: void sophis::tools::util::ByteArray::`vbase dtor'(void)
        public: void sophis::tools::util::ByteArray::buffer(char *, unsigned __int64, unsigned __int64, bool)
        public: char const *const sophis::tools::util::ByteArray::buffer(void) const
        public: unsigned __int64 sophis::tools::util::ByteArray::size(void) const
        // VFTable. Offset=64, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_64_0(void); // 0
        public: virtual void unknown_vf_64_1(void); // 1
        public: virtual void unknown_vf_64_2(void); // 2
        public: virtual void unknown_vf_64_3(void); // 3
#endif
        // VFTable with 64 offset end

      public:
      };

      class/*or struct*/ DateTimeUtil
      {
        // Static functions:
        public: static void sophis::tools::util::DateTimeUtil::scanDate(class std::basic_istream<char, struct std::char_traits<char>> &, class sophisTools::CSRDay &, bool)
      public:
      };

      class DateTimeWrapper
      {
        // Functions:
        public: sophis::tools::util::DateTimeWrapper::DateTimeWrapper(void)
        public: sophis::tools::util::DateTimeWrapper::~DateTimeWrapper(void)
      public:
      };

      struct MonthDayWrapper
      {
      public:
      };

      template<typename T1      >
      class/*or struct*/ NotificationListener
      {
      public:
      };
#if 0 // Instances:
// <struct sophis::tools::util::Worker::JobTerminatedEvent>
#if 0
      template<>
      class/*or struct*/ NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void) = 0; // 0
        // VFTable with 0 offset end

        // VFTable. Offset=32, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_32_0(void); // 0
        public: virtual void unknown_vf_32_1(void); // 1
        public: virtual void unknown_vf_32_2(void); // 2
        public: virtual void unknown_vf_32_3(void); // 3
#endif
        // VFTable with 32 offset end

      public:
      };
#endif
#endif


      class StringBoolMap
      {
        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class StringPairList
      {
        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class/*or struct*/ StringToStringMap
      {
        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class TimeWrapper
      {
        // Functions:
        public: sophis::tools::util::TimeWrapper::TimeWrapper(void)
        public: sophis::tools::util::TimeWrapper::~TimeWrapper(void)
      public:
      };

      class Worker
      {
      public:
        // Nested containers:
        struct JobTerminatedEvent
        {
        public:
        };


      public:
      };

      struct YearMonthWrapper
      {
      public:
      };


      // Functions:
      class std::basic_istream<char, struct std::char_traits<char>> & sophis::tools::util::operator>>(class std::basic_istream<char, struct std::char_traits<char>> &, struct sophis::tools::util::MonthDayWrapper &)
      class std::basic_istream<char, struct std::char_traits<char>> & sophis::tools::util::operator>>(class std::basic_istream<char, struct std::char_traits<char>> &, struct sophis::tools::util::YearMonthWrapper &)
      class std::basic_istream<char, struct std::char_traits<char>> & sophis::tools::util::operator>>(class std::basic_istream<char, struct std::char_traits<char>> &, class sophis::tools::util::DateTimeWrapper &)
      class std::basic_istream<char, struct std::char_traits<char>> & sophis::tools::util::operator>>(class std::basic_istream<char, struct std::char_traits<char>> &, class sophis::tools::util::TimeWrapper &)
      class std::basic_ostream<char, struct std::char_traits<char>> & sophis::tools::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, struct sophis::tools::util::MonthDayWrapper const &)
      class std::basic_ostream<char, struct std::char_traits<char>> & sophis::tools::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, struct sophis::tools::util::YearMonthWrapper const &)
      class std::basic_ostream<char, struct std::char_traits<char>> & sophis::tools::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::tools::util::DateTimeWrapper const &)
      class std::basic_ostream<char, struct std::char_traits<char>> & sophis::tools::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::tools::util::TimeWrapper const &)
    public:
    };


  };

  namespace/*or class/struct?*/ xml
  {
    // Nested containers:
    class SimpleAllocator : public MemoryManager
    {
      // Functions:
      public: sophis::xml::SimpleAllocator::SimpleAllocator(void)
      // Static functions:
      public: static void sophis::xml::SimpleAllocator::dispose(void)
      public: static class xercesc_3_2::MemoryManager * sophis::xml::SimpleAllocator::getInstance(void)
      public: static void sophis::xml::SimpleAllocator::init(void)
      // Variables:
      private: static class sophis::xml::SimpleAllocator *sophis::xml::SimpleAllocator::fSimpleAllocator
#if 0 // All found virtual functions names:
      public: virtual sophis::xml::SimpleAllocator::~SimpleAllocator(void)
      public: virtual void * sophis::xml::SimpleAllocator::allocate(unsigned __int64)
      public: virtual void sophis::xml::SimpleAllocator::deallocate(void *)
      public: virtual class xercesc_3_2::MemoryManager * sophis::xml::SimpleAllocator::getExceptionMemoryManager(void)
#endif

      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: xercesc_3_2::MemoryManager
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual sophis::xml::SimpleAllocator::~SimpleAllocator(void); // 0
      public: virtual class xercesc_3_2::MemoryManager * sophis::xml::SimpleAllocator::getExceptionMemoryManager(void); // 1
      public: virtual void * sophis::xml::SimpleAllocator::allocate(unsigned __int64); // 2
      public: virtual void sophis::xml::SimpleAllocator::deallocate(void *); // 3
      // VFTable with 0 offset end

    public:
    };

    namespace/*or class/struct?*/ dataModel
    {
      // Nested containers:
      class/*or struct*/ AlreadyDefinedDataSetOnlyDecorator : public DataSetDecorator
      {
        // VFTable. Offset=0, Size=63, Start=63
        // Corresponding base: dataModel::dataModel::dataModel::DataSetDecorator
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ AttributeSetDecorator : public Decorator<class sophis::tools::dataModel::AttributeSet>
      {
        // VFTable. Offset=0, Size=14, Start=14
        // Corresponding base: Decorator::Decorator::Decorator::Decorator::Decorator<class sophis::tools::dataModel::AttributeSet>
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ BasicDataFactory
      {
        // VFTable. Offset=0, Size=9, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void); // 4
        public: virtual void unknown_vf_0_5(void); // 5
        public: virtual void unknown_vf_0_6(void); // 6
        public: virtual void unknown_vf_0_7(void); // 7
        public: virtual void unknown_vf_0_8(void); // 8
        // VFTable with 0 offset end

        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class/*or struct*/ BasicGrammarPool
      {
        // VFTable. Offset=0, Size=12, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void); // 4
        public: virtual void unknown_vf_0_5(void); // 5
        public: virtual void unknown_vf_0_6(void); // 6
        public: virtual void unknown_vf_0_7(void); // 7
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual void unknown_vf_0_9(void); // 9
        public: virtual void unknown_vf_0_10(void); // 10
        public: virtual void unknown_vf_0_11(void); // 11
        // VFTable with 0 offset end

        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class BasicGrammarPoolImpl
      {
        // Functions:
        protected: sophis::xml::dataModel::BasicGrammarPoolImpl::BasicGrammarPoolImpl(class xercesc_3_2::XMLGrammarPool *, class xercesc_3_2::DOMLSParser *, class xercesc_3_2::DOMLSSerializer *)
        protected: void sophis::xml::dataModel::BasicGrammarPoolImpl::`vbase dtor'(void)
        public: void sophis::xml::dataModel::BasicGrammarPoolImpl::addGrammar(class sophis::xml::dataModel::XMLGrammar &)
        public: void sophis::xml::dataModel::BasicGrammarPoolImpl::addGrammar(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>)
        public: void sophis::xml::dataModel::BasicGrammarPoolImpl::addGrammar(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, char const *, bool)
        public: void sophis::xml::dataModel::BasicGrammarPoolImpl::doAddGrammar(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, bool)
        public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::doGetEnumValues(char const *, char const *, class sophis::tools::dataModel::ArrayOfStrings &)
        public: class sophis::tools::dataModel::ArrayOfStrings const * sophis::xml::dataModel::BasicGrammarPoolImpl::enumValues(char const *, char const *)
        public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::findElement(char const *, char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
        public: void sophis::xml::dataModel::BasicGrammarPoolImpl::findNamespaces(char const *, class std::set<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>> &)
        public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::getAllSubstitutedNames(char const *, class std::vector<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>> &)
        public: class xercesc_3_2::DOMLSParser * sophis::xml::dataModel::BasicGrammarPoolImpl::getDOMBuilder(void)
        private: class xercesc_3_2::DOMImplementationLS * sophis::xml::dataModel::BasicGrammarPoolImpl::getDOMImplementationLS(void)
        public: class xercesc_3_2::DOMLSOutput * sophis::xml::dataModel::BasicGrammarPoolImpl::getDOMLSOutput(void)
        public: class xercesc_3_2::DOMLSSerializer * sophis::xml::dataModel::BasicGrammarPoolImpl::getDOMWriter(void)
        public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::getElementType(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
        public: class xercesc_3_2::SchemaGrammar * sophis::xml::dataModel::BasicGrammarPoolImpl::getGrammar(char const *)
        public: class xercesc_3_2::SchemaGrammar * sophis::xml::dataModel::BasicGrammarPoolImpl::getGrammar(char16_t const *)
        public: char const * sophis::xml::dataModel::BasicGrammarPoolImpl::getSubstituteFor(char const *, char const *, char const *)
        public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::getSubstitutedNS(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
        public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::getSubstitutedNameAndNS(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
        public: class xercesc_3_2::XMLGrammarPool * sophis::xml::dataModel::BasicGrammarPoolImpl::getXMLGrammarPool(void)
        public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::hasGrammar(char const *)
        public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::hasGrammar(char16_t const *)
        public: void sophis::xml::dataModel::BasicGrammarPoolImpl::joinGrammarLoading(void)
        public: void sophis::xml::dataModel::BasicGrammarPoolImpl::logLoadedGrammars(enum Log::Severity)
        public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::orphanGrammar(char const *)
        public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::orphanGrammar(char16_t const *)
        public: unsigned __int64 sophis::xml::dataModel::BasicGrammarPoolImpl::pendingGrammars(void)
        public: void sophis::xml::dataModel::BasicGrammarPoolImpl::stop(void)
        // Static functions:
        private: static void sophis::xml::dataModel::BasicGrammarPoolImpl::CreateGrammarLoadingGuard(class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> &)
        public: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::BasicGrammarPoolImpl> sophis::xml::dataModel::BasicGrammarPoolImpl::create(void)
        public: static void sophis::xml::dataModel::BasicGrammarPoolImpl::dispose(void)
        public: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::BasicGrammarPoolImpl> sophis::xml::dataModel::BasicGrammarPoolImpl::getInstance(void)
        public: static char16_t const * sophis::xml::dataModel::BasicGrammarPoolImpl::getLoadStoreFeatureName(void)
        public: static void sophis::xml::dataModel::BasicGrammarPoolImpl::init(void)
        // Variables:
        private: static char const *sophis::xml::dataModel::BasicGrammarPoolImpl::__CLASS__
        private: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::BasicGrammarPoolImpl> sophis::xml::dataModel::BasicGrammarPoolImpl::fInstance
        private: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::GrammarLoadingGuard> sophis::xml::dataModel::BasicGrammarPoolImpl::gGuard
        private: static bool sophis::xml::dataModel::BasicGrammarPoolImpl::gLateLoading
        private: static class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> sophis::xml::dataModel::BasicGrammarPoolImpl::gWorker
#if 0 // All found virtual functions names:
        protected: virtual sophis::xml::dataModel::BasicGrammarPoolImpl::~BasicGrammarPoolImpl(void)
        public: virtual void sophis::xml::dataModel::BasicGrammarPoolImpl::_add_ref(void)
        public: virtual void sophis::xml::dataModel::BasicGrammarPoolImpl::_remove_ref(void)
        public: virtual long sophis::xml::dataModel::BasicGrammarPoolImpl::getRef(void) const
#endif

        // VFTable. Offset=56, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        protected: virtual sophis::xml::dataModel::BasicGrammarPoolImpl::~BasicGrammarPoolImpl(void); // 0
        public: virtual void unknown_vf_56_1(void); // 1
        public: virtual void unknown_vf_56_2(void); // 2
        public: virtual void unknown_vf_56_3(void); // 3
#endif
        // VFTable with 56 offset end

      public:
      };

      class/*or struct*/ BasicXMLDocument
      {
        // Functions:
        public: sophis::xml::dataModel::BasicXMLDocument::BasicXMLDocument(void)
        public: void sophis::xml::dataModel::BasicXMLDocument::`vbase dtor'(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::dataModel::BasicXMLDocument::~BasicXMLDocument(void)
        public: virtual void sophis::xml::dataModel::BasicXMLDocument::_add_ref(void)
        public: virtual void sophis::xml::dataModel::BasicXMLDocument::_remove_ref(void)
        public: virtual long sophis::xml::dataModel::BasicXMLDocument::getRef(void) const
        public: virtual class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::BasicXMLDocument::getRootNode(void)
        public: virtual class sophis::tools::dataModel::DataSet const & sophis::xml::dataModel::BasicXMLDocument::getRootNode(void) const
        public: virtual void sophis::xml::dataModel::BasicXMLDocument::load(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophis::xml::dataModel::ImportFeature const *)
        public: virtual void sophis::xml::dataModel::BasicXMLDocument::save(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>, class sophis::xml::dataModel::ExportFeature const *)
#endif

        // VFTable. Offset=0, Size=8, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void sophis::xml::dataModel::BasicXMLDocument::_add_ref(void); // 0
        public: virtual void sophis::xml::dataModel::BasicXMLDocument::_remove_ref(void); // 1
        public: virtual long sophis::xml::dataModel::BasicXMLDocument::getRef(void) const; // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void sophis::xml::dataModel::BasicXMLDocument::load(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophis::xml::dataModel::ImportFeature const *); // 4
        public: virtual void sophis::xml::dataModel::BasicXMLDocument::save(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>, class sophis::xml::dataModel::ExportFeature const *); // 5
        public: virtual class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::BasicXMLDocument::getRootNode(void); // 6
        public: virtual class sophis::tools::dataModel::DataSet const & sophis::xml::dataModel::BasicXMLDocument::getRootNode(void) const; // 7
        // VFTable with 0 offset end

        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sophis::xml::dataModel::BasicXMLDocument::~BasicXMLDocument(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class/*or struct*/ BasicXMLDocumentImpl
      {
        // VFTable. Offset=32, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_32_0(void); // 0
        public: virtual void unknown_vf_32_1(void); // 1
        public: virtual void unknown_vf_32_2(void); // 2
        public: virtual void unknown_vf_32_3(void); // 3
#endif
        // VFTable with 32 offset end

      public:
      };

      class/*or struct*/ CascadedXSLTransformer
      {
        // Functions:
        protected: sophis::xml::dataModel::CascadedXSLTransformer::CascadedXSLTransformer(char const *, bool, bool, class std::vector<class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>>> const &, char const *)
        protected: void sophis::xml::dataModel::CascadedXSLTransformer::`vbase dtor'(void)
        public: void sophis::xml::dataModel::CascadedXSLTransformer::transform(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::Transformer> sophis::xml::dataModel::CascadedXSLTransformer::create(char const *, class std::vector<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>> const &, bool, bool, char const *)
        // Variables:
        private: static char const *sophis::xml::dataModel::CascadedXSLTransformer::__CLASS__
#if 0 // All found virtual functions names:
        protected: virtual sophis::xml::dataModel::CascadedXSLTransformer::~CascadedXSLTransformer(void)
        public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::dispose(void)
        public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::init(void)
        public: virtual char const * sophis::xml::dataModel::CascadedXSLTransformer::name(void)
        public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::postprocess(class sophis::tools::dataModel::DataSet &)
        public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::preprocess(class sophis::tools::dataModel::DataSet &)
        public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::transform(class sophis::tools::dataModel::DataSet &)
#endif

        // VFTable. Offset=0, Size=8, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual char const * sophis::xml::dataModel::CascadedXSLTransformer::name(void); // 0
        public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::init(void); // 1
        public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::preprocess(class sophis::tools::dataModel::DataSet &); // 2
        public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::transform(class sophis::tools::dataModel::DataSet &); // 3
        public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::postprocess(class sophis::tools::dataModel::DataSet &); // 4
        public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::dispose(void); // 5
        public: virtual void unknown_vf_0_6(void); // 6
        public: virtual void unknown_vf_0_7(void); // 7
        // VFTable with 0 offset end

        // VFTable. Offset=152, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        protected: virtual sophis::xml::dataModel::CascadedXSLTransformer::~CascadedXSLTransformer(void); // 0
        public: virtual void unknown_vf_152_1(void); // 1
        public: virtual void unknown_vf_152_2(void); // 2
        public: virtual void unknown_vf_152_3(void); // 3
#endif
        // VFTable with 152 offset end

      public:
      };

      class/*or struct*/ CharArrayXMLDataImporter
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=152, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_152_0(void); // 0
        public: virtual void unknown_vf_152_1(void); // 1
        public: virtual void unknown_vf_152_2(void); // 2
        public: virtual void unknown_vf_152_3(void); // 3
#endif
        // VFTable with 152 offset end

      public:
      };

      class ConfigUtil
      {
        // Functions:
        public: class sophis::xml::dataModel::ConfigUtil & sophis::xml::dataModel::ConfigUtil::operator=(class sophis::xml::dataModel::ConfigUtil &&)
        public: class sophis::xml::dataModel::ConfigUtil & sophis::xml::dataModel::ConfigUtil::operator=(class sophis::xml::dataModel::ConfigUtil const &)
        // Static functions:
        public: static bool sophis::xml::dataModel::ConfigUtil::getCheckResult(void)
      public:
      };

      template<typename T1      >
      class/*or struct*/ DataContainerDecorator
      {
      public:
      };
#if 0 // Instances:
// <class sophis::xml::dataModel::DataSequenceOnlyDecorator>
#if 0
      template<>
      class/*or struct*/ DataContainerDecorator<class sophis::xml::dataModel::DataSequenceOnlyDecorator> : public DataSequenceOnlyDecorator
      {
        // VFTable. Offset=0, Size=22, Start=22
        // Corresponding base: dataModel::dataModel::dataModel::DataSequenceOnlyDecorator
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };
#endif
// <class sophis::xml::dataModel::DataSetOnlyDecorator>
#if 0
      template<>
      class/*or struct*/ DataContainerDecorator<class sophis::xml::dataModel::DataSetOnlyDecorator> : public DataSetOnlyDecorator
      {
        // VFTable. Offset=0, Size=63, Start=63
        // Corresponding base: dataModel::dataModel::dataModel::DataSetOnlyDecorator
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


      class/*or struct*/ DataDecorator : public Decorator<class sophis::tools::dataModel::Data>
      {
        // VFTable. Offset=0, Size=12, Start=8
        // Corresponding base: Decorator::Decorator::Decorator::Decorator::Decorator<class sophis::tools::dataModel::Data>
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual void unknown_vf_0_9(void); // 9
        public: virtual void unknown_vf_0_10(void); // 10
        public: virtual void unknown_vf_0_11(void); // 11
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ DataDecoratorInSequence : public DataSetDataDecorator
      {
        // VFTable. Offset=0, Size=14, Start=12
        // Corresponding base: dataModel::dataModel::dataModel::DataSetDataDecorator
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_12(void); // 12
        public: virtual void unknown_vf_0_13(void); // 13
        // VFTable with 0 offset end

      public:
      };

      class DataFactory : public RefCount
      {
      public:
        // Nested containers:
        class/*or struct*/ Manager
        {
          // Static functions:
          public: static class std::map<class sophisTools::FlyWeightString, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>, struct std::less<class sophisTools::FlyWeightString>, class std::allocator<struct std::pair<class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>>> const & sophis::xml::dataModel::DataFactory::Manager::allInstances(void)
          public: static void sophis::xml::dataModel::DataFactory::Manager::disposeAll(void)
          public: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory> sophis::xml::dataModel::DataFactory::Manager::getDefaultInstance(void)
          public: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory> sophis::xml::dataModel::DataFactory::Manager::getInstance(char const *)
          public: static void sophis::xml::dataModel::DataFactory::Manager::initAll(void)
          public: static void sophis::xml::dataModel::DataFactory::Manager::install(class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>)
          public: static void sophis::xml::dataModel::DataFactory::Manager::installDefault(class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>)
        public:
        };


        // VFTable. Offset=0, Size=9, Start=0
        // Corresponding base: base::base::RefCount
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void) = 0; // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void) = 0; // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void) = 0; // 4
        public: virtual void unknown_vf_0_5(void) = 0; // 5
        public: virtual void unknown_vf_0_6(void) = 0; // 6
        public: virtual void unknown_vf_0_7(void) = 0; // 7
        public: virtual void unknown_vf_0_8(void) = 0; // 8
        // VFTable with 0 offset end

      public:
      };

      class DataSequenceDataDecorator : public DataDecorator
      {
        // VFTable. Offset=0, Size=12, Start=12
        // Corresponding base: dataModel::dataModel::dataModel::DataDecorator
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ DataSequenceDecorator : public DataContainerDecorator<class sophis::xml::dataModel::DataSequenceOnlyDecorator>
      {
        // VFTable. Offset=0, Size=22, Start=22
        // Corresponding base: DataContainerDecorator::DataContainerDecorator::DataContainerDecorator::DataContainerDecorator::DataContainerDecorator<class sophis::xml::dataModel::DataSequenceOnlyDecorator>
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };

      class DataSequenceOnlyDecorator : public Decorator<class sophis::tools::dataModel::DataSequence>
      {
        // VFTable. Offset=0, Size=22, Start=20
        // Corresponding base: Decorator::Decorator::Decorator::Decorator::Decorator<class sophis::tools::dataModel::DataSequence>
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_20(void); // 20
        public: virtual void unknown_vf_0_21(void); // 21
        // VFTable with 0 offset end

      public:
      };

      class DataSetDataDecorator : public DataDecorator
      {
        // VFTable. Offset=0, Size=12, Start=12
        // Corresponding base: dataModel::dataModel::dataModel::DataDecorator
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ DataSetDecorator : public DataContainerDecorator<class sophis::xml::dataModel::DataSetOnlyDecorator>
      {
        // VFTable. Offset=0, Size=63, Start=63
        // Corresponding base: DataContainerDecorator::DataContainerDecorator::DataContainerDecorator::DataContainerDecorator::DataContainerDecorator<class sophis::xml::dataModel::DataSetOnlyDecorator>
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };

      class DataSetOnlyDecorator : public Decorator<class sophis::tools::dataModel::DataSet>
      {
        // VFTable. Offset=0, Size=63, Start=22
        // Corresponding base: Decorator::Decorator::Decorator::Decorator::Decorator<class sophis::tools::dataModel::DataSet>
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_22(void); // 22
        public: virtual void unknown_vf_0_23(void); // 23
        public: virtual void unknown_vf_0_24(void); // 24
        public: virtual void unknown_vf_0_25(void); // 25
        public: virtual void unknown_vf_0_26(void); // 26
        public: virtual void unknown_vf_0_27(void); // 27
        public: virtual void unknown_vf_0_28(void); // 28
        public: virtual void unknown_vf_0_29(void); // 29
        public: virtual void unknown_vf_0_30(void); // 30
        public: virtual void unknown_vf_0_31(void); // 31
        public: virtual void unknown_vf_0_32(void); // 32
        public: virtual void unknown_vf_0_33(void); // 33
        public: virtual void unknown_vf_0_34(void); // 34
        public: virtual void unknown_vf_0_35(void); // 35
        public: virtual void unknown_vf_0_36(void); // 36
        public: virtual void unknown_vf_0_37(void); // 37
        public: virtual void unknown_vf_0_38(void); // 38
        public: virtual void unknown_vf_0_39(void); // 39
        public: virtual void unknown_vf_0_40(void); // 40
        public: virtual void unknown_vf_0_41(void); // 41
        public: virtual void unknown_vf_0_42(void); // 42
        public: virtual void unknown_vf_0_43(void); // 43
        public: virtual void unknown_vf_0_44(void); // 44
        public: virtual void unknown_vf_0_45(void); // 45
        public: virtual void unknown_vf_0_46(void); // 46
        public: virtual void unknown_vf_0_47(void); // 47
        public: virtual void unknown_vf_0_48(void); // 48
        public: virtual void unknown_vf_0_49(void); // 49
        public: virtual void unknown_vf_0_50(void); // 50
        public: virtual void unknown_vf_0_51(void); // 51
        public: virtual void unknown_vf_0_52(void); // 52
        public: virtual void unknown_vf_0_53(void); // 53
        public: virtual void unknown_vf_0_54(void); // 54
        public: virtual void unknown_vf_0_55(void); // 55
        public: virtual void unknown_vf_0_56(void); // 56
        public: virtual void unknown_vf_0_57(void); // 57
        public: virtual void unknown_vf_0_58(void); // 58
        public: virtual void unknown_vf_0_59(void); // 59
        public: virtual void unknown_vf_0_60(void); // 60
        public: virtual void unknown_vf_0_61(void); // 61
        public: virtual void unknown_vf_0_62(void); // 62
        // VFTable with 0 offset end

      public:
      };

      template<typename T1      >
      class/*or struct*/ Decorator
      {
      public:
      };
#if 0 // Instances:
// <class sophis::tools::dataModel::AttributeSet>
#if 0
      template<>
      class/*or struct*/ Decorator<class sophis::tools::dataModel::AttributeSet> : public GrammarFriend, public AttributeSet
      {
        // VFTable. Offset=0, Size=14, Start=14
        // Corresponding base: dataModel::dataModel::dataModel::AttributeSet
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };
#endif
// <class sophis::tools::dataModel::Data>
#if 0
      template<>
      class/*or struct*/ Decorator<class sophis::tools::dataModel::Data> : public GrammarFriend, public Data
      {
        // VFTable. Offset=0, Size=8, Start=8
        // Corresponding base: dataModel::dataModel::dataModel::Data
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };
#endif
// <class sophis::tools::dataModel::DataSequence>
#if 0
      template<>
      class/*or struct*/ Decorator<class sophis::tools::dataModel::DataSequence> : public GrammarFriend, public DataSequence
      {
        // VFTable. Offset=0, Size=20, Start=20
        // Corresponding base: dataModel::dataModel::dataModel::DataSequence
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };
#endif
// <class sophis::tools::dataModel::DataSet>
#if 0
      template<>
      class/*or struct*/ Decorator<class sophis::tools::dataModel::DataSet> : public GrammarFriend, public DataSet
      {
        // VFTable. Offset=0, Size=22, Start=22
        // Corresponding base: dataModel::dataModel::dataModel::DataSet
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


      class/*or struct*/ EnumMap
      {
        // VFTable. Offset=80, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_80_0(void); // 0
        public: virtual void unknown_vf_80_1(void); // 1
        public: virtual void unknown_vf_80_2(void); // 2
        public: virtual void unknown_vf_80_3(void); // 3
#endif
        // VFTable with 80 offset end

      public:
      };

      class ExportFeature
      {
        // Functions:
        public: sophis::xml::dataModel::ExportFeature::ExportFeature(class sophis::xml::dataModel::ExportFeature const &)
        public: sophis::xml::dataModel::ExportFeature::ExportFeature(void)
        public: sophis::xml::dataModel::ExportFeature::~ExportFeature(void)
        public: class sophis::xml::dataModel::ExportFeature & sophis::xml::dataModel::ExportFeature::operator=(class sophis::xml::dataModel::ExportFeature const &)
        public: void sophis::xml::dataModel::ExportFeature::checkResult(bool)
        public: bool sophis::xml::dataModel::ExportFeature::checkResult(void) const
        public: void sophis::xml::dataModel::ExportFeature::encoding(long)
        public: long sophis::xml::dataModel::ExportFeature::encoding(void) const
        public: void sophis::xml::dataModel::ExportFeature::instanceTypeGeneration(bool)
        public: bool sophis::xml::dataModel::ExportFeature::instanceTypeGeneration(void) const
        public: void sophis::xml::dataModel::ExportFeature::qualifiedAttributes(char const *, bool)
        public: class sophisTools::base::RefCountHandle<class sophis::tools::util::StringBoolMap> sophis::xml::dataModel::ExportFeature::qualifiedAttributes(void) const
        public: void sophis::xml::dataModel::ExportFeature::qualifiedElements(char const *, bool)
        public: class sophisTools::base::RefCountHandle<class sophis::tools::util::StringBoolMap> sophis::xml::dataModel::ExportFeature::qualifiedElements(void) const
        public: void sophis::xml::dataModel::ExportFeature::renameNonUniqueIds(bool)
        public: bool sophis::xml::dataModel::ExportFeature::renameNonUniqueIds(void) const
        public: void sophis::xml::dataModel::ExportFeature::renameSubstitutionGroups(bool)
        public: bool sophis::xml::dataModel::ExportFeature::renameSubstitutionGroups(void) const
        public: void sophis::xml::dataModel::ExportFeature::renameXsiType(bool)
        public: bool sophis::xml::dataModel::ExportFeature::renameXsiType(void) const
        public: void sophis::xml::dataModel::ExportFeature::reservePrefix(char const *, char const *)
        public: class sophisTools::base::RefCountHandle<class sophis::tools::util::StringPairList> sophis::xml::dataModel::ExportFeature::reservedPrefixes(void) const
        public: void sophis::xml::dataModel::ExportFeature::withFormatPrettyPrint(bool)
        public: bool sophis::xml::dataModel::ExportFeature::withFormatPrettyPrint(void) const
        public: void sophis::xml::dataModel::ExportFeature::withGrammar(bool)
        public: bool sophis::xml::dataModel::ExportFeature::withGrammar(void) const
        public: void sophis::xml::dataModel::ExportFeature::withXmlDeclaration(bool)
        public: bool sophis::xml::dataModel::ExportFeature::withXmlDeclaration(void) const
      public:
      };

      class/*or struct*/ ExportFeatureImpl
      {
        // VFTable. Offset=184, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_184_0(void); // 0
        public: virtual void unknown_vf_184_1(void); // 1
        public: virtual void unknown_vf_184_2(void); // 2
        public: virtual void unknown_vf_184_3(void); // 3
#endif
        // VFTable with 184 offset end

      public:
      };

      class/*or struct*/ GrammarFriend
      {
      public:
      };

      class/*or struct*/ GrammarLoadingException : public ExceptionBase
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: base::base::ExceptionBase
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class GrammarLoadingGuard
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=136, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_136_0(void); // 0
        public: virtual void unknown_vf_136_1(void); // 1
        public: virtual void unknown_vf_136_2(void); // 2
        public: virtual void unknown_vf_136_3(void); // 3
#endif
        // VFTable with 136 offset end

      public:
      };

      class GrammarPool : public RefCount
      {
        // VFTable. Offset=0, Size=12, Start=0
        // Corresponding base: base::base::RefCount
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void) = 0; // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void) = 0; // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void) = 0; // 4
        public: virtual void unknown_vf_0_5(void) = 0; // 5
        public: virtual void unknown_vf_0_6(void) = 0; // 6
        public: virtual void unknown_vf_0_7(void) = 0; // 7
        public: virtual void unknown_vf_0_8(void) = 0; // 8
        public: virtual void unknown_vf_0_9(void) = 0; // 9
        public: virtual void unknown_vf_0_10(void) = 0; // 10
        public: virtual void unknown_vf_0_11(void) = 0; // 11
        // VFTable with 0 offset end

      public:
      };

      class GrammarPoolSingleton
      {
        // Functions:
        public: class sophis::xml::dataModel::GrammarPoolSingleton & sophis::xml::dataModel::GrammarPoolSingleton::operator=(class sophis::xml::dataModel::GrammarPoolSingleton &&)
        public: class sophis::xml::dataModel::GrammarPoolSingleton & sophis::xml::dataModel::GrammarPoolSingleton::operator=(class sophis::xml::dataModel::GrammarPoolSingleton const &)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::GrammarPool> sophis::xml::dataModel::GrammarPoolSingleton::getInstance(void)
      public:
      };

      class ImportFeature
      {
        // Functions:
        public: sophis::xml::dataModel::ImportFeature::ImportFeature(class sophis::xml::dataModel::ImportFeature const &)
        public: sophis::xml::dataModel::ImportFeature::ImportFeature(void)
        public: sophis::xml::dataModel::ImportFeature::~ImportFeature(void)
        public: class sophis::xml::dataModel::ImportFeature & sophis::xml::dataModel::ImportFeature::operator=(class sophis::xml::dataModel::ImportFeature const &)
        public: void sophis::xml::dataModel::ImportFeature::convertEnums(bool)
        public: bool sophis::xml::dataModel::ImportFeature::convertEnums(void) const
        public: void sophis::xml::dataModel::ImportFeature::ignoreRootElement(bool)
        public: bool sophis::xml::dataModel::ImportFeature::ignoreRootElement(void) const
        public: void sophis::xml::dataModel::ImportFeature::keepXmlStartingAttributes(bool)
        public: bool sophis::xml::dataModel::ImportFeature::keepXmlStartingAttributes(void) const
        public: void sophis::xml::dataModel::ImportFeature::keepXsiTypeAttributes(bool)
        public: bool sophis::xml::dataModel::ImportFeature::keepXsiTypeAttributes(void) const
        public: void sophis::xml::dataModel::ImportFeature::renameXsiType(bool)
        public: bool sophis::xml::dataModel::ImportFeature::renameXsiType(void) const
        public: void sophis::xml::dataModel::ImportFeature::withGrammar(bool)
        public: bool sophis::xml::dataModel::ImportFeature::withGrammar(void) const
      public:
      };

      class/*or struct*/ ImportFeatureImpl
      {
        // VFTable. Offset=32, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_32_0(void); // 0
        public: virtual void unknown_vf_32_1(void); // 1
        public: virtual void unknown_vf_32_2(void); // 2
        public: virtual void unknown_vf_32_3(void); // 3
#endif
        // VFTable with 32 offset end

      public:
      };

      class/*or struct*/ InputStreamXMLDataImporter
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=152, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_152_0(void); // 0
        public: virtual void unknown_vf_152_1(void); // 1
        public: virtual void unknown_vf_152_2(void); // 2
        public: virtual void unknown_vf_152_3(void); // 3
#endif
        // VFTable with 152 offset end

      public:
      };

      class InvalidGrammar : public DataImportException
      {
        // Functions:
        public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(class sophis::xml::dataModel::InvalidGrammar &&)
        public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(class sophis::xml::dataModel::InvalidGrammar const &)
        public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(char const *, char const *)
        public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(char const *)
        public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(char const *, unsigned __int64, char const *)
        public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(char const *, unsigned __int64)
        public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(char16_t const *, unsigned __int64, char16_t const *)
        public: class sophis::xml::dataModel::InvalidGrammar & sophis::xml::dataModel::InvalidGrammar::operator=(class sophis::xml::dataModel::InvalidGrammar &&)
        public: class sophis::xml::dataModel::InvalidGrammar & sophis::xml::dataModel::InvalidGrammar::operator=(class sophis::xml::dataModel::InvalidGrammar const &)
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::dataModel::InvalidGrammar::~InvalidGrammar(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: dataModel::dataModel::dataModel::DataImportException
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual sophis::xml::dataModel::InvalidGrammar::~InvalidGrammar(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class InvalidXMLDocument : public DataImportException
      {
        // Functions:
        public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(class sophis::xml::dataModel::InvalidXMLDocument &&)
        public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(class sophis::xml::dataModel::InvalidXMLDocument const &)
        public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(char const *, char const *)
        public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(char const *)
        public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(char const *, char16_t const *)
        public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(char const *, unsigned __int64, char const *)
        public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(char const *, unsigned __int64)
        public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(char16_t const *, unsigned __int64, char16_t const *)
        public: class sophis::xml::dataModel::InvalidXMLDocument & sophis::xml::dataModel::InvalidXMLDocument::operator=(class sophis::xml::dataModel::InvalidXMLDocument &&)
        public: class sophis::xml::dataModel::InvalidXMLDocument & sophis::xml::dataModel::InvalidXMLDocument::operator=(class sophis::xml::dataModel::InvalidXMLDocument const &)
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::dataModel::InvalidXMLDocument::~InvalidXMLDocument(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: dataModel::dataModel::dataModel::DataImportException
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual sophis::xml::dataModel::InvalidXMLDocument::~InvalidXMLDocument(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ LateGrammarLoader
      {
        // VFTable. Offset=0, Size=10, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void); // 4
        public: virtual void unknown_vf_0_5(void); // 5
        public: virtual void unknown_vf_0_6(void); // 6
        public: virtual void unknown_vf_0_7(void); // 7
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual void unknown_vf_0_9(void); // 9
        // VFTable with 0 offset end

        // VFTable. Offset=80, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_80_0(void); // 0
        public: virtual void unknown_vf_80_1(void); // 1
        public: virtual void unknown_vf_80_2(void); // 2
        public: virtual void unknown_vf_80_3(void); // 3
#endif
        // VFTable with 80 offset end

      public:
      };

      class/*or struct*/ NamespaceDocumentation : public DocumentationDecorator
      {
        // VFTable. Offset=0, Size=15, Start=15
        // Corresponding base: dataModel::dataModel::dataModel::DocumentationDecorator
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ NullXMLDataExporter
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=136, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_136_0(void); // 0
        public: virtual void unknown_vf_136_1(void); // 1
        public: virtual void unknown_vf_136_2(void); // 2
        public: virtual void unknown_vf_136_3(void); // 3
#endif
        // VFTable with 136 offset end

      public:
      };

      class/*or struct*/ NullXMLDataImporter
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=136, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_136_0(void); // 0
        public: virtual void unknown_vf_136_1(void); // 1
        public: virtual void unknown_vf_136_2(void); // 2
        public: virtual void unknown_vf_136_3(void); // 3
#endif
        // VFTable with 136 offset end

      public:
      };

      class/*or struct*/ OStreamXMLDataExporter
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=144, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_144_0(void); // 0
        public: virtual void unknown_vf_144_1(void); // 1
        public: virtual void unknown_vf_144_2(void); // 2
        public: virtual void unknown_vf_144_3(void); // 3
#endif
        // VFTable with 144 offset end

      public:
      };

      class/*or struct*/ OutputStreamXMLDataExporter
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=144, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_144_0(void); // 0
        public: virtual void unknown_vf_144_1(void); // 1
        public: virtual void unknown_vf_144_2(void); // 2
        public: virtual void unknown_vf_144_3(void); // 3
#endif
        // VFTable with 144 offset end

      public:
      };

      class/*or struct*/ PlainValueDataDecorator : public DataDecorator
      {
        // VFTable. Offset=0, Size=12, Start=12
        // Corresponding base: dataModel::dataModel::dataModel::DataDecorator
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ RandomAccessInputStreamXMLDataImporter
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=144, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_144_0(void); // 0
        public: virtual void unknown_vf_144_1(void); // 1
        public: virtual void unknown_vf_144_2(void); // 2
        public: virtual void unknown_vf_144_3(void); // 3
#endif
        // VFTable with 144 offset end

      public:
      };

      class/*or struct*/ StringXMLDataExporter
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=144, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_144_0(void); // 0
        public: virtual void unknown_vf_144_1(void); // 1
        public: virtual void unknown_vf_144_2(void); // 2
        public: virtual void unknown_vf_144_3(void); // 3
#endif
        // VFTable with 144 offset end

      public:
      };

      class XMLDataExporter
      {
        // Functions:
        public: sophis::xml::dataModel::XMLDataExporter::XMLDataExporter(class std::basic_ostream<char, struct std::char_traits<char>> &)
        public: sophis::xml::dataModel::XMLDataExporter::XMLDataExporter(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
        public: sophis::xml::dataModel::XMLDataExporter::XMLDataExporter(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
        public: sophis::xml::dataModel::XMLDataExporter::XMLDataExporter(void)
        public: void sophis::xml::dataModel::XMLDataExporter::`vbase dtor'(void)
        public: void sophis::xml::dataModel::XMLDataExporter::checkResult(bool)
        public: bool sophis::xml::dataModel::XMLDataExporter::checkResult(void) const
        public: class sophisTools::base::RefCountHandle<class sophis::xml::util::DOMDocumentWrapper> sophis::xml::dataModel::XMLDataExporter::getDOMDocument(void)
        public: class sophisTools::base::RefCountHandle<class sophis::xml::util::DOMDocumentWrapper> sophis::xml::dataModel::XMLDataExporter::getDOMDocument(bool)
        public: void sophis::xml::dataModel::XMLDataExporter::getFeature(class sophis::xml::dataModel::ExportFeature &) const
        public: void sophis::xml::dataModel::XMLDataExporter::instanceTypeGeneration(bool)
        public: bool sophis::xml::dataModel::XMLDataExporter::instanceTypeGeneration(void)
        public: void sophis::xml::dataModel::XMLDataExporter::lazyReservePrefix(char const *, char const *)
        public: void sophis::xml::dataModel::XMLDataExporter::qualifiedAttributes(char const *, bool)
        public: bool sophis::xml::dataModel::XMLDataExporter::qualifiedAttributes(char const *)
        public: void sophis::xml::dataModel::XMLDataExporter::qualifiedElements(char const *, bool)
        public: bool sophis::xml::dataModel::XMLDataExporter::qualifiedElements(char const *)
        public: void sophis::xml::dataModel::XMLDataExporter::renameNonUniqueIds(bool)
        public: bool sophis::xml::dataModel::XMLDataExporter::renameNonUniqueIds(void)
        public: void sophis::xml::dataModel::XMLDataExporter::renameSubstitutionGroups(bool)
        public: bool sophis::xml::dataModel::XMLDataExporter::renameSubstitutionGroups(void) const
        public: void sophis::xml::dataModel::XMLDataExporter::renameXsiType(bool)
        public: bool sophis::xml::dataModel::XMLDataExporter::renameXsiType(void) const
        public: void sophis::xml::dataModel::XMLDataExporter::reservePrefix(char const *, char const *)
        public: void sophis::xml::dataModel::XMLDataExporter::setFeature(class sophis::xml::dataModel::ExportFeature const &)
        public: void sophis::xml::dataModel::XMLDataExporter::withFormatPrettyPrint(bool)
        public: bool sophis::xml::dataModel::XMLDataExporter::withFormatPrettyPrint(void) const
        public: void sophis::xml::dataModel::XMLDataExporter::withGrammar(bool)
        public: bool sophis::xml::dataModel::XMLDataExporter::withGrammar(void) const
        public: void sophis::xml::dataModel::XMLDataExporter::withXmlDeclaration(bool)
        public: bool sophis::xml::dataModel::XMLDataExporter::withXmlDeclaration(void) const
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::dataModel::XMLDataExporter::~XMLDataExporter(void)
        public: virtual void sophis::xml::dataModel::XMLDataExporter::_add_ref(void)
        public: virtual void sophis::xml::dataModel::XMLDataExporter::_remove_ref(void)
        public: virtual void sophis::xml::dataModel::XMLDataExporter::documentName(char const *)
        public: virtual char const * sophis::xml::dataModel::XMLDataExporter::documentName(void) const
        public: virtual void sophis::xml::dataModel::XMLDataExporter::exportFrom(class sophis::tools::dataModel::DataSet &, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
        public: virtual void sophis::xml::dataModel::XMLDataExporter::exportFrom(class sophis::tools::dataModel::DataSet const &)
        public: virtual long sophis::xml::dataModel::XMLDataExporter::getRef(void) const
#endif

        // VFTable. Offset=0, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void sophis::xml::dataModel::XMLDataExporter::exportFrom(class sophis::tools::dataModel::DataSet const &); // 0
        public: virtual char const * sophis::xml::dataModel::XMLDataExporter::documentName(void) const; // 1
        public: virtual void sophis::xml::dataModel::XMLDataExporter::documentName(char const *); // 2
        public: virtual void sophis::xml::dataModel::XMLDataExporter::exportFrom(class sophis::tools::dataModel::DataSet &, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>); // 3
        // VFTable with 0 offset end

        // VFTable. Offset=48, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sophis::xml::dataModel::XMLDataExporter::~XMLDataExporter(void); // 0
        public: virtual void unknown_vf_48_1(void); // 1
        public: virtual void unknown_vf_48_2(void); // 2
        public: virtual void unknown_vf_48_3(void); // 3
#endif
        // VFTable with 48 offset end

      public:
      };

      class/*or struct*/ XMLDataExporterImpl
      {
      public:
        // Nested containers:
        class/*or struct*/ ContainerStack
        {
          // VFTable. Offset=48, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_48_0(void); // 0
          public: virtual void unknown_vf_48_1(void); // 1
          public: virtual void unknown_vf_48_2(void); // 2
          public: virtual void unknown_vf_48_3(void); // 3
#endif
          // VFTable with 48 offset end

        public:
        };

        class/*or struct*/ HRefTraversal
        {
          // VFTable. Offset=0, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          public: virtual void unknown_vf_0_2(void); // 2
          public: virtual void unknown_vf_0_3(void); // 3
          // VFTable with 0 offset end

          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class/*or struct*/ IdRefToPositionListMap
        {
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class/*or struct*/ NamespacePrefixMap
        {
          // VFTable. Offset=56, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_56_0(void); // 0
          public: virtual void unknown_vf_56_1(void); // 1
          public: virtual void unknown_vf_56_2(void); // 2
          public: virtual void unknown_vf_56_3(void); // 3
#endif
          // VFTable with 56 offset end

        public:
        };

        class/*or struct*/ NamespaceQualifiedMap
        {
          // VFTable. Offset=32, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_32_0(void); // 0
          public: virtual void unknown_vf_32_1(void); // 1
          public: virtual void unknown_vf_32_2(void); // 2
          public: virtual void unknown_vf_32_3(void); // 3
#endif
          // VFTable with 32 offset end

        public:
        };

        class/*or struct*/ NamespaceSet
        {
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        struct Position
        {
        public:
        };

        class PositionList
        {
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class PositionListPair
        {
          // VFTable. Offset=120, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_120_0(void); // 0
          public: virtual void unknown_vf_120_1(void); // 1
          public: virtual void unknown_vf_120_2(void); // 2
          public: virtual void unknown_vf_120_3(void); // 3
#endif
          // VFTable with 120 offset end

        public:
        };

        class/*or struct*/ ReplacePositionList
        {
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class/*or struct*/ WStringPairList
        {
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class/*or struct*/ WStringToBoolMap
        {
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class/*or struct*/ WStringToWStringMap
        {
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };


        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void) = 0; // 0
        // VFTable with 0 offset end

        // VFTable. Offset=136, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_136_0(void); // 0
        public: virtual void unknown_vf_136_1(void); // 1
        public: virtual void unknown_vf_136_2(void); // 2
        public: virtual void unknown_vf_136_3(void); // 3
#endif
        // VFTable with 136 offset end

      public:
      };

      class XMLDataImporter
      {
        // Functions:
        public: sophis::xml::dataModel::XMLDataImporter::XMLDataImporter(char const *, unsigned __int64)
        public: sophis::xml::dataModel::XMLDataImporter::XMLDataImporter(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, unsigned __int64)
        public: sophis::xml::dataModel::XMLDataImporter::XMLDataImporter(class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>)
        public: sophis::xml::dataModel::XMLDataImporter::XMLDataImporter(void)
        public: void sophis::xml::dataModel::XMLDataImporter::`vbase dtor'(void)
        public: void sophis::xml::dataModel::XMLDataImporter::convertEnums(bool)
        public: class sophisTools::base::RefCountHandle<class sophis::xml::util::DOMDocumentWrapper> sophis::xml::dataModel::XMLDataImporter::getDOMDocument(void)
        public: class sophisTools::base::RefCountHandle<class sophis::xml::util::DOMDocumentWrapper> sophis::xml::dataModel::XMLDataImporter::getDOMDocument(bool)
        public: void sophis::xml::dataModel::XMLDataImporter::getFeature(class sophis::xml::dataModel::ImportFeature &) const
        public: void sophis::xml::dataModel::XMLDataImporter::keepXmlStartingAttributes(bool)
        public: bool sophis::xml::dataModel::XMLDataImporter::keepXmlStartingAttributes(void) const
        public: void sophis::xml::dataModel::XMLDataImporter::keepXsiTypeAttributes(bool)
        public: bool sophis::xml::dataModel::XMLDataImporter::keepXsiTypeAttributes(void) const
        public: void sophis::xml::dataModel::XMLDataImporter::renameXsiType(bool)
        public: bool sophis::xml::dataModel::XMLDataImporter::renameXsiType(void) const
        public: void sophis::xml::dataModel::XMLDataImporter::setFeature(class sophis::xml::dataModel::ImportFeature const &)
        // Static functions:
        public: static bool sophis::xml::dataModel::XMLDataImporter::parseXML(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
        // Variables:
        private: static char const *sophis::xml::dataModel::XMLDataImporter::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::dataModel::XMLDataImporter::~XMLDataImporter(void)
        public: virtual void sophis::xml::dataModel::XMLDataImporter::_add_ref(void)
        public: virtual void sophis::xml::dataModel::XMLDataImporter::_remove_ref(void)
        public: virtual bool sophis::xml::dataModel::XMLDataImporter::convertEnums(void) const
        public: virtual long sophis::xml::dataModel::XMLDataImporter::getRef(void) const
        public: virtual void sophis::xml::dataModel::XMLDataImporter::ignoreRootElement(bool)
        public: virtual bool sophis::xml::dataModel::XMLDataImporter::ignoreRootElement(void) const
        public: virtual void sophis::xml::dataModel::XMLDataImporter::importTo(class sophis::tools::dataModel::DataSet &)
        public: virtual void sophis::xml::dataModel::XMLDataImporter::importTo(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophis::tools::dataModel::DataSet &)
        public: virtual void sophis::xml::dataModel::XMLDataImporter::withGrammar(bool)
        public: virtual bool sophis::xml::dataModel::XMLDataImporter::withGrammar(void) const
#endif

        // VFTable. Offset=0, Size=7, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void sophis::xml::dataModel::XMLDataImporter::importTo(class sophis::tools::dataModel::DataSet &); // 0
        public: virtual bool sophis::xml::dataModel::XMLDataImporter::ignoreRootElement(void) const; // 1
        public: virtual void sophis::xml::dataModel::XMLDataImporter::ignoreRootElement(bool); // 2
        public: virtual bool sophis::xml::dataModel::XMLDataImporter::withGrammar(void) const; // 3
        public: virtual void sophis::xml::dataModel::XMLDataImporter::withGrammar(bool); // 4
        public: virtual bool sophis::xml::dataModel::XMLDataImporter::convertEnums(void) const; // 5
        public: virtual void sophis::xml::dataModel::XMLDataImporter::importTo(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophis::tools::dataModel::DataSet &); // 6
        // VFTable with 0 offset end

        // VFTable. Offset=48, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sophis::xml::dataModel::XMLDataImporter::~XMLDataImporter(void); // 0
        public: virtual void unknown_vf_48_1(void); // 1
        public: virtual void unknown_vf_48_2(void); // 2
        public: virtual void unknown_vf_48_3(void); // 3
#endif
        // VFTable with 48 offset end

      public:
      };

      class/*or struct*/ XMLDataImporterImpl
      {
      public:
        // Nested containers:
        struct NodeInfo
        {
        public:
        };

        class/*or struct*/ NodeMap
        {
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };


        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void) = 0; // 0
        // VFTable with 0 offset end

        // VFTable. Offset=136, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_136_0(void); // 0
        public: virtual void unknown_vf_136_1(void); // 1
        public: virtual void unknown_vf_136_2(void); // 2
        public: virtual void unknown_vf_136_3(void); // 3
#endif
        // VFTable with 136 offset end

      public:
      };

      class XMLDocument : public RefCount
      {
        // Functions:
        public: sophis::xml::dataModel::XMLDocument::XMLDocument(class sophis::xml::dataModel::XMLDocument &&)
        public: sophis::xml::dataModel::XMLDocument::XMLDocument(class sophis::xml::dataModel::XMLDocument const &)
        public: sophis::xml::dataModel::XMLDocument::XMLDocument(void)
        public: class sophis::xml::dataModel::XMLDocument & sophis::xml::dataModel::XMLDocument::operator=(class sophis::xml::dataModel::XMLDocument &&)
        public: class sophis::xml::dataModel::XMLDocument & sophis::xml::dataModel::XMLDocument::operator=(class sophis::xml::dataModel::XMLDocument const &)
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::dataModel::XMLDocument::~XMLDocument(void)
#endif

        // VFTable. Offset=0, Size=8, Start=0
        // Corresponding base: base::base::RefCount
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual sophis::xml::dataModel::XMLDocument::~XMLDocument(void) = 0; // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void) = 0; // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void) = 0; // 4
        public: virtual void unknown_vf_0_5(void) = 0; // 5
        public: virtual void unknown_vf_0_6(void) = 0; // 6
        public: virtual void unknown_vf_0_7(void) = 0; // 7
        // VFTable with 0 offset end

      public:
      };

      class XMLGrammar
      {
        // Functions:
        public: sophis::xml::dataModel::XMLGrammar::XMLGrammar(void)
        public: sophis::xml::dataModel::XMLGrammar::XMLGrammar(bool)
        public: void sophis::xml::dataModel::XMLGrammar::`vbase dtor'(void)
        protected: class sophis::tools::dataModel::Data * sophis::xml::dataModel::XMLGrammar::AddComplexType(char const *, bool &)
        protected: class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::XMLGrammar::AddDerivation(class sophis::tools::dataModel::DataSet &, char const *, char const *, bool)
        protected: class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::XMLGrammar::AddDerivation(char const *, char const *, char const *, bool)
        protected: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophis::xml::dataModel::XMLGrammar::AddForInTheName(char const *)
        protected: void sophis::xml::dataModel::XMLGrammar::AddRestriction(char const *, char const *, char const *)
        protected: void sophis::xml::dataModel::XMLGrammar::AddRestriction(char const *, char const *)
        protected: class sophis::tools::dataModel::Data * sophis::xml::dataModel::XMLGrammar::AddSimpleType(char const *)
        protected: bool sophis::xml::dataModel::XMLGrammar::AddSubstitutionGroup(class sophis::tools::dataModel::Documentation const *, char const *)
        protected: class sophis::tools::dataModel::DataSequence * sophis::xml::dataModel::XMLGrammar::AddType(class sophis::tools::dataModel::Data *, char const *, class sophis::tools::dataModel::Documentation const *)
        protected: class sophis::tools::dataModel::DataSequence & sophis::xml::dataModel::XMLGrammar::CreateDecorator(class sophis::tools::dataModel::DataSequence &, char const *, class sophis::xml::dataModel::DataSequenceDataDecorator *, class sophis::tools::dataModel::Attribute *, class sophis::tools::dataModel::Documentation const *, class sophis::xml::dataModel::DataSetOnlyDecorator *)
        protected: class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::XMLGrammar::CreateDecorator(bool, class sophis::tools::dataModel::DataSet *, char const *, class sophis::xml::dataModel::DataSetDataDecorator *, class sophis::tools::dataModel::DataSet **, class sophis::tools::dataModel::Documentation const *, bool, class sophis::xml::dataModel::DataSetOnlyDecorator *)
        public: class sophis::tools::dataModel::DataSet const & sophis::xml::dataModel::XMLGrammar::GetGrammar(void) const
        protected: bool sophis::xml::dataModel::XMLGrammar::HasComplexType(char const *)
        public: void sophis::xml::dataModel::XMLGrammar::MergeGrammar(char const *, char const *)
        protected: void sophis::xml::dataModel::XMLGrammar::UpdateNameRoot(void)
        public: void sophis::xml::dataModel::XMLGrammar::exportGrammar(class sophis::xml::dataModel::XMLDataExporter &)
        public: void sophis::xml::dataModel::XMLGrammar::exportGrammar(class sophis::xml::dataModel::XMLDataExporter &, char const *)
        protected: char const * sophis::xml::dataModel::XMLGrammar::importExternalNamespace(char const *)
        protected: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophis::xml::dataModel::XMLGrammar::prefixForNamespace(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, bool *)
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::dataModel::XMLGrammar::~XMLGrammar(void)
        public: virtual class sophis::tools::dataModel::Data & sophis::xml::dataModel::XMLGrammar::getData(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *)
        public: virtual class sophis::tools::dataModel::Data const & sophis::xml::dataModel::XMLGrammar::getData(char const *, enum sophis::tools::dataModel::ValueKind) const
        public: virtual class sophis::tools::dataModel::Data & sophis::xml::dataModel::XMLGrammar::getDataFront(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *)
        public: virtual class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::XMLGrammar::getDataSet(char const *, class sophis::tools::dataModel::Documentation const *)
        public: virtual class sophis::tools::dataModel::Data const & sophis::xml::dataModel::XMLGrammar::lookup(char const *, bool) const
        public: virtual void sophis::xml::dataModel::XMLGrammar::ns(char const *)
#endif

        // VFTable. Offset=0, Size=23, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual sophis::xml::dataModel::XMLGrammar::~XMLGrammar(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void sophis::xml::dataModel::XMLGrammar::ns(char const *); // 4
        public: virtual void unknown_vf_0_5(void); // 5
        public: virtual void unknown_vf_0_6(void); // 6
        public: virtual void unknown_vf_0_7(void); // 7
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual void unknown_vf_0_9(void); // 9
        public: virtual void unknown_vf_0_10(void); // 10
        public: virtual void unknown_vf_0_11(void); // 11
        public: virtual void unknown_vf_0_12(void); // 12
        public: virtual class sophis::tools::dataModel::Data const & sophis::xml::dataModel::XMLGrammar::lookup(char const *, bool) const; // 13
        public: virtual void unknown_vf_0_14(void); // 14
        public: virtual class sophis::tools::dataModel::Data const & sophis::xml::dataModel::XMLGrammar::getData(char const *, enum sophis::tools::dataModel::ValueKind) const; // 15
        public: virtual class sophis::tools::dataModel::Data & sophis::xml::dataModel::XMLGrammar::getData(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *); // 16
        public: virtual class sophis::tools::dataModel::Data & sophis::xml::dataModel::XMLGrammar::getDataFront(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *); // 17
        public: virtual void unknown_vf_0_18(void); // 18
        public: virtual void unknown_vf_0_19(void); // 19
        public: virtual void unknown_vf_0_20(void); // 20
        public: virtual void unknown_vf_0_21(void); // 21
        public: virtual class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::XMLGrammar::getDataSet(char const *, class sophis::tools::dataModel::Documentation const *); // 22
        // VFTable with 0 offset end

        // VFTable. Offset=168, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sophis::xml::dataModel::XMLGrammar::~XMLGrammar(void); // 0
        public: virtual void unknown_vf_168_1(void); // 1
        public: virtual void unknown_vf_168_2(void); // 2
        public: virtual void unknown_vf_168_3(void); // 3
#endif
        // VFTable with 168 offset end

      public:
      };

      class/*or struct*/ XSLTransformer
      {
        // Functions:
        protected: sophis::xml::dataModel::XSLTransformer::XSLTransformer(char const *, class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>, bool, bool, char const *)
        public: void sophis::xml::dataModel::XSLTransformer::`vbase dtor'(void)
        public: void sophis::xml::dataModel::XSLTransformer::transform(class sophis::tools::dataModel::DataSet &, class sophisTools::base::RefCountHandle<class sophisTools::io::FilterInputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::FilterOutputStream>)
        public: void sophis::xml::dataModel::XSLTransformer::transform(class sophisTools::base::RefCountHandle<class sophis::xml::util::DOMDocumentWrapper>, class sophis::tools::dataModel::DataSet &, class sophisTools::base::RefCountHandle<class sophisTools::io::FilterInputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::FilterOutputStream>)
        public: void sophis::xml::dataModel::XSLTransformer::transform(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::Transformer> sophis::xml::dataModel::XSLTransformer::create(char const *, char const *, unsigned __int64, bool, bool, char const *)
        public: static class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::Transformer> sophis::xml::dataModel::XSLTransformer::create(char const *, char const *, unsigned __int64, bool, bool)
        public: static class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::Transformer> sophis::xml::dataModel::XSLTransformer::create(char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, bool, bool, char const *)
        public: static class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::Transformer> sophis::xml::dataModel::XSLTransformer::create(char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, bool, bool)
        // Variables:
        private: static char const *sophis::xml::dataModel::XSLTransformer::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::dataModel::XSLTransformer::~XSLTransformer(void)
        public: virtual void sophis::xml::dataModel::XSLTransformer::dispose(void)
        public: virtual void sophis::xml::dataModel::XSLTransformer::init(void)
        public: virtual char const * sophis::xml::dataModel::XSLTransformer::name(void)
        public: virtual void sophis::xml::dataModel::XSLTransformer::postprocess(class sophis::tools::dataModel::DataSet &)
        public: virtual void sophis::xml::dataModel::XSLTransformer::preprocess(class sophis::tools::dataModel::DataSet &)
        public: virtual void sophis::xml::dataModel::XSLTransformer::transform(class sophis::tools::dataModel::DataSet &)
#endif

        // VFTable. Offset=0, Size=8, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual char const * sophis::xml::dataModel::XSLTransformer::name(void); // 0
        public: virtual void sophis::xml::dataModel::XSLTransformer::init(void); // 1
        public: virtual void sophis::xml::dataModel::XSLTransformer::preprocess(class sophis::tools::dataModel::DataSet &); // 2
        public: virtual void sophis::xml::dataModel::XSLTransformer::transform(class sophis::tools::dataModel::DataSet &); // 3
        public: virtual void sophis::xml::dataModel::XSLTransformer::postprocess(class sophis::tools::dataModel::DataSet &); // 4
        public: virtual void sophis::xml::dataModel::XSLTransformer::dispose(void); // 5
        public: virtual void unknown_vf_0_6(void); // 6
        public: virtual void unknown_vf_0_7(void); // 7
        // VFTable with 0 offset end

        // VFTable. Offset=144, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sophis::xml::dataModel::XSLTransformer::~XSLTransformer(void); // 0
        public: virtual void unknown_vf_144_1(void); // 1
        public: virtual void unknown_vf_144_2(void); // 2
        public: virtual void unknown_vf_144_3(void); // 3
#endif
        // VFTable with 144 offset end

      public:
      };


    };

    namespace/*or class/struct?*/ io
    {
      // Nested containers:
      class/*or struct*/ BinInputStreamAdapter : public BinInputStream
      {
        // Functions:
        public: sophis::xml::io::BinInputStreamAdapter::BinInputStreamAdapter(class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>)
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::io::BinInputStreamAdapter::~BinInputStreamAdapter(void)
        public: virtual unsigned __int64 sophis::xml::io::BinInputStreamAdapter::curPos(void) const
        public: virtual char16_t const * sophis::xml::io::BinInputStreamAdapter::getContentType(void) const
        public: virtual unsigned __int64 sophis::xml::io::BinInputStreamAdapter::readBytes(unsigned char *const, unsigned __int64)
#endif

        // VFTable. Offset=0, Size=5, Start=5
        // Corresponding base: xercesc_3_2::BinInputStream
        // Owner: SophisXML.dll
        // public: virtual sophis::xml::io::BinInputStreamAdapter::~BinInputStreamAdapter(void); // 0
        // Overrides:
        public: virtual unsigned __int64 sophis::xml::io::BinInputStreamAdapter::curPos(void) const override; // 1
        public: virtual unsigned __int64 sophis::xml::io::BinInputStreamAdapter::readBytes(unsigned char *const, unsigned __int64) override; // 2
        public: virtual char16_t const * sophis::xml::io::BinInputStreamAdapter::getContentType(void) const override; // 3
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ BinOutputStreamAdapter : public BinOutputStream
      {
        // Functions:
        public: sophis::xml::io::BinOutputStreamAdapter::BinOutputStreamAdapter(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::io::BinOutputStreamAdapter::~BinOutputStreamAdapter(void)
        public: virtual unsigned __int64 sophis::xml::io::BinOutputStreamAdapter::curPos(void) const
        public: virtual void sophis::xml::io::BinOutputStreamAdapter::writeBytes(unsigned char const *const, unsigned __int64)
#endif

        // VFTable. Offset=0, Size=3, Start=0
        // Corresponding base: xercesc_3_2::BinOutputStream
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual sophis::xml::io::BinOutputStreamAdapter::~BinOutputStreamAdapter(void); // 0
        public: virtual unsigned __int64 sophis::xml::io::BinOutputStreamAdapter::curPos(void) const; // 1
        public: virtual void sophis::xml::io::BinOutputStreamAdapter::writeBytes(unsigned char const *const, unsigned __int64); // 2
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ XMLFormatTargetAdapter : public XMLFormatTarget
      {
        // VFTable. Offset=0, Size=3, Start=0
        // Corresponding base: xercesc_3_2::XMLFormatTarget
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ XMLInputStreamAdapter : public InputSource
      {
        // Functions:
        public: sophis::xml::io::XMLInputStreamAdapter::XMLInputStreamAdapter(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class xercesc_3_2::MemoryManager *const)
        public: sophis::xml::io::XMLInputStreamAdapter::XMLInputStreamAdapter(class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>, class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::io::XMLInputStreamAdapter::~XMLInputStreamAdapter(void)
        public: virtual char16_t const * sophis::xml::io::XMLInputStreamAdapter::getSystemId(void) const
        public: virtual class xercesc_3_2::BinInputStream * sophis::xml::io::XMLInputStreamAdapter::makeStream(void) const
#endif

        // VFTable. Offset=0, Size=10, Start=10
        // Corresponding base: xercesc_3_2::InputSource
        // Owner: SophisXML.dll
        // public: virtual sophis::xml::io::XMLInputStreamAdapter::~XMLInputStreamAdapter(void); // 0
        // Overrides:
        public: virtual class xercesc_3_2::BinInputStream * sophis::xml::io::XMLInputStreamAdapter::makeStream(void) const override; // 1
        public: virtual char16_t const * sophis::xml::io::XMLInputStreamAdapter::getSystemId(void) const override; // 4
        // VFTable with 0 offset end

      public:
      };


    };

    class/*or struct*/ util
    {
    public:
      // Enumerations:
      enum EscapeMode : int {
      };

      // Nested containers:
      class/*or struct*/ BuilderImpl : public DOMLSParserImpl
      {
        // VFTable. Offset=0, Size=20, Start=13
        // Corresponding base: xercesc_3_2::DOMLSParserImpl
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_13(void); // 13
        public: virtual void unknown_vf_0_14(void); // 14
        public: virtual void unknown_vf_0_15(void); // 15
        public: virtual void unknown_vf_0_16(void); // 16
        public: virtual void unknown_vf_0_17(void); // 17
        public: virtual void unknown_vf_0_18(void); // 18
        public: virtual void unknown_vf_0_19(void); // 19
        // VFTable with 0 offset end

        // VFTable. Offset=8, Size=3, Start=3
        // Corresponding base: xercesc_3_2::XMLErrorReporter
        // Owner: SophisXML.dll
        // VFTable with 8 offset end

        // VFTable. Offset=16, Size=6, Start=6
        // Corresponding base: xercesc_3_2::XMLEntityHandler
        // Owner: SophisXML.dll
        // VFTable with 16 offset end

        // VFTable. Offset=24, Size=17, Start=17
        // Corresponding base: xercesc_3_2::DocTypeHandler
        // Owner: SophisXML.dll
        // VFTable with 24 offset end

        // VFTable. Offset=32, Size=4, Start=4
        // Corresponding base: xercesc_3_2::PSVIHandler
        // Owner: SophisXML.dll
        // VFTable with 32 offset end

        // VFTable. Offset=192, Size=21, Start=21
        // Corresponding base: xercesc_3_2::DOMLSParser
        // Owner: SophisXML.dll
        // VFTable with 192 offset end

        // VFTable. Offset=200, Size=7, Start=7
        // Corresponding base: xercesc_3_2::DOMConfiguration
        // Owner: SophisXML.dll
        // VFTable with 200 offset end

      public:
      };

      class DOMDocumentWrapper
      {
        // Functions:
        public: sophis::xml::util::DOMDocumentWrapper::DOMDocumentWrapper(class sophis::xml::util::DOMDocumentWrapper &)
        public: sophis::xml::util::DOMDocumentWrapper::DOMDocumentWrapper(class XERCES_CPP_NAMESPACE::DOMDocument *)
        public: sophis::xml::util::DOMDocumentWrapper::DOMDocumentWrapper(class xercesc_3_2::DOMDocument *)
        public: sophis::xml::util::DOMDocumentWrapper::DOMDocumentWrapper(void)
        public: void sophis::xml::util::DOMDocumentWrapper::`vbase dtor'(void)
        public: class XERCES_CPP_NAMESPACE::DOMDocument * sophis::xml::util::DOMDocumentWrapper::document(void)
        public: class xercesc_3_2::DOMDocument * sophis::xml::util::DOMDocumentWrapper::document(void)
        public: void sophis::xml::util::DOMDocumentWrapper::document(class XERCES_CPP_NAMESPACE::DOMDocument *)
        public: void sophis::xml::util::DOMDocumentWrapper::document(class xercesc_3_2::DOMDocument *)
        public: class XERCES_CPP_NAMESPACE::DOMDocument const * sophis::xml::util::DOMDocumentWrapper::document(void) const
        public: class xercesc_3_2::DOMDocument const * sophis::xml::util::DOMDocumentWrapper::document(void) const
        public: class XERCES_CPP_NAMESPACE::DOMDocument * sophis::xml::util::DOMDocumentWrapper::orphan(void)
        public: class xercesc_3_2::DOMDocument * sophis::xml::util::DOMDocumentWrapper::orphan(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::util::DOMDocumentWrapper::~DOMDocumentWrapper(void)
#endif

        // VFTable. Offset=32, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sophis::xml::util::DOMDocumentWrapper::~DOMDocumentWrapper(void); // 0
        public: virtual void unknown_vf_32_1(void); // 1
        public: virtual void unknown_vf_32_2(void); // 2
        public: virtual void unknown_vf_32_3(void); // 3
#endif
        // VFTable with 32 offset end

      public:
      };

      class/*or struct*/ ImplementationImpl : public XMemory, public DOMImplementation, public DOMImplementationSource
      {
        // VFTable. Offset=0, Size=11, Start=0
        // Corresponding base: xercesc_3_2::DOMImplementation
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void); // 4
        public: virtual void unknown_vf_0_5(void); // 5
        public: virtual void unknown_vf_0_6(void); // 6
        public: virtual void unknown_vf_0_7(void); // 7
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual void unknown_vf_0_9(void); // 9
        public: virtual void unknown_vf_0_10(void); // 10
        // VFTable with 0 offset end

        // VFTable. Offset=8, Size=3, Start=3
        // Corresponding base: xercesc_3_2::DOMImplementationSource
        // Owner: SophisXML.dll
        // VFTable with 8 offset end

      public:
      };

      class/*or struct*/ ParsingErrorHandler : public DOMErrorHandler
      {
        // Functions:
        public: sophis::xml::util::ParsingErrorHandler::ParsingErrorHandler(void)
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophis::xml::util::ParsingErrorHandler::getDomError(void) const
        public: bool sophis::xml::util::ParsingErrorHandler::hasDomError(void) const
        // Variables:
        private: static char const *sophis::xml::util::ParsingErrorHandler::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::util::ParsingErrorHandler::~ParsingErrorHandler(void)
        public: virtual bool sophis::xml::util::ParsingErrorHandler::handleError(class xercesc_3_2::DOMError const &)
#endif

        // VFTable. Offset=0, Size=2, Start=0
        // Corresponding base: xercesc_3_2::DOMErrorHandler
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual sophis::xml::util::ParsingErrorHandler::~ParsingErrorHandler(void); // 0
        public: virtual bool sophis::xml::util::ParsingErrorHandler::handleError(class xercesc_3_2::DOMError const &); // 1
        // VFTable with 0 offset end

      public:
      };

      class XMLUtil
      {
        // Functions:
        public: class sophis::xml::util::XMLUtil & sophis::xml::util::XMLUtil::operator=(class sophis::xml::util::XMLUtil &&)
        public: class sophis::xml::util::XMLUtil & sophis::xml::util::XMLUtil::operator=(class sophis::xml::util::XMLUtil const &)
        // Static functions:
        public: static void sophis::xml::util::XMLUtil::checkInit(void)
        public: static class sophisTools::base::RefCountHandle<class sophis::tools::util::ByteArray> sophis::xml::util::XMLUtil::decode64(char const *)
        public: static class sophisTools::base::RefCountHandle<class sophis::tools::util::ByteArray> sophis::xml::util::XMLUtil::decode64(char16_t const *)
        public: static void sophis::xml::util::XMLUtil::decode64(char const *, class sophis::tools::util::ByteArray &)
        public: static void sophis::xml::util::XMLUtil::decode64(char16_t const *, class sophis::tools::util::ByteArray &)
        public: static void sophis::xml::util::XMLUtil::dispose(void)
        public: static char16_t * sophis::xml::util::XMLUtil::encode64(class sophis::tools::util::ByteArray const &)
        public: static void sophis::xml::util::XMLUtil::encode64(class sophis::tools::util::ByteArray const &, char *&, unsigned __int64 &)
        public: static void sophis::xml::util::XMLUtil::init(void)
        public: static bool sophis::xml::util::XMLUtil::isInitialized(void)
        protected: static bool sophis::xml::util::XMLUtil::isValidNCName(char16_t, bool)
        public: static bool sophis::xml::util::XMLUtil::isValidNCName(char const *const)
        public: static bool sophis::xml::util::XMLUtil::isValidNCName(char16_t const *const, unsigned __int64)
        protected: static bool sophis::xml::util::XMLUtil::isValidName(char16_t, bool)
        public: static bool sophis::xml::util::XMLUtil::isValidName(char const *const)
        public: static bool sophis::xml::util::XMLUtil::isValidName(char16_t const *const, unsigned __int64)
        public: static bool sophis::xml::util::XMLUtil::isValidQName(char const *const)
        public: static bool sophis::xml::util::XMLUtil::isValidQName(char16_t const *const, unsigned __int64)
        public: static void sophis::xml::util::XMLUtil::joinGrammarLoading(void)
        public: static void sophis::xml::util::XMLUtil::loadGrammars(class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::GrammarPool>)
        public: static void sophis::xml::util::XMLUtil::loadGrammars(class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::GrammarPool>, class std::list<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>> const &)
        public: static void sophis::xml::util::XMLUtil::loadGrammars(void)
        public: static void sophis::xml::util::XMLUtil::toValidNCName(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, char)
        protected: static void sophis::xml::util::XMLUtil::toValidName(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, char, bool (__cdecl *)(char16_t, bool))
        public: static void sophis::xml::util::XMLUtil::toValidName(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, char)
        // Variables:
        public: static char const *const sophis::xml::util::XMLUtil::ATTVAL_ANYTYPE
        public: static char16_t const *const sophis::xml::util::XMLUtil::HTTP
        public: static char16_t const *const sophis::xml::util::XMLUtil::QMQM
        public: static char const *const sophis::xml::util::XMLUtil::URI_SCHEMAFORSCHEMA
        private: static char const *sophis::xml::util::XMLUtil::__CLASS__
        private: static unsigned __int64 sophis::xml::util::XMLUtil::fInitialized
        public: static bool sophis::xml::util::XMLUtil::forceExportXsiType
        public: static bool sophis::xml::util::XMLUtil::ignoreAnonymousTypesDuringExport
        public: static bool sophis::xml::util::XMLUtil::trimXMLValues
      public:
      };

      class XSLTransformUtil
      {
        // Functions:
        public: class sophis::xml::util::XSLTransformUtil & sophis::xml::util::XSLTransformUtil::operator=(class sophis::xml::util::XSLTransformUtil &&)
        public: class sophis::xml::util::XSLTransformUtil & sophis::xml::util::XSLTransformUtil::operator=(class sophis::xml::util::XSLTransformUtil const &)
        // Static functions:
        public: static void sophis::xml::util::XSLTransformUtil::dispose(void)
        public: static void sophis::xml::util::XSLTransformUtil::doDispose(void)
        public: static void sophis::xml::util::XSLTransformUtil::doInit(void)
        public: static void sophis::xml::util::XSLTransformUtil::init(void)
        public: static bool sophis::xml::util::XSLTransformUtil::isInitialized(void)
        public: static void sophis::xml::util::XSLTransformUtil::transform(class sophis::xml::dataModel::XMLDataExporter &, class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
        public: static void sophis::xml::util::XSLTransformUtil::transform(class sophis::xml::dataModel::XMLDataImporter &, class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
        public: static void sophis::xml::util::XSLTransformUtil::transform(char const *, class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
        public: static void sophis::xml::util::XSLTransformUtil::transform(class sophisTools::base::RefCountHandle<class sophis::xml::util::DOMDocumentWrapper>, class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
        public: static void sophis::xml::util::XSLTransformUtil::transform(class sophisTools::base::RefCountHandle<class sophisTools::io::File>, class sophisTools::base::RefCountHandle<class sophisTools::io::File>, class sophisTools::base::RefCountHandle<class sophisTools::io::File>)
        public: static void sophis::xml::util::XSLTransformUtil::transform(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
        // Variables:
        private: static char const *sophis::xml::util::XSLTransformUtil::__CLASS__
        private: static bool sophis::xml::util::XSLTransformUtil::fInitialized
      public:
      };

      class XString
      {
      public:
      };

      class XStringX
      {
      public:
      };

      class XWString
      {
      public:
      };


      // Functions:
      class std::basic_ostream<char, struct std::char_traits<char>> & sophis::xml::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::xml::util::XString const &)
      class std::basic_ostream<char, struct std::char_traits<char>> & sophis::xml::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::xml::util::XStringX const &)
      class std::basic_ostream<char, struct std::char_traits<char>> & sophis::xml::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::xml::util::XWString const &)
      class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophis::xml::util::EscapeXmlString(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, enum sophis::xml::util::EscapeMode)
    public:
    };


  };


};
