/* Autogenerated header */
#pragma once

namespace/*or class/struct?*/ sophis
{
  // Nested containers:
  namespace/*or class/struct?*/ tools
  {
    // Nested containers:
    class CSRArchive
    {
#if 0 // All found virtual functions names:
      public: virtual class sophis::tools::CSRArchive * sophis::tools::CSRArchive::Clone(void) const
#endif

      // VFTable. Offset=0, Size=3, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void sophisTools::comm::ByteArraySerializableArchive::Rewind(void) const; // 1 (comm::comm::ByteArraySerializableArchive)
      public: virtual class sophis::tools::CSRArchive * sophis::tools::CSRArchive::Clone(void) const; // 2
      // VFTable with 0 offset end

    public:
    };

    namespace/*or class/struct?*/ dataModel
    {
      // Nested containers:
      class DataModelException : public ExceptionBase
      {
        // Functions:
        protected: sophis::tools::dataModel::DataModelException::DataModelException(char const *, char const *, long)
        public: sophis::tools::dataModel::DataModelException::DataModelException(class sophis::tools::dataModel::DataModelException const &)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::DataModelException::~DataModelException(void)
#endif

      public:
      };

      class DataTypeRepository
      {
        // Functions:
        public: sophis::tools::dataModel::DataTypeRepository::DataTypeRepository(void)
        public: void sophis::tools::dataModel::DataTypeRepository::`vbase dtor'(void)
        // VFTable. Offset=32, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_32_0(void); // 0
        public: virtual void unknown_vf_32_1(void); // 1
        public: virtual void unknown_vf_32_2(void); // 2
        public: virtual void unknown_vf_32_3(void); // 3
#endif
        // VFTable with 32 offset end

      public:
      };

      namespace/*or class/struct?*/ DataTypeRepositorySingletonHolder
      {
        // Variables:
        private: static class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::DataTypeRepository> sophis::tools::dataModel::DataTypeRepositorySingletonHolder::fInstance
      };

      class/*or struct*/ Transformer
      {
        // Functions:
        public: sophis::tools::dataModel::Transformer::Transformer(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::dataModel::Transformer::~Transformer(void)
#endif

      public:
      };

      class/*or struct*/ TransformerManagerSingleton
      {
        // Static functions:
        public: static void sophis::tools::dataModel::TransformerManagerSingleton::dispose(void)
        public: static void sophis::tools::dataModel::TransformerManagerSingleton::init(void)
      public:
      };


    };

    namespace/*or class/struct?*/ util
    {
      // Nested containers:
      class/*or struct*/ BasicRunnable
      {
        // Functions:
        public: sophis::tools::util::BasicRunnable::BasicRunnable(void)
        protected: bool sophis::tools::util::BasicRunnable::exitRequested(void) const
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::util::BasicRunnable::~BasicRunnable(void)
        public: virtual void sophis::tools::util::BasicRunnable::_add_ref(void)
        public: virtual void sophis::tools::util::BasicRunnable::_remove_ref(void)
        protected: virtual void sophis::tools::util::BasicRunnable::clean(void)
        public: virtual long sophis::tools::util::BasicRunnable::getRef(void) const
        public: virtual bool sophis::tools::util::BasicRunnable::isRunning(void)
        protected: virtual void sophis::tools::util::BasicRunnable::requestExit(void)
        public: virtual void sophis::tools::util::BasicRunnable::run(void)
        public: virtual void sophis::tools::util::BasicRunnable::stop(bool)
#endif

      public:
      };

      class/*or struct*/ DateTimeUtil
      {
        // Static functions:
        public: static __int64 sophis::tools::util::DateTimeUtil::currentTime(void)
        public: static void sophis::tools::util::DateTimeUtil::dispose(void)
        public: static void sophis::tools::util::DateTimeUtil::init(void)
        public: static void sophis::tools::util::DateTimeUtil::printDateTime(class std::basic_ostream<char, struct std::char_traits<char>> &, __int64, bool, bool, char, char)
        public: static void sophis::tools::util::DateTimeUtil::scanDate(class std::basic_istream<char, struct std::char_traits<char>> &, class sophisTools::CSRDay &, bool)
        // Variables:
        public: static unsigned long const sophis::tools::util::DateTimeUtil::SECONDS_PER_DAY
      public:
      };

      template<typename T1      >
      class NotificationListener
      {
      public:
      };
#if 0 // Instances:
// <struct sophis::tools::util::Worker::JobTerminatedEvent>
#if 0
      template<>
      class NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>
      {
        // Functions:
        public: sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>::~NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>::~NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>(void) = 0; // 0
        // VFTable with 0 offset end

        // VFTable. Offset=32, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>::~NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>(void); // 0
        public: virtual void unknown_vf_32_1(void); // 1
        public: virtual void unknown_vf_32_2(void); // 2
        public: virtual void unknown_vf_32_3(void); // 3
#endif
        // VFTable with 32 offset end

      public:
      };
#endif
#endif


      template<typename T1      >
      class NotificationProvider
      {
      public:
      };
#if 0 // Instances:
// <struct sophis::tools::util::Worker::JobTerminatedEvent>
#if 0
      template<>
      class NotificationProvider<struct sophis::tools::util::Worker::JobTerminatedEvent>
      {
      public:
        // Nested containers:
        class/*or struct*/ ListenerList
        {
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisSystem.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };


        // VFTable. Offset=0, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        // VFTable with 0 offset end

        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };
#endif
#endif


      class/*or struct*/ SystemInfoUtil
      {
        // Static functions:
        public: static void sophis::tools::util::SystemInfoUtil::dispose(void)
        public: static void sophis::tools::util::SystemInfoUtil::init(void)
      public:
      };

      class UIDGenerator
      {
      public:
      };

      class Worker : public Runnable
      {
      public:
        // Nested containers:
        struct JobTerminatedEvent
        {
        public:
        };


        // Functions:
        public: sophis::tools::util::Worker::Worker(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::util::Worker::~Worker(void)
#endif

      public:
      };

      class WorkerAllocator : public RefCount
      {
        // Functions:
        public: sophis::tools::util::WorkerAllocator::WorkerAllocator(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::util::WorkerAllocator::~WorkerAllocator(void)
#endif

      public:
      };

      class WorkerList
      {
        // Functions:
        public: sophis::tools::util::WorkerList::WorkerList(void)
        public: void sophis::tools::util::WorkerList::`vbase dtor'(void)
        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class WorkerVisitor : public RefCount
      {
        // VFTable. Offset=0, Size=5, Start=0
        // Corresponding base: base::base::RefCount
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void) = 0; // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void) = 0; // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void) = 0; // 4
        // VFTable with 0 offset end

      public:
      };


    };


  };


};
