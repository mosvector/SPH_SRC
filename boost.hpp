/* Autogenerated header */
#pragma once

namespace/*or class/struct?*/ boost
{
  // Nested containers:
  namespace/*or class/struct?*/ container
  {
    // Nested containers:
    class/*or struct*/ exception : public exception
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::exception
      // Owner: SophisXmlTools.dll
      // VFTable with 0 offset end

    public:
    };

    template<typename T0, typename T1, typename T2, typename T4    >
    class flat_map
    {
    public:
    };
#if 0 // Instances:
// <long, long, struct std::less<long>, void>
#if 0
    template<>
    class flat_map<long, long, struct std::less<long>, void>
    {
    public:
    };
#endif
#endif


    class/*or struct*/ out_of_range : public exception
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: container::container::exception
      // Owner: SophisXmlTools.dll
      // VFTable with 0 offset end

    public:
    };


  };

  namespace/*or class/struct?*/ numeric
  {
    // Nested containers:
    class/*or struct*/ bad_numeric_cast : public bad_cast
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::bad_cast
      // Owner: SophisXmlTools.dll
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ positive_overflow : public bad_numeric_cast
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: numeric::numeric::bad_numeric_cast
      // Owner: SophisXmlTools.dll
      // VFTable with 0 offset end

    public:
    };


  };


};
