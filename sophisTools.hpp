/* Autogenerated header */
#pragma once

class/*or struct*/ sophisTools
{
public:
  // Nested containers:
  class CSRDay
  {
    // Functions:
    public: CSRDay(int, int, int)
  public:
  };

  class FlyWeightString
  {
    // Functions:
    public: FlyWeightString(class sophisTools::FlyWeightString const &)
    public: FlyWeightString(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
    public: FlyWeightString(void)
    public: ~FlyWeightString(void)
    public: class sophisTools::FlyWeightString & operator=(class sophisTools::FlyWeightString const &)
    public: class sophisTools::FlyWeightString & operator=(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
    public: bool operator==(class sophisTools::FlyWeightString const &) const
    public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const & operator class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &(void) const
    public: bool operator<(class sophisTools::FlyWeightString const &) const
    public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const & get(void) const
  public:
  };

  namespace/*or class/struct?*/ base
  {
    // Nested containers:
    class ClassCastException
    {
      // Functions:
      public: sophisTools::base::ClassCastException::ClassCastException(class sophisTools::base::ClassCastException const &)
      public: sophisTools::base::ClassCastException::ClassCastException(char const *, char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::ClassCastException::~ClassCastException(void)
#endif

    public:
    };

    class ExceptionBase
    {
      // Functions:
      protected: sophisTools::base::ExceptionBase::ExceptionBase(char const *, char const *, long, bool, bool)
      public: sophisTools::base::ExceptionBase::ExceptionBase(class sophisTools::base::ExceptionBase const &)
      public: char const * sophisTools::base::ExceptionBase::operator char const *(void) const
      public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::base::ExceptionBase::getError(void) const
      public: char const * sophisTools::base::ExceptionBase::getName(void) const
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::ExceptionBase::~ExceptionBase(void)
#endif

    public:
    };

    class GeneralException
    {
      // Functions:
      public: sophisTools::base::GeneralException::GeneralException(class sophisTools::base::GeneralException const &)
      public: sophisTools::base::GeneralException::GeneralException(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::GeneralException::~GeneralException(void)
#endif

    public:
    };

    class InvalidArgument
    {
      // Functions:
      public: sophisTools::base::InvalidArgument::InvalidArgument(class sophisTools::base::InvalidArgument const &)
    public:
    };

    class InvalidInvocationOrder
    {
      // Functions:
      public: sophisTools::base::InvalidInvocationOrder::InvalidInvocationOrder(class sophisTools::base::InvalidInvocationOrder const &)
      public: sophisTools::base::InvalidInvocationOrder::InvalidInvocationOrder(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::InvalidInvocationOrder::~InvalidInvocationOrder(void)
#endif

    public:
    };

    class NamedInvalidArgument
    {
      // Functions:
      public: sophisTools::base::NamedInvalidArgument::NamedInvalidArgument(class sophisTools::base::NamedInvalidArgument const &)
      public: sophisTools::base::NamedInvalidArgument::NamedInvalidArgument(char const *, char const *, char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::NamedInvalidArgument::~NamedInvalidArgument(void)
#endif

    public:
    };

    class NotImplemented
    {
      // Functions:
      public: sophisTools::base::NotImplemented::NotImplemented(class sophisTools::base::NotImplemented const &)
      public: sophisTools::base::NotImplemented::NotImplemented(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::NotImplemented::~NotImplemented(void)
#endif

    public:
    };

    class NullPointerException
    {
      // Functions:
      public: sophisTools::base::NullPointerException::NullPointerException(class sophisTools::base::NullPointerException const &)
      public: sophisTools::base::NullPointerException::NullPointerException(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::NullPointerException::~NullPointerException(void)
#endif

    public:
    };

    class RefCount
    {
      // Functions:
      public: sophisTools::base::RefCount::RefCount(class sophisTools::base::RefCount const &)
      public: sophisTools::base::RefCount::RefCount(void)
      public: class sophisTools::base::RefCount & sophisTools::base::RefCount::operator=(class sophisTools::base::RefCount const &)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::RefCount::~RefCount(void)
#endif

    public:
    };

    template<typename T1    >
    class RefCountHandle
    {
    public:
    };
#if 0 // Instances:
// <class sophis::tools::dataModel::ParentStack>
#if 0
    template<>
    class RefCountHandle<class sophis::tools::dataModel::ParentStack>
    {
    public:
    };
#endif
// <class sophis::tools::dataModel::Transformer>
#if 0
    template<>
    class RefCountHandle<class sophis::tools::dataModel::Transformer>
    {
    public:
    };
#endif
// <class sophis::tools::util::ByteArray>
#if 0
    template<>
    class RefCountHandle<class sophis::tools::util::ByteArray>
    {
    public:
    };
#endif
// <class sophis::tools::util::StringBoolMap>
#if 0
    template<>
    class RefCountHandle<class sophis::tools::util::StringBoolMap>
    {
    public:
    };
#endif
// <class sophis::tools::util::StringPairList>
#if 0
    template<>
    class RefCountHandle<class sophis::tools::util::StringPairList>
    {
    public:
    };
#endif
// <class sophis::tools::util::Worker>
#if 0
    template<>
    class RefCountHandle<class sophis::tools::util::Worker>
    {
    public:
    };
#endif
// <class sophis::xml::dataModel::BasicGrammarPoolImpl>
#if 0
    template<>
    class RefCountHandle<class sophis::xml::dataModel::BasicGrammarPoolImpl>
    {
    public:
    };
#endif
// <class sophis::xml::dataModel::DataFactory>
#if 0
    template<>
    class RefCountHandle<class sophis::xml::dataModel::DataFactory>
    {
    public:
    };
#endif
// <class sophis::xml::dataModel::GrammarLoadingGuard>
#if 0
    template<>
    class RefCountHandle<class sophis::xml::dataModel::GrammarLoadingGuard>
    {
    public:
    };
#endif
// <class sophis::xml::dataModel::GrammarPool>
#if 0
    template<>
    class RefCountHandle<class sophis::xml::dataModel::GrammarPool>
    {
    public:
    };
#endif
// <class sophis::xml::util::DOMDocumentWrapper>
#if 0
    template<>
    class RefCountHandle<class sophis::xml::util::DOMDocumentWrapper>
    {
    public:
    };
#endif
// <class sophisTools::io::ByteArrayIOStream>
#if 0
    template<>
    class RefCountHandle<class sophisTools::io::ByteArrayIOStream>
    {
      // Functions:
      public: sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayIOStream>::~RefCountHandle<class sophisTools::io::ByteArrayIOStream>(void)
      public: class sophisTools::io::ByteArrayIOStream * sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayIOStream>::in(void) const
    public:
    };
#endif
// <class sophisTools::io::ByteArrayOutputStream>
#if 0
    template<>
    class RefCountHandle<class sophisTools::io::ByteArrayOutputStream>
    {
    public:
    };
#endif
// <class sophisTools::io::ByteArrayRandomAccessIOStream>
#if 0
    template<>
    class RefCountHandle<class sophisTools::io::ByteArrayRandomAccessIOStream>
    {
    public:
    };
#endif
// <class sophisTools::io::File>
#if 0
    template<>
    class RefCountHandle<class sophisTools::io::File>
    {
    public:
    };
#endif
// <class sophisTools::io::FilterInputStream>
#if 0
    template<>
    class RefCountHandle<class sophisTools::io::FilterInputStream>
    {
    public:
    };
#endif
// <class sophisTools::io::FilterOutputStream>
#if 0
    template<>
    class RefCountHandle<class sophisTools::io::FilterOutputStream>
    {
    public:
    };
#endif
// <class sophisTools::io::InputStream>
#if 0
    template<>
    class RefCountHandle<class sophisTools::io::InputStream>
    {
    public:
    };
#endif
// <class sophisTools::io::OutputStream>
#if 0
    template<>
    class RefCountHandle<class sophisTools::io::OutputStream>
    {
    public:
    };
#endif
// <class sophisTools::io::RandomAccessInputStream>
#if 0
    template<>
    class RefCountHandle<class sophisTools::io::RandomAccessInputStream>
    {
    public:
    };
#endif
#endif


#if 0
    template<>
    class RefCountHandle<class sophis::tools::util::Worker>
    {
    public:
    };
#endif

#if 0
    template<>
    class RefCountHandle<class sophisTools::io::OutputStream>
    {
    public:
    };
#endif

    class RunTimeFailure
    {
      // Functions:
      public: sophisTools::base::RunTimeFailure::RunTimeFailure(class sophisTools::base::RunTimeFailure const &)
      public: sophisTools::base::RunTimeFailure::RunTimeFailure(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::RunTimeFailure::~RunTimeFailure(void)
#endif

    public:
    };

    class/*or struct*/ Runnable : public RefCount
    {
    public:
    };

    class/*or struct*/ StringUtil
    {
      // Static functions:
      public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::base::StringUtil::ordinalMark(long)
      public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::base::StringUtil::pluralMark(long)
      public: static bool sophisTools::base::StringUtil::string2bool(char const *)
      public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::base::StringUtil::upperCamel(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
      public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::base::StringUtil::upperCamel(char const *)
    public:
    };

    class/*or struct*/ UnsafeRefCount
    {
      // Functions:
      public: sophisTools::base::UnsafeRefCount::UnsafeRefCount(void)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::UnsafeRefCount::~UnsafeRefCount(void)
      public: virtual void sophisTools::base::UnsafeRefCount::_add_ref(void)
      public: virtual void sophisTools::base::UnsafeRefCount::_remove_ref(void)
      public: virtual long sophisTools::base::UnsafeRefCount::getRef(void) const
#endif

    public:
    };


  };

  namespace/*or class/struct?*/ io
  {
    // Nested containers:
    class ByteArrayIOStream
    {
      // Static functions:
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayIOStream> sophisTools::io::ByteArrayIOStream::create(void)
    public:
    };

    class ByteArrayOutputStream
    {
      // Functions:
      public: void sophisTools::io::ByteArrayOutputStream::readFrom(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>)
      public: void sophisTools::io::ByteArrayOutputStream::wipe(void)
      // Static functions:
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayOutputStream> sophisTools::io::ByteArrayOutputStream::create(void)
    public:
    };

    class ByteArrayRandomAccessIOStream
    {
      // Static functions:
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayRandomAccessIOStream> sophisTools::io::ByteArrayRandomAccessIOStream::create(char const *, unsigned __int64, unsigned __int64)
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayRandomAccessIOStream> sophisTools::io::ByteArrayRandomAccessIOStream::create(void)
    public:
    };

    class File
    {
      // Static functions:
      public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::io::File::baseName(char const *, bool)
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::File> sophisTools::io::File::create(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::File> sophisTools::io::File::create(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::File> sophisTools::io::File::findFileInPathEnvironment(char const *, char const *)
      public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::io::File::parentName(char const *)
    public:
    };

    class/*or struct*/ FileInputStream
    {
      // Functions:
      public: class sophisTools::base::RefCountHandle<class sophisTools::io::File> sophisTools::io::FileInputStream::getFile(void)
      // Static functions:
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream> sophisTools::io::FileInputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::File>)
    public:
    };

    class/*or struct*/ FileOutputStream
    {
      // Static functions:
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream> sophisTools::io::FileOutputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::File>, bool, bool)
    public:
    };

    class FilterInputStream
    {
      // Functions:
      public: void sophisTools::io::FilterInputStream::setUnderlyingInputStream(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>)
    public:
    };

    class FilterOutputStream
    {
      // Functions:
      public: void sophisTools::io::FilterOutputStream::setUnderlyingOutputStream(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
    public:
    };

    class InputStream
    {
    public:
    };

    class OutputStream
    {
    public:
    };

    class/*or struct*/ OutputStreamStdAdapter
    {
      // Functions:
      public: sophisTools::io::OutputStreamStdAdapter::OutputStreamStdAdapter(class std::basic_ostream<char, struct std::char_traits<char>> &)
      public: void sophisTools::io::OutputStreamStdAdapter::`vbase dtor'(void)
#if 0 // All found virtual functions names:
      public: virtual void sophisTools::io::OutputStreamStdAdapter::_add_ref(void)
      public: virtual void sophisTools::io::OutputStreamStdAdapter::_remove_ref(void)
      public: virtual long sophisTools::io::OutputStreamStdAdapter::getRef(void) const
#endif

      // VFTable. Offset=48, Size=4, Start=0
      // Owner: SophisXML.dll
      // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
      public: virtual void unknown_vf_48_0(void); // 0
      public: virtual void unknown_vf_48_1(void); // 1
      public: virtual void unknown_vf_48_2(void); // 2
      public: virtual void unknown_vf_48_3(void); // 3
#endif
      // VFTable with 48 offset end

    public:
    };

    class/*or struct*/ PipedInputStream
    {
      // Functions:
      public: sophisTools::io::PipedInputStream::PipedInputStream(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
      public: void sophisTools::io::PipedInputStream::`vbase dtor'(void)
#if 0 // All found virtual functions names:
      public: virtual void sophisTools::io::PipedInputStream::_add_ref(void)
      public: virtual void sophisTools::io::PipedInputStream::_remove_ref(void)
      public: virtual long sophisTools::io::PipedInputStream::getRef(void) const
#endif

      // VFTable. Offset=56, Size=4, Start=0
      // Owner: SophisXML.dll
      // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
      public: virtual void unknown_vf_56_0(void); // 0
      public: virtual void unknown_vf_56_1(void); // 1
      public: virtual void unknown_vf_56_2(void); // 2
      public: virtual void unknown_vf_56_3(void); // 3
#endif
      // VFTable with 56 offset end

    public:
    };

    class/*or struct*/ RandomAccessFileInputStream
    {
      // Static functions:
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream> sophisTools::io::RandomAccessFileInputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::File>)
    public:
    };

    class RandomAccessInputStream
    {
    public:
    };

    class/*or struct*/ Serializable
    {
    public:
    };

    class/*or struct*/ StreamUtil
    {
      // Static functions:
      public: static char const * sophisTools::io::StreamUtil::getNewLine(void)
    public:
    };

    class/*or struct*/ TeeOutputStream
    {
      // Static functions:
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream> sophisTools::io::TeeOutputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
    public:
    };


  };

  namespace/*or class/struct?*/ logger
  {
    // Nested containers:
    class/*or struct*/ LoggerUtil
    {
      // Static functions:
      public: static void sophisTools::logger::LoggerUtil::Log(enum Log::Severity, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *, char const *, char const *, unsigned int)
      public: static void sophisTools::logger::LoggerUtil::Log(enum Log::Severity, char const *, char const *, char const *, char const *, unsigned int)
      public: static bool sophisTools::logger::LoggerUtil::isLogWorthIt(enum Log::Severity)
    public:
    };

    class/*or struct*/ LoggerUtilLog4cxx
    {
      // Static functions:
      public: static bool sophisTools::logger::LoggerUtilLog4cxx::IsLogWorthIt(enum Log::Severity)
      public: static void sophisTools::logger::LoggerUtilLog4cxx::Log(enum Log::Severity, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *, char const *)
      public: static void sophisTools::logger::LoggerUtilLog4cxx::Log(enum Log::Severity, char const *, char const *, char const *)
    public:
    };

    class PostMortemLogEngine
    {
    public:
      // Enumerations:
      enum ePostMortemState : int {
      };

      // Functions:
      public: enum sophisTools::logger::PostMortemLogEngine::ePostMortemState sophisTools::logger::PostMortemLogEngine::getActivationState(void) const
      public: void sophisTools::logger::PostMortemLogEngine::pushMessage(enum Log::Severity, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *, char const *, char const *, unsigned __int64)
      public: void sophisTools::logger::PostMortemLogEngine::pushMessage(enum Log::Severity, char const *, char const *, char const *, char const *, unsigned __int64)
      // Static functions:
      public: static class sophisTools::logger::PostMortemLogEngine & sophisTools::logger::PostMortemLogEngine::Instance(void)
      // Variables:
      public: static enum sophisTools::logger::PostMortemLogEngine::ePostMortemState sophisTools::logger::PostMortemLogEngine::bIsPostMortemLogActivated
    public:
    };

    class/*or struct*/ SophisLoggerConfiguration
    {
      // Static functions:
      public: static bool sophisTools::logger::SophisLoggerConfiguration::GetOldLogger(void)
    public:
    };


  };


  // Functions:
  class std::basic_ostream<char, struct std::char_traits<char>> & operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class CSRDay const &)
  class std::basic_ostream<char, struct std::char_traits<char>> & operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class FlyWeightString const &)
  int strnicmp(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned __int64)
public:
};
