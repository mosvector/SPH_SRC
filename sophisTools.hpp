/* Autogenerated header */
#pragma once

class/*or struct*/ sophisTools
{
public:
  // Nested containers:
  class CSRDay
  {
    // Functions:
    public: CSRDay(long)
    public: bool operator!=(class sophisTools::CSRDay const &) const
    public: long operator long(void) const
    // Static functions:
    public: static long GetSystemDate(void)
    public: static long GetSystemTime(void)
  public:
  };

  class FlyWeightString
  {
    // Functions:
    public: class sophisTools::FlyWeightString & operator=(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
  public:
  };

  namespace/*or class/struct?*/ base
  {
    // Nested containers:
    class ClassCastException
    {
      // Functions:
      public: sophisTools::base::ClassCastException::ClassCastException(class sophisTools::base::ClassCastException const &)
      public: sophisTools::base::ClassCastException::ClassCastException(char const *, char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::ClassCastException::~ClassCastException(void)
#endif

    public:
    };

    class ExceptionBase
    {
      // Functions:
      public: sophisTools::base::ExceptionBase::ExceptionBase(class sophisTools::base::ExceptionBase const &)
      public: char const * sophisTools::base::ExceptionBase::operator char const *(void) const
    public:
    };

    class GeneralException
    {
      // Functions:
      public: sophisTools::base::GeneralException::GeneralException(class sophisTools::base::GeneralException const &)
      public: sophisTools::base::GeneralException::GeneralException(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::GeneralException::~GeneralException(void)
#endif

    public:
    };

    class InvalidArgument
    {
      // Functions:
      public: sophisTools::base::InvalidArgument::InvalidArgument(class sophisTools::base::InvalidArgument const &)
      public: sophisTools::base::InvalidArgument::InvalidArgument(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::InvalidArgument::~InvalidArgument(void)
#endif

    public:
    };

    class InvalidInvocationOrder
    {
      // Functions:
      public: sophisTools::base::InvalidInvocationOrder::InvalidInvocationOrder(class sophisTools::base::InvalidInvocationOrder const &)
      public: sophisTools::base::InvalidInvocationOrder::InvalidInvocationOrder(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::InvalidInvocationOrder::~InvalidInvocationOrder(void)
#endif

    public:
    };

    class InvalidInvocationState
    {
      // Functions:
      public: sophisTools::base::InvalidInvocationState::InvalidInvocationState(class sophisTools::base::InvalidInvocationState const &)
      public: sophisTools::base::InvalidInvocationState::InvalidInvocationState(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::InvalidInvocationState::~InvalidInvocationState(void)
#endif

    public:
    };

    class NoLicenseException
    {
      // Functions:
      public: sophisTools::base::NoLicenseException::NoLicenseException(class sophisTools::base::NoLicenseException const &)
      public: sophisTools::base::NoLicenseException::NoLicenseException(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::NoLicenseException::~NoLicenseException(void)
#endif

    public:
    };

    class NotImplemented
    {
      // Functions:
      public: sophisTools::base::NotImplemented::NotImplemented(class sophisTools::base::NotImplemented const &)
      public: sophisTools::base::NotImplemented::NotImplemented(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::NotImplemented::~NotImplemented(void)
#endif

    public:
    };

    class NullPointerException
    {
      // Functions:
      public: sophisTools::base::NullPointerException::NullPointerException(class sophisTools::base::NullPointerException const &)
      public: sophisTools::base::NullPointerException::NullPointerException(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::NullPointerException::~NullPointerException(void)
#endif

    public:
    };

    class/*or struct*/ RefCount
    {
      // Functions:
      public: sophisTools::base::RefCount::RefCount(void)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::RefCount::~RefCount(void)
#endif

    public:
    };

    template<typename T1    >
    class RefCountHandle
    {
    public:
    };
#if 0 // Instances:
// <class sophis::market_data::dataModel::YieldCurveHistoric>
#if 0
    template<>
    class RefCountHandle<class sophis::market_data::dataModel::YieldCurveHistoric>
    {
    public:
    };
#endif
// <class sophis::misc::LocalSession>
#if 0
    template<>
    class RefCountHandle<class sophis::misc::LocalSession>
    {
    public:
    };
#endif
// <class sophis::misc::dataModel::FpmlEntityChecker>
#if 0
    template<>
    class RefCountHandle<class sophis::misc::dataModel::FpmlEntityChecker>
    {
    public:
    };
#endif
// <class sophis::misc::dataModel::FpmlEntityHandler>
#if 0
    template<>
    class RefCountHandle<class sophis::misc::dataModel::FpmlEntityHandler>
    {
    public:
    };
#endif
// <class sophis::misc::fpml::entity::InstrumentEntityHandler>
#if 0
    template<>
    class RefCountHandle<class sophis::misc::fpml::entity::InstrumentEntityHandler>
    {
    public:
    };
#endif
// <class sophis::tools::dataModel::ParentStack>
#if 0
    template<>
    class RefCountHandle<class sophis::tools::dataModel::ParentStack>
    {
    public:
    };
#endif
// <class sophis::xml::dataModel::BasicGrammarPoolImpl>
#if 0
    template<>
    class RefCountHandle<class sophis::xml::dataModel::BasicGrammarPoolImpl>
    {
    public:
    };
#endif
// <class sophis::xml::dataModel::DataFactory>
#if 0
    template<>
    class RefCountHandle<class sophis::xml::dataModel::DataFactory>
    {
    public:
    };
#endif
// <class sophisTools::io::ByteArrayInputStream>
#if 0
    template<>
    class RefCountHandle<class sophisTools::io::ByteArrayInputStream>
    {
    public:
    };
#endif
// <class sophisTools::io::ByteArrayOutputStream>
#if 0
    template<>
    class RefCountHandle<class sophisTools::io::ByteArrayOutputStream>
    {
    public:
    };
#endif
// <class sophisTools::io::OutputStream>
#if 0
    template<>
    class RefCountHandle<class sophisTools::io::OutputStream>
    {
    public:
    };
#endif
// <struct sophis::valuation::dataModel::InstrumentSet>
#if 0
    template<>
    class RefCountHandle<struct sophis::valuation::dataModel::InstrumentSet>
    {
    public:
    };
#endif
#endif


    template<typename T0, typename T1, typename T3    >
    class/*or struct*/ RefCountedMap
    {
    public:
    };
#if 0 // Instances:
// <long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>>
#if 0
    template<>
    class/*or struct*/ RefCountedMap<long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>>
    {
      // VFTable. Offset=40, Size=4, Start=0
      // Owner: SophisXmlTools.dll
      // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
      public: virtual void unknown_vf_40_0(void); // 0
      public: virtual void unknown_vf_40_1(void); // 1
      public: virtual void unknown_vf_40_2(void); // 2
      public: virtual void unknown_vf_40_3(void); // 3
#endif
      // VFTable with 40 offset end

    public:
    };
#endif
#endif


    class RunTimeFailure
    {
      // Functions:
      public: sophisTools::base::RunTimeFailure::RunTimeFailure(class sophisTools::base::RunTimeFailure const &)
      public: sophisTools::base::RunTimeFailure::RunTimeFailure(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::RunTimeFailure::~RunTimeFailure(void)
#endif

    public:
    };

    class SystemException
    {
      // Functions:
      public: sophisTools::base::SystemException::SystemException(class sophisTools::base::SystemException const &)
    public:
    };

    class/*or struct*/ UnsafeRefCount
    {
      // Functions:
      public: sophisTools::base::UnsafeRefCount::UnsafeRefCount(void)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::base::UnsafeRefCount::~UnsafeRefCount(void)
      public: virtual void sophisTools::base::UnsafeRefCount::_add_ref(void)
      public: virtual void sophisTools::base::UnsafeRefCount::_remove_ref(void)
      public: virtual long sophisTools::base::UnsafeRefCount::getRef(void) const
#endif

    public:
    };


  };

  namespace/*or class/struct?*/ io
  {
    // Nested containers:
    class ByteArrayInputStream
    {
      // Static functions:
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayInputStream> sophisTools::io::ByteArrayInputStream::create(char *, unsigned __int64, bool)
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayInputStream> sophisTools::io::ByteArrayInputStream::create(char *const, unsigned __int64)
    public:
    };

    class ByteArrayOutputStream
    {
      // Functions:
      public: char * sophisTools::io::ByteArrayOutputStream::orphanBuffer(void)
      // Static functions:
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayOutputStream> sophisTools::io::ByteArrayOutputStream::create(void)
      public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayOutputStream> sophisTools::io::ByteArrayOutputStream::create(bool)
    public:
    };

    class IOException
    {
      // Functions:
      public: sophisTools::io::IOException::IOException(class sophisTools::io::IOException const &)
    public:
    };

    class OutputStream
    {
    public:
    };

    class SerializationException
    {
      // Functions:
      public: sophisTools::io::SerializationException::SerializationException(class sophisTools::io::SerializationException const &)
      public: sophisTools::io::SerializationException::SerializationException(char const *)
#if 0 // All found virtual functions names:
      public: virtual sophisTools::io::SerializationException::~SerializationException(void)
#endif

    public:
    };


  };

  namespace/*or class/struct?*/ logger
  {
    // Nested containers:
    class/*or struct*/ LoggerUtil
    {
      // Static functions:
      public: static void sophisTools::logger::LoggerUtil::Log(enum Log::Severity, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *, char const *, char const *, unsigned int)
      public: static void sophisTools::logger::LoggerUtil::Log(enum Log::Severity, char const *, char const *, char const *, char const *, unsigned int)
      public: static bool sophisTools::logger::LoggerUtil::isLogWorthIt(enum Log::Severity)
    public:
    };

    class/*or struct*/ LoggerUtilLog4cxx
    {
      // Static functions:
      public: static bool sophisTools::logger::LoggerUtilLog4cxx::IsLogWorthIt(enum Log::Severity)
      public: static void sophisTools::logger::LoggerUtilLog4cxx::Log(enum Log::Severity, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *, char const *)
      public: static void sophisTools::logger::LoggerUtilLog4cxx::Log(enum Log::Severity, char const *, char const *, char const *)
    public:
    };

    class PostMortemLogEngine
    {
    public:
      // Enumerations:
      enum ePostMortemState : int {
      };

      // Functions:
      public: enum sophisTools::logger::PostMortemLogEngine::ePostMortemState sophisTools::logger::PostMortemLogEngine::getActivationState(void) const
      public: void sophisTools::logger::PostMortemLogEngine::pushMessage(enum Log::Severity, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *, char const *, char const *, unsigned __int64)
      public: void sophisTools::logger::PostMortemLogEngine::pushMessage(enum Log::Severity, char const *, char const *, char const *, char const *, unsigned __int64)
      // Static functions:
      public: static class sophisTools::logger::PostMortemLogEngine & sophisTools::logger::PostMortemLogEngine::Instance(void)
      // Variables:
      public: static enum sophisTools::logger::PostMortemLogEngine::ePostMortemState sophisTools::logger::PostMortemLogEngine::bIsPostMortemLogActivated
    public:
    };

    class/*or struct*/ SophisLoggerConfiguration
    {
      // Static functions:
      public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::logger::SophisLoggerConfiguration::GetFilePath(void)
      public: static bool sophisTools::logger::SophisLoggerConfiguration::GetOldLogger(void)
    public:
    };


  };


  // Functions:
  class std::basic_ostream<char, struct std::char_traits<char>> & operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class CSRDay const &)
public:
};
