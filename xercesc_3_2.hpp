/* Autogenerated header */
#pragma once

class/*or struct*/ xercesc_3_2
{
public:
  // Nested containers:
  class/*or struct*/ AbstractDOMParser : public XMemory, public XMLDocumentHandler, public XMLErrorReporter, public XMLEntityHandler, public DocTypeHandler, public PSVIHandler
  {
#if 0 // All found virtual functions names:
    public: virtual void TextDecl(char16_t const *const, char16_t const *const)
    public: virtual void attDef(class xercesc_3_2::DTDElementDecl const &, class xercesc_3_2::DTDAttDef const &, bool)
    protected: virtual class xercesc_3_2::DOMAttr * createAttr(char16_t const *)
    protected: virtual class xercesc_3_2::DOMAttr * createAttrNS(char16_t const *, char16_t const *, char16_t const *, char16_t const *)
    protected: virtual class xercesc_3_2::DOMCDATASection * createCDATASection(char16_t const *, unsigned __int64)
    protected: virtual class xercesc_3_2::DOMElement * createElement(char16_t const *)
    protected: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *, char16_t const *, char16_t const *)
    protected: virtual class xercesc_3_2::DOMText * createText(char16_t const *, unsigned __int64)
    public: virtual void doctypeComment(char16_t const *const)
    public: virtual void doctypeDecl(class xercesc_3_2::DTDElementDecl const &, char16_t const *const, char16_t const *const, bool, bool)
    public: virtual void doctypePI(char16_t const *const, char16_t const *const)
    public: virtual void doctypeWhitespace(char16_t const *const, unsigned __int64)
    public: virtual void elementDecl(class xercesc_3_2::DTDElementDecl const &, bool)
    public: virtual void endAttList(class xercesc_3_2::DTDElementDecl const &)
    public: virtual void endDocument(void)
    public: virtual void endEntityReference(class xercesc_3_2::XMLEntityDecl const &)
    public: virtual void endExtSubset(void)
    public: virtual void endIntSubset(void)
    public: virtual void entityDecl(class xercesc_3_2::DTDEntityDecl const &, bool, bool)
    public: virtual void handleAttributesPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIAttributeList *)
    public: virtual void handleElementPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIElement *)
    public: virtual void handlePartialElementPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIElement *)
    public: virtual void ignorableWhitespace(char16_t const *const, unsigned __int64, bool)
    public: virtual void notationDecl(class xercesc_3_2::XMLNotationDecl const &, bool)
    public: virtual void resetDocType(void)
    public: virtual void resetDocument(void)
    public: virtual void setPSVIHandler(class xercesc_3_2::PSVIHandler *const)
    public: virtual void startAttList(class xercesc_3_2::DTDElementDecl const &)
    public: virtual void startExtSubset(void)
    public: virtual void startIntSubset(void)
#endif

    // VFTable. Offset=0, Size=20, Start=0
    // Corresponding base: xercesc_3_2::XMLDocumentHandler
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void docCharacters(char16_t const *const, unsigned __int64, bool); // 1 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void docComment(char16_t const *const); // 2 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void docPI(char16_t const *const, char16_t const *const); // 3 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void endDocument(void); // 4
    public: virtual void endElement(class xercesc_3_2::XMLElementDecl const &, unsigned int, bool, char16_t const *const); // 5 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void endEntityReference(class xercesc_3_2::XMLEntityDecl const &); // 6
    public: virtual void ignorableWhitespace(char16_t const *const, unsigned __int64, bool); // 7
    public: virtual void resetDocument(void); // 8
    public: virtual void startDocument(void); // 9 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void startElement(class xercesc_3_2::XMLElementDecl const &, unsigned int, char16_t const *const, class xercesc_3_2::RefVectorOf<class xercesc_3_2::XMLAttr> const &, unsigned __int64, bool, bool); // 10 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void startEntityReference(class xercesc_3_2::XMLEntityDecl const &); // 11 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void XMLDecl(char16_t const *const, char16_t const *const, char16_t const *const, char16_t const *const); // 12 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void setPSVIHandler(class xercesc_3_2::PSVIHandler *const); // 13
    protected: virtual class xercesc_3_2::DOMCDATASection * createCDATASection(char16_t const *, unsigned __int64); // 14
    protected: virtual class xercesc_3_2::DOMText * createText(char16_t const *, unsigned __int64); // 15
    protected: virtual class xercesc_3_2::DOMElement * createElement(char16_t const *); // 16
    protected: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *, char16_t const *, char16_t const *); // 17
    protected: virtual class xercesc_3_2::DOMAttr * createAttr(char16_t const *); // 18
    protected: virtual class xercesc_3_2::DOMAttr * createAttrNS(char16_t const *, char16_t const *, char16_t const *, char16_t const *); // 19
    // VFTable with 0 offset end

    // VFTable. Offset=24, Size=17, Start=17
    // Corresponding base: xercesc_3_2::DocTypeHandler
    // Overrides:
    public: virtual void attDef(class xercesc_3_2::DTDElementDecl const &, class xercesc_3_2::DTDAttDef const &, bool) override; // 1
    public: virtual void doctypeComment(char16_t const *const) override; // 2
    public: virtual void doctypeDecl(class xercesc_3_2::DTDElementDecl const &, char16_t const *const, char16_t const *const, bool, bool) override; // 3
    public: virtual void doctypePI(char16_t const *const, char16_t const *const) override; // 4
    public: virtual void doctypeWhitespace(char16_t const *const, unsigned __int64) override; // 5
    public: virtual void elementDecl(class xercesc_3_2::DTDElementDecl const &, bool) override; // 6
    public: virtual void endAttList(class xercesc_3_2::DTDElementDecl const &) override; // 7
    public: virtual void endIntSubset(void) override; // 8
    public: virtual void endExtSubset(void) override; // 9
    public: virtual void entityDecl(class xercesc_3_2::DTDEntityDecl const &, bool, bool) override; // 10
    public: virtual void resetDocType(void) override; // 11
    public: virtual void notationDecl(class xercesc_3_2::XMLNotationDecl const &, bool) override; // 12
    public: virtual void startAttList(class xercesc_3_2::DTDElementDecl const &) override; // 13
    public: virtual void startIntSubset(void) override; // 14
    public: virtual void startExtSubset(void) override; // 15
    public: virtual void TextDecl(char16_t const *const, char16_t const *const) override; // 16
    // VFTable with 24 offset end

    // VFTable. Offset=32, Size=4, Start=4
    // Corresponding base: xercesc_3_2::PSVIHandler
    // Overrides:
    public: virtual void handleElementPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIElement *) override; // 1
    public: virtual void handlePartialElementPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIElement *) override; // 2
    public: virtual void handleAttributesPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIAttributeList *) override; // 3
    // VFTable with 32 offset end

  public:
  };

  class ArrayIndexOutOfBoundsException
  {
    // Functions:
    public: ArrayIndexOutOfBoundsException(class xercesc_3_2::ArrayIndexOutOfBoundsException const &)
    public: ArrayIndexOutOfBoundsException(char const *const, unsigned __int64, enum xercesc_3_2::XMLExcepts::Codes, class xercesc_3_2::MemoryManager *)
#if 0 // All found virtual functions names:
    public: virtual ~ArrayIndexOutOfBoundsException(void)
#endif

  public:
  };

  class/*or struct*/ Base64
  {
  public:
    // Enumerations:
    enum Conformance : int {
    };

    // Static functions:
    public: static unsigned char * decode(unsigned char const *const, unsigned __int64 *, class xercesc_3_2::MemoryManager *const, enum Conformance)
    public: static unsigned char * encode(unsigned char const *const, unsigned __int64, unsigned __int64 *, class xercesc_3_2::MemoryManager *const)
  public:
  };

  class BinInputStream : public XMemory
  {
    // Functions:
    protected: BinInputStream(void)
#if 0 // All found virtual functions names:
    public: virtual ~BinInputStream(void)
    public: virtual char16_t const * getEncoding(void) const
#endif

    // VFTable. Offset=0, Size=5, Start=0
    // Added virtual functions:
    public: virtual ~BinInputStream(void); // 0
    public: virtual unsigned __int64 sophis::xml::io::BinInputStreamAdapter::curPos(void) const; // 1 (io::io::io::BinInputStreamAdapter)
    public: virtual unsigned __int64 sophis::xml::io::BinInputStreamAdapter::readBytes(unsigned char *const, unsigned __int64); // 2 (io::io::io::BinInputStreamAdapter)
    public: virtual char16_t const * sophis::xml::io::BinInputStreamAdapter::getContentType(void) const; // 3 (io::io::io::BinInputStreamAdapter)
    public: virtual char16_t const * getEncoding(void) const; // 4
    // VFTable with 0 offset end

  public:
  };

  class BinOutputStream : public XMemory
  {
    // Functions:
    protected: BinOutputStream(void)
#if 0 // All found virtual functions names:
    public: virtual ~BinOutputStream(void)
#endif

    // VFTable. Offset=0, Size=0, Start=0
    // VFTable with 0 offset end

  public:
  };

  class ComplexTypeInfo
  {
    // Functions:
    public: class xercesc_3_2::SchemaElementDecl const * elementAt(unsigned __int64) const
    public: unsigned __int64 elementCount(void) const
    public: class xercesc_3_2::ContentSpecNode * getContentSpec(void) const
    public: char16_t const * getTypeLocalName(void) const
    public: char16_t const * getTypeUri(void) const
  public:
  };

  class ContentSpecNode
  {
  public:
  };

  class DOMAttr
  {
  public:
  };

  class DOMCDATASection
  {
  public:
  };

  class DOMChildNode
  {
  public:
  };

  class DOMComment
  {
  public:
  };

  class DOMConfiguration
  {
    // VFTable. Offset=0, Size=7, Start=0
    // Added virtual functions:
    public: virtual void setParameter(char16_t const *, bool); // 0 (xercesc_3_2::DOMLSSerializerImpl)
    public: virtual void setParameter(char16_t const *, void const *); // 1 (xercesc_3_2::DOMLSSerializerImpl)
    public: virtual void const * getParameter(char16_t const *) const; // 2 (xercesc_3_2::DOMLSSerializerImpl)
    public: virtual bool canSetParameter(char16_t const *, bool) const; // 3 (xercesc_3_2::DOMLSSerializerImpl)
    public: virtual bool canSetParameter(char16_t const *, void const *) const; // 4 (xercesc_3_2::DOMLSSerializerImpl)
    public: virtual class xercesc_3_2::DOMStringList const * getParameterNames(void) const; // 5 (xercesc_3_2::DOMLSSerializerImpl)
    public: virtual void unknown_vf_0_6(void); // 6
    // VFTable with 0 offset end

  public:
  };

  class DOMDocument : public DOMDocumentRange, public DOMXPathEvaluator, public DOMDocumentTraversal, public DOMNode
  {
    // VFTable. Offset=0, Size=38, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual class xercesc_3_2::DOMRange * createRange(void); // 1 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMElement * createElement(char16_t const *); // 2 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMDocumentFragment * createDocumentFragment(void); // 3 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMText * createTextNode(char16_t const *); // 4 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMComment * createComment(char16_t const *); // 5 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMCDATASection * createCDATASection(char16_t const *); // 6 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMProcessingInstruction * createProcessingInstruction(char16_t const *, char16_t const *); // 7 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMAttr * createAttribute(char16_t const *); // 8 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMEntityReference * createEntityReference(char16_t const *); // 9 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMDocumentType * getDoctype(void) const; // 10 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMImplementation * getImplementation(void) const; // 11 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMElement * getDocumentElement(void) const; // 12 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMNodeList * getElementsByTagName(char16_t const *) const; // 13 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMNode * importNode(class xercesc_3_2::DOMNode const *, bool); // 14 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *, unsigned __int64, unsigned __int64); // 15 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *); // 16 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMAttr * createAttributeNS(char16_t const *, char16_t const *); // 17 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMNodeList * getElementsByTagNameNS(char16_t const *, char16_t const *) const; // 18 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMElement * getElementById(char16_t const *) const; // 19 (xercesc_3_2::DOMDocumentImpl)
    public: virtual char16_t const * getInputEncoding(void) const; // 20 (xercesc_3_2::DOMDocumentImpl)
    public: virtual char16_t const * getXmlEncoding(void) const; // 21 (xercesc_3_2::DOMDocumentImpl)
    public: virtual bool getXmlStandalone(void) const; // 22 (xercesc_3_2::DOMDocumentImpl)
    public: virtual void setXmlStandalone(bool); // 23 (xercesc_3_2::DOMDocumentImpl)
    public: virtual char16_t const * getXmlVersion(void) const; // 24 (xercesc_3_2::DOMDocumentImpl)
    public: virtual void setXmlVersion(char16_t const *); // 25 (xercesc_3_2::DOMDocumentImpl)
    public: virtual char16_t const * getDocumentURI(void) const; // 26 (xercesc_3_2::DOMDocumentImpl)
    public: virtual void setDocumentURI(char16_t const *); // 27 (xercesc_3_2::DOMDocumentImpl)
    public: virtual bool getStrictErrorChecking(void) const; // 28 (xercesc_3_2::DOMDocumentImpl)
    public: virtual void setStrictErrorChecking(bool); // 29 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMNode * renameNode(class xercesc_3_2::DOMNode *, char16_t const *, char16_t const *); // 30 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMNode * adoptNode(class xercesc_3_2::DOMNode *); // 31 (xercesc_3_2::DOMDocumentImpl)
    public: virtual void normalizeDocument(void); // 32 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMConfiguration * getDOMConfig(void) const; // 33 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMEntity * createEntity(char16_t const *); // 34 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMDocumentType * createDocumentType(char16_t const *, char16_t const *, char16_t const *); // 35 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMDocumentType * createDocumentType(char16_t const *); // 36 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMNotation * createNotation(char16_t const *); // 37 (xercesc_3_2::DOMDocumentImpl)
    // VFTable with 0 offset end

  public:
  };

  class DOMDocumentFragment
  {
  public:
  };

  class/*or struct*/ DOMDocumentImpl : public XMemory, public DOMMemoryManager, public DOMDocument, public HasDOMNodeImpl, public HasDOMParentImpl
  {
    // Functions:
    public: DOMDocumentImpl(class xercesc_3_2::DOMImplementation *, class xercesc_3_2::MemoryManager *const)
    public: DOMDocumentImpl(char16_t const *, char16_t const *, class xercesc_3_2::DOMDocumentType *, class xercesc_3_2::DOMImplementation *, class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
    public: virtual ~DOMDocumentImpl(void)
    public: virtual class xercesc_3_2::DOMNode * adoptNode(class xercesc_3_2::DOMNode *)
    public: virtual void * allocate(unsigned __int64)
    public: virtual void * allocate(unsigned __int64, enum xercesc_3_2::DOMMemoryManager::NodeObjectType)
    public: virtual class xercesc_3_2::DOMNode * appendChild(class xercesc_3_2::DOMNode *)
    public: virtual void changed(void)
    public: virtual int changes(void) const
    public: virtual class xercesc_3_2::DOMNode * cloneNode(bool) const
    public: virtual char16_t * cloneString(char16_t const *)
    public: virtual short compareDocumentPosition(class xercesc_3_2::DOMNode const *) const
    public: virtual class xercesc_3_2::DOMAttr * createAttribute(char16_t const *)
    public: virtual class xercesc_3_2::DOMAttr * createAttributeNS(char16_t const *, char16_t const *)
    public: virtual class xercesc_3_2::DOMCDATASection * createCDATASection(char16_t const *)
    public: virtual class xercesc_3_2::DOMComment * createComment(char16_t const *)
    public: virtual class xercesc_3_2::DOMDocumentFragment * createDocumentFragment(void)
    public: virtual class xercesc_3_2::DOMDocumentType * createDocumentType(char16_t const *, char16_t const *, char16_t const *)
    public: virtual class xercesc_3_2::DOMDocumentType * createDocumentType(char16_t const *)
    public: virtual class xercesc_3_2::DOMElement * createElement(char16_t const *)
    public: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *)
    public: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *, unsigned __int64, unsigned __int64)
    public: virtual class xercesc_3_2::DOMElement * createElementNoCheck(char16_t const *)
    public: virtual class xercesc_3_2::DOMEntity * createEntity(char16_t const *)
    public: virtual class xercesc_3_2::DOMEntityReference * createEntityReference(char16_t const *)
    public: virtual class xercesc_3_2::DOMXPathExpression * createExpression(char16_t const *, class xercesc_3_2::DOMXPathNSResolver const *)
    public: virtual class xercesc_3_2::DOMXPathNSResolver * createNSResolver(class xercesc_3_2::DOMNode const *)
    public: virtual class xercesc_3_2::DOMNodeIterator * createNodeIterator(class xercesc_3_2::DOMNode *, unsigned long, class xercesc_3_2::DOMNodeFilter *, bool)
    public: virtual class xercesc_3_2::DOMNotation * createNotation(char16_t const *)
    public: virtual class xercesc_3_2::DOMProcessingInstruction * createProcessingInstruction(char16_t const *, char16_t const *)
    public: virtual class xercesc_3_2::DOMRange * createRange(void)
    public: virtual class xercesc_3_2::DOMText * createTextNode(char16_t const *)
    public: virtual class xercesc_3_2::DOMTreeWalker * createTreeWalker(class xercesc_3_2::DOMNode *, unsigned long, class xercesc_3_2::DOMNodeFilter *, bool)
    public: virtual class xercesc_3_2::DOMXPathResult * evaluate(char16_t const *, class xercesc_3_2::DOMNode const *, class xercesc_3_2::DOMXPathNSResolver const *, enum xercesc_3_2::DOMXPathResult::ResultType, class xercesc_3_2::DOMXPathResult *)
    public: virtual class xercesc_3_2::DOMNamedNodeMap * getAttributes(void) const
    public: virtual char16_t const * getBaseURI(void) const
    public: virtual class xercesc_3_2::DOMNodeList * getChildNodes(void) const
    public: virtual class xercesc_3_2::DOMConfiguration * getDOMConfig(void) const
    public: virtual class xercesc_3_2::DOMDocumentType * getDoctype(void) const
    public: virtual class xercesc_3_2::DOMElement * getDocumentElement(void) const
    public: virtual char16_t const * getDocumentURI(void) const
    public: virtual class xercesc_3_2::DOMElement * getElementById(char16_t const *) const
    public: virtual class xercesc_3_2::DOMNodeList * getElementsByTagName(char16_t const *) const
    public: virtual class xercesc_3_2::DOMNodeList * getElementsByTagNameNS(char16_t const *, char16_t const *) const
    public: virtual void * getFeature(char16_t const *, char16_t const *) const
    public: virtual class xercesc_3_2::DOMNode * getFirstChild(void) const
    public: virtual class xercesc_3_2::DOMImplementation * getImplementation(void) const
    public: virtual char16_t const * getInputEncoding(void) const
    public: virtual class xercesc_3_2::DOMNode * getLastChild(void) const
    public: virtual char16_t const * getLocalName(void) const
    public: virtual unsigned __int64 getMemoryAllocationBlockSize(void) const
    public: virtual char16_t const * getNamespaceURI(void) const
    public: virtual class xercesc_3_2::DOMNode * getNextSibling(void) const
    public: virtual class xercesc_3_2::DOMNodeImpl * getNodeImpl(void)
    public: virtual class xercesc_3_2::DOMNodeImpl const * getNodeImpl(void) const
    public: virtual class xercesc_3_2::RefVectorOf<class xercesc_3_2::DOMNodeIteratorImpl> * getNodeIterators(void) const
    public: virtual char16_t const * getNodeName(void) const
    public: virtual enum xercesc_3_2::DOMNode::NodeType getNodeType(void) const
    public: virtual char16_t const * getNodeValue(void) const
    public: virtual class xercesc_3_2::DOMDocument * getOwnerDocument(void) const
    public: virtual class xercesc_3_2::DOMNode * getParentNode(void) const
    public: virtual class xercesc_3_2::DOMParentNode * getParentNodeImpl(void)
    public: virtual class xercesc_3_2::DOMParentNode const * getParentNodeImpl(void) const
    public: virtual char16_t const * getPrefix(void) const
    public: virtual class xercesc_3_2::DOMNode * getPreviousSibling(void) const
    public: virtual class xercesc_3_2::RefVectorOf<class xercesc_3_2::DOMRangeImpl> * getRanges(void) const
    public: virtual bool getStrictErrorChecking(void) const
    public: virtual char16_t const * getTextContent(void) const
    public: virtual void * getUserData(char16_t const *) const
    public: virtual char16_t const * getXmlEncoding(void) const
    public: virtual bool getXmlStandalone(void) const
    public: virtual char16_t const * getXmlVersion(void) const
    public: virtual bool hasAttributes(void) const
    public: virtual bool hasChildNodes(void) const
    protected: virtual class xercesc_3_2::DOMNode * importNode(class xercesc_3_2::DOMNode const *, bool, bool)
    public: virtual class xercesc_3_2::DOMNode * importNode(class xercesc_3_2::DOMNode const *, bool)
    public: virtual class xercesc_3_2::DOMNode * insertBefore(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *)
    public: virtual bool isDefaultNamespace(char16_t const *) const
    public: virtual bool isEqualNode(class xercesc_3_2::DOMNode const *) const
    public: virtual bool isSameNode(class xercesc_3_2::DOMNode const *) const
    public: virtual bool isSupported(char16_t const *, char16_t const *) const
    public: virtual char16_t const * lookupNamespaceURI(char16_t const *) const
    public: virtual char16_t const * lookupPrefix(char16_t const *) const
    public: virtual void normalize(void)
    public: virtual void normalizeDocument(void)
    public: virtual void release(class xercesc_3_2::DOMNode *, enum xercesc_3_2::DOMMemoryManager::NodeObjectType)
    public: virtual void release(void *)
    public: virtual void release(void)
    public: virtual class xercesc_3_2::DOMNode * removeChild(class xercesc_3_2::DOMNode *)
    public: virtual void removeNodeIterator(class xercesc_3_2::DOMNodeIteratorImpl *)
    public: virtual void removeRange(class xercesc_3_2::DOMRangeImpl *)
    public: virtual class xercesc_3_2::DOMNode * renameNode(class xercesc_3_2::DOMNode *, char16_t const *, char16_t const *)
    public: virtual class xercesc_3_2::DOMNode * replaceChild(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *)
    public: virtual void setDocumentURI(char16_t const *)
    public: virtual void setMemoryAllocationBlockSize(unsigned __int64)
    public: virtual void setNodeValue(char16_t const *)
    public: virtual void setPrefix(char16_t const *)
    public: virtual void setStrictErrorChecking(bool)
    public: virtual void setTextContent(char16_t const *)
    public: virtual void * setUserData(char16_t const *, void *, class xercesc_3_2::DOMUserDataHandler *)
    public: virtual void setXmlStandalone(bool)
    public: virtual void setXmlVersion(char16_t const *)
#endif

    // VFTable. Offset=0, Size=16, Start=0
    // Corresponding base: xercesc_3_2::DOMMemoryManager
    // Owner: SophisXML.dll
    // Added virtual functions:
    public: virtual ~DOMDocumentImpl(void); // 0
    public: virtual unsigned __int64 getMemoryAllocationBlockSize(void) const; // 1
    public: virtual void setMemoryAllocationBlockSize(unsigned __int64); // 2
    public: virtual void * allocate(unsigned __int64, enum xercesc_3_2::DOMMemoryManager::NodeObjectType); // 3
    public: virtual void * allocate(unsigned __int64); // 4
    public: virtual void release(class xercesc_3_2::DOMNode *, enum xercesc_3_2::DOMMemoryManager::NodeObjectType); // 5
    public: virtual char16_t * cloneString(char16_t const *); // 6
    public: virtual void release(void *); // 7
    public: virtual class xercesc_3_2::DOMElement * createElementNoCheck(char16_t const *); // 8
    public: virtual class xercesc_3_2::RefVectorOf<class xercesc_3_2::DOMRangeImpl> * getRanges(void) const; // 9
    public: virtual class xercesc_3_2::RefVectorOf<class xercesc_3_2::DOMNodeIteratorImpl> * getNodeIterators(void) const; // 10
    public: virtual void removeRange(class xercesc_3_2::DOMRangeImpl *); // 11
    public: virtual void removeNodeIterator(class xercesc_3_2::DOMNodeIteratorImpl *); // 12
    public: virtual void changed(void); // 13
    public: virtual int changes(void) const; // 14
    protected: virtual class xercesc_3_2::DOMNode * importNode(class xercesc_3_2::DOMNode const *, bool, bool); // 15
    // VFTable with 0 offset end

    // VFTable. Offset=8, Size=38, Start=38
    // Corresponding base: xercesc_3_2::DOMDocument
    // Owner: SophisXML.dll
    // public: virtual ~DOMDocumentImpl(void); // 0
    // Overrides:
    public: virtual class xercesc_3_2::DOMRange * createRange(void) override; // 1
    public: virtual class xercesc_3_2::DOMElement * createElement(char16_t const *) override; // 2
    public: virtual class xercesc_3_2::DOMDocumentFragment * createDocumentFragment(void) override; // 3
    public: virtual class xercesc_3_2::DOMText * createTextNode(char16_t const *) override; // 4
    public: virtual class xercesc_3_2::DOMComment * createComment(char16_t const *) override; // 5
    public: virtual class xercesc_3_2::DOMCDATASection * createCDATASection(char16_t const *) override; // 6
    public: virtual class xercesc_3_2::DOMProcessingInstruction * createProcessingInstruction(char16_t const *, char16_t const *) override; // 7
    public: virtual class xercesc_3_2::DOMAttr * createAttribute(char16_t const *) override; // 8
    public: virtual class xercesc_3_2::DOMEntityReference * createEntityReference(char16_t const *) override; // 9
    public: virtual class xercesc_3_2::DOMDocumentType * getDoctype(void) const override; // 10
    public: virtual class xercesc_3_2::DOMImplementation * getImplementation(void) const override; // 11
    public: virtual class xercesc_3_2::DOMElement * getDocumentElement(void) const override; // 12
    public: virtual class xercesc_3_2::DOMNodeList * getElementsByTagName(char16_t const *) const override; // 13
    public: virtual class xercesc_3_2::DOMNode * importNode(class xercesc_3_2::DOMNode const *, bool) override; // 14
    public: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *, unsigned __int64, unsigned __int64) override; // 15
    public: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *) override; // 16
    public: virtual class xercesc_3_2::DOMAttr * createAttributeNS(char16_t const *, char16_t const *) override; // 17
    public: virtual class xercesc_3_2::DOMNodeList * getElementsByTagNameNS(char16_t const *, char16_t const *) const override; // 18
    public: virtual class xercesc_3_2::DOMElement * getElementById(char16_t const *) const override; // 19
    public: virtual char16_t const * getInputEncoding(void) const override; // 20
    public: virtual char16_t const * getXmlEncoding(void) const override; // 21
    public: virtual bool getXmlStandalone(void) const override; // 22
    public: virtual void setXmlStandalone(bool) override; // 23
    public: virtual char16_t const * getXmlVersion(void) const override; // 24
    public: virtual void setXmlVersion(char16_t const *) override; // 25
    public: virtual char16_t const * getDocumentURI(void) const override; // 26
    public: virtual void setDocumentURI(char16_t const *) override; // 27
    public: virtual bool getStrictErrorChecking(void) const override; // 28
    public: virtual void setStrictErrorChecking(bool) override; // 29
    public: virtual class xercesc_3_2::DOMNode * renameNode(class xercesc_3_2::DOMNode *, char16_t const *, char16_t const *) override; // 30
    public: virtual class xercesc_3_2::DOMNode * adoptNode(class xercesc_3_2::DOMNode *) override; // 31
    public: virtual void normalizeDocument(void) override; // 32
    public: virtual class xercesc_3_2::DOMConfiguration * getDOMConfig(void) const override; // 33
    public: virtual class xercesc_3_2::DOMEntity * createEntity(char16_t const *) override; // 34
    public: virtual class xercesc_3_2::DOMDocumentType * createDocumentType(char16_t const *, char16_t const *, char16_t const *) override; // 35
    public: virtual class xercesc_3_2::DOMDocumentType * createDocumentType(char16_t const *) override; // 36
    public: virtual class xercesc_3_2::DOMNotation * createNotation(char16_t const *) override; // 37
    // VFTable with 8 offset end

    // VFTable. Offset=16, Size=4, Start=4
    // Corresponding base: xercesc_3_2::DOMXPathEvaluator
    // Owner: SophisXML.dll
    // public: virtual ~DOMDocumentImpl(void); // 0
    // Overrides:
    public: virtual class xercesc_3_2::DOMXPathExpression * createExpression(char16_t const *, class xercesc_3_2::DOMXPathNSResolver const *) override; // 1
    public: virtual class xercesc_3_2::DOMXPathNSResolver * createNSResolver(class xercesc_3_2::DOMNode const *) override; // 2
    public: virtual class xercesc_3_2::DOMXPathResult * evaluate(char16_t const *, class xercesc_3_2::DOMNode const *, class xercesc_3_2::DOMXPathNSResolver const *, enum xercesc_3_2::DOMXPathResult::ResultType, class xercesc_3_2::DOMXPathResult *) override; // 3
    // VFTable with 16 offset end

    // VFTable. Offset=24, Size=3, Start=3
    // Corresponding base: xercesc_3_2::DOMDocumentTraversal
    // Owner: SophisXML.dll
    // public: virtual ~DOMDocumentImpl(void); // 0
    // Overrides:
    public: virtual class xercesc_3_2::DOMNodeIterator * createNodeIterator(class xercesc_3_2::DOMNode *, unsigned long, class xercesc_3_2::DOMNodeFilter *, bool) override; // 1
    public: virtual class xercesc_3_2::DOMTreeWalker * createTreeWalker(class xercesc_3_2::DOMNode *, unsigned long, class xercesc_3_2::DOMNodeFilter *, bool) override; // 2
    // VFTable with 24 offset end

    // VFTable. Offset=32, Size=39, Start=39
    // Corresponding base: xercesc_3_2::DOMNode
    // Owner: SophisXML.dll
    // public: virtual ~DOMDocumentImpl(void); // 0
    // Overrides:
    public: virtual char16_t const * getNodeName(void) const override; // 1
    public: virtual char16_t const * getNodeValue(void) const override; // 2
    public: virtual enum xercesc_3_2::DOMNode::NodeType getNodeType(void) const override; // 3
    public: virtual class xercesc_3_2::DOMNode * getParentNode(void) const override; // 4
    public: virtual class xercesc_3_2::DOMNodeList * getChildNodes(void) const override; // 5
    public: virtual class xercesc_3_2::DOMNode * getFirstChild(void) const override; // 6
    public: virtual class xercesc_3_2::DOMNode * getLastChild(void) const override; // 7
    public: virtual class xercesc_3_2::DOMNode * getPreviousSibling(void) const override; // 8
    public: virtual class xercesc_3_2::DOMNode * getNextSibling(void) const override; // 9
    public: virtual class xercesc_3_2::DOMNamedNodeMap * getAttributes(void) const override; // 10
    public: virtual class xercesc_3_2::DOMDocument * getOwnerDocument(void) const override; // 11
    public: virtual class xercesc_3_2::DOMNode * cloneNode(bool) const override; // 12
    public: virtual class xercesc_3_2::DOMNode * insertBefore(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *) override; // 13
    public: virtual class xercesc_3_2::DOMNode * replaceChild(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *) override; // 14
    public: virtual class xercesc_3_2::DOMNode * removeChild(class xercesc_3_2::DOMNode *) override; // 15
    public: virtual class xercesc_3_2::DOMNode * appendChild(class xercesc_3_2::DOMNode *) override; // 16
    public: virtual bool hasChildNodes(void) const override; // 17
    public: virtual void setNodeValue(char16_t const *) override; // 18
    public: virtual void normalize(void) override; // 19
    public: virtual bool isSupported(char16_t const *, char16_t const *) const override; // 20
    public: virtual char16_t const * getNamespaceURI(void) const override; // 21
    public: virtual char16_t const * getPrefix(void) const override; // 22
    public: virtual char16_t const * getLocalName(void) const override; // 23
    public: virtual void setPrefix(char16_t const *) override; // 24
    public: virtual bool hasAttributes(void) const override; // 25
    public: virtual bool isSameNode(class xercesc_3_2::DOMNode const *) const override; // 26
    public: virtual bool isEqualNode(class xercesc_3_2::DOMNode const *) const override; // 27
    public: virtual void * setUserData(char16_t const *, void *, class xercesc_3_2::DOMUserDataHandler *) override; // 28
    public: virtual void * getUserData(char16_t const *) const override; // 29
    public: virtual char16_t const * getBaseURI(void) const override; // 30
    public: virtual short compareDocumentPosition(class xercesc_3_2::DOMNode const *) const override; // 31
    public: virtual char16_t const * getTextContent(void) const override; // 32
    public: virtual void setTextContent(char16_t const *) override; // 33
    public: virtual char16_t const * lookupPrefix(char16_t const *) const override; // 34
    public: virtual bool isDefaultNamespace(char16_t const *) const override; // 35
    public: virtual char16_t const * lookupNamespaceURI(char16_t const *) const override; // 36
    public: virtual void * getFeature(char16_t const *, char16_t const *) const override; // 37
    public: virtual void release(void) override; // 38
    // VFTable with 32 offset end

    // VFTable. Offset=40, Size=3, Start=3
    // Corresponding base: xercesc_3_2::HasDOMNodeImpl
    // Owner: SophisXML.dll
    // public: virtual ~DOMDocumentImpl(void); // 0
    // Overrides:
    public: virtual class xercesc_3_2::DOMNodeImpl const * getNodeImpl(void) const override; // 1
    public: virtual class xercesc_3_2::DOMNodeImpl * getNodeImpl(void) override; // 2
    // VFTable with 40 offset end

    // VFTable. Offset=48, Size=3, Start=3
    // Corresponding base: xercesc_3_2::HasDOMParentImpl
    // Owner: SophisXML.dll
    // public: virtual ~DOMDocumentImpl(void); // 0
    // Overrides:
    public: virtual class xercesc_3_2::DOMParentNode const * getParentNodeImpl(void) const override; // 1
    public: virtual class xercesc_3_2::DOMParentNode * getParentNodeImpl(void) override; // 2
    // VFTable with 48 offset end

  public:
  };

  class/*or struct*/ DOMDocumentRange
  {
  public:
  };

  class/*or struct*/ DOMDocumentTraversal
  {
    // VFTable. Offset=0, Size=3, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual class xercesc_3_2::DOMNodeIterator * createNodeIterator(class xercesc_3_2::DOMNode *, unsigned long, class xercesc_3_2::DOMNodeFilter *, bool); // 1 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMTreeWalker * createTreeWalker(class xercesc_3_2::DOMNode *, unsigned long, class xercesc_3_2::DOMNodeFilter *, bool); // 2 (xercesc_3_2::DOMDocumentImpl)
    // VFTable with 0 offset end

  public:
  };

  class DOMDocumentType : public DOMNode
  {
    // Warning: Greater base vftable size!
    // VFTable. Offset=0, Size=0, Start=39
    // Corresponding base: xercesc_3_2::DOMNode
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ DOMDocumentTypeImpl : public DOMDocumentType, public HasDOMNodeImpl, public HasDOMParentImpl, public HasDOMChildImpl
  {
    // Functions:
    public: DOMDocumentTypeImpl(class xercesc_3_2::DOMDocument *, char16_t const *, char16_t const *, char16_t const *, bool)
#if 0 // All found virtual functions names:
    public: virtual ~DOMDocumentTypeImpl(void)
    public: virtual class xercesc_3_2::DOMNode * appendChild(class xercesc_3_2::DOMNode *)
    public: virtual class xercesc_3_2::DOMNode * cloneNode(bool) const
    public: virtual short compareDocumentPosition(class xercesc_3_2::DOMNode const *) const
    public: virtual class xercesc_3_2::DOMNamedNodeMap * getAttributes(void) const
    public: virtual char16_t const * getBaseURI(void) const
    public: virtual class xercesc_3_2::DOMChildNode * getChildNodeImpl(void)
    public: virtual class xercesc_3_2::DOMChildNode const * getChildNodeImpl(void) const
    public: virtual class xercesc_3_2::DOMNodeList * getChildNodes(void) const
    public: virtual class xercesc_3_2::DOMNamedNodeMap * getElements(void) const
    public: virtual class xercesc_3_2::DOMNamedNodeMap * getEntities(void) const
    public: virtual void * getFeature(char16_t const *, char16_t const *) const
    public: virtual class xercesc_3_2::DOMNode * getFirstChild(void) const
    public: virtual char16_t const * getInternalSubset(void) const
    public: virtual class xercesc_3_2::DOMNode * getLastChild(void) const
    public: virtual char16_t const * getLocalName(void) const
    public: virtual char16_t const * getName(void) const
    public: virtual char16_t const * getNamespaceURI(void) const
    public: virtual class xercesc_3_2::DOMNode * getNextSibling(void) const
    public: virtual class xercesc_3_2::DOMNodeImpl * getNodeImpl(void)
    public: virtual class xercesc_3_2::DOMNodeImpl const * getNodeImpl(void) const
    public: virtual char16_t const * getNodeName(void) const
    public: virtual enum xercesc_3_2::DOMNode::NodeType getNodeType(void) const
    public: virtual char16_t const * getNodeValue(void) const
    public: virtual class xercesc_3_2::DOMNamedNodeMap * getNotations(void) const
    public: virtual class xercesc_3_2::DOMDocument * getOwnerDocument(void) const
    public: virtual class xercesc_3_2::DOMNode * getParentNode(void) const
    public: virtual class xercesc_3_2::DOMParentNode * getParentNodeImpl(void)
    public: virtual class xercesc_3_2::DOMParentNode const * getParentNodeImpl(void) const
    public: virtual char16_t const * getPrefix(void) const
    public: virtual class xercesc_3_2::DOMNode * getPreviousSibling(void) const
    public: virtual char16_t const * getPublicId(void) const
    public: virtual char16_t const * getSystemId(void) const
    public: virtual char16_t const * getTextContent(void) const
    public: virtual void * getUserData(char16_t const *) const
    public: virtual bool hasAttributes(void) const
    public: virtual bool hasChildNodes(void) const
    public: virtual class xercesc_3_2::DOMNode * insertBefore(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *)
    public: virtual bool isDefaultNamespace(char16_t const *) const
    public: virtual bool isEqualNode(class xercesc_3_2::DOMNode const *) const
    public: virtual bool isSameNode(class xercesc_3_2::DOMNode const *) const
    public: virtual bool isSupported(char16_t const *, char16_t const *) const
    public: virtual char16_t const * lookupNamespaceURI(char16_t const *) const
    public: virtual char16_t const * lookupPrefix(char16_t const *) const
    public: virtual void normalize(void)
    public: virtual void release(void)
    public: virtual class xercesc_3_2::DOMNode * removeChild(class xercesc_3_2::DOMNode *)
    public: virtual class xercesc_3_2::DOMNode * replaceChild(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *)
    protected: virtual void setInternalSubset(char16_t const *)
    public: virtual void setNodeValue(char16_t const *)
    public: virtual void setOwnerDocument(class xercesc_3_2::DOMDocument *)
    public: virtual void setPrefix(char16_t const *)
    protected: virtual void setPublicId(char16_t const *)
    public: virtual void setReadOnly(bool, bool)
    protected: virtual void setSystemId(char16_t const *)
    public: virtual void setTextContent(char16_t const *)
    public: virtual void * setUserData(char16_t const *, void *, class xercesc_3_2::DOMUserDataHandler *)
#endif

    // VFTable. Offset=0, Size=51, Start=0
    // Corresponding base: xercesc_3_2::DOMDocumentType
    // Owner: SophisXML.dll
    // Added virtual functions:
    public: virtual ~DOMDocumentTypeImpl(void); // 0
    public: virtual char16_t const * getNodeName(void) const; // 1
    public: virtual char16_t const * getNodeValue(void) const; // 2
    public: virtual enum xercesc_3_2::DOMNode::NodeType getNodeType(void) const; // 3
    public: virtual class xercesc_3_2::DOMNode * getParentNode(void) const; // 4
    public: virtual class xercesc_3_2::DOMNodeList * getChildNodes(void) const; // 5
    public: virtual class xercesc_3_2::DOMNode * getFirstChild(void) const; // 6
    public: virtual class xercesc_3_2::DOMNode * getLastChild(void) const; // 7
    public: virtual class xercesc_3_2::DOMNode * getPreviousSibling(void) const; // 8
    public: virtual class xercesc_3_2::DOMNode * getNextSibling(void) const; // 9
    public: virtual class xercesc_3_2::DOMNamedNodeMap * getAttributes(void) const; // 10
    public: virtual class xercesc_3_2::DOMDocument * getOwnerDocument(void) const; // 11
    public: virtual class xercesc_3_2::DOMNode * cloneNode(bool) const; // 12
    public: virtual class xercesc_3_2::DOMNode * insertBefore(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *); // 13
    public: virtual class xercesc_3_2::DOMNode * replaceChild(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *); // 14
    public: virtual class xercesc_3_2::DOMNode * removeChild(class xercesc_3_2::DOMNode *); // 15
    public: virtual class xercesc_3_2::DOMNode * appendChild(class xercesc_3_2::DOMNode *); // 16
    public: virtual bool hasChildNodes(void) const; // 17
    public: virtual void setNodeValue(char16_t const *); // 18
    public: virtual void normalize(void); // 19
    public: virtual bool isSupported(char16_t const *, char16_t const *) const; // 20
    public: virtual char16_t const * getNamespaceURI(void) const; // 21
    public: virtual char16_t const * getPrefix(void) const; // 22
    public: virtual char16_t const * getLocalName(void) const; // 23
    public: virtual void setPrefix(char16_t const *); // 24
    public: virtual bool hasAttributes(void) const; // 25
    public: virtual bool isSameNode(class xercesc_3_2::DOMNode const *) const; // 26
    public: virtual bool isEqualNode(class xercesc_3_2::DOMNode const *) const; // 27
    public: virtual void * setUserData(char16_t const *, void *, class xercesc_3_2::DOMUserDataHandler *); // 28
    public: virtual void * getUserData(char16_t const *) const; // 29
    public: virtual char16_t const * getBaseURI(void) const; // 30
    public: virtual short compareDocumentPosition(class xercesc_3_2::DOMNode const *) const; // 31
    public: virtual char16_t const * getTextContent(void) const; // 32
    public: virtual void setTextContent(char16_t const *); // 33
    public: virtual char16_t const * lookupPrefix(char16_t const *) const; // 34
    public: virtual bool isDefaultNamespace(char16_t const *) const; // 35
    public: virtual char16_t const * lookupNamespaceURI(char16_t const *) const; // 36
    public: virtual void * getFeature(char16_t const *, char16_t const *) const; // 37
    public: virtual void release(void); // 38
    public: virtual char16_t const * getName(void) const; // 39
    public: virtual class xercesc_3_2::DOMNamedNodeMap * getEntities(void) const; // 40
    public: virtual class xercesc_3_2::DOMNamedNodeMap * getNotations(void) const; // 41
    public: virtual char16_t const * getPublicId(void) const; // 42
    public: virtual char16_t const * getSystemId(void) const; // 43
    public: virtual char16_t const * getInternalSubset(void) const; // 44
    protected: virtual void setPublicId(char16_t const *); // 45
    protected: virtual void setSystemId(char16_t const *); // 46
    protected: virtual void setInternalSubset(char16_t const *); // 47
    public: virtual void setOwnerDocument(class xercesc_3_2::DOMDocument *); // 48
    public: virtual class xercesc_3_2::DOMNamedNodeMap * getElements(void) const; // 49
    public: virtual void setReadOnly(bool, bool); // 50
    // VFTable with 0 offset end

    // VFTable. Offset=8, Size=3, Start=3
    // Corresponding base: xercesc_3_2::HasDOMNodeImpl
    // Owner: SophisXML.dll
    // public: virtual ~DOMDocumentTypeImpl(void); // 0
    // Overrides:
    public: virtual class xercesc_3_2::DOMNodeImpl const * getNodeImpl(void) const override; // 1
    public: virtual class xercesc_3_2::DOMNodeImpl * getNodeImpl(void) override; // 2
    // VFTable with 8 offset end

    // VFTable. Offset=16, Size=3, Start=3
    // Corresponding base: xercesc_3_2::HasDOMParentImpl
    // Owner: SophisXML.dll
    // public: virtual ~DOMDocumentTypeImpl(void); // 0
    // Overrides:
    public: virtual class xercesc_3_2::DOMParentNode const * getParentNodeImpl(void) const override; // 1
    public: virtual class xercesc_3_2::DOMParentNode * getParentNodeImpl(void) override; // 2
    // VFTable with 16 offset end

    // VFTable. Offset=24, Size=3, Start=3
    // Corresponding base: xercesc_3_2::HasDOMChildImpl
    // Owner: SophisXML.dll
    // public: virtual ~DOMDocumentTypeImpl(void); // 0
    // Overrides:
    public: virtual class xercesc_3_2::DOMChildNode const * getChildNodeImpl(void) const override; // 1
    public: virtual class xercesc_3_2::DOMChildNode * getChildNodeImpl(void) override; // 2
    // VFTable with 24 offset end

  public:
  };

  class DOMElement
  {
  public:
  };

  class DOMEntity
  {
  public:
  };

  class DOMEntityReference
  {
  public:
  };

  class DOMError
  {
  public:
  };

  class/*or struct*/ DOMErrorHandler
  {
    // Functions:
    protected: DOMErrorHandler(void)
#if 0 // All found virtual functions names:
    public: virtual ~DOMErrorHandler(void)
#endif

    // VFTable. Offset=0, Size=0, Start=0
    // VFTable with 0 offset end

  public:
  };

  class DOMException
  {
    // Functions:
    public: DOMException(class xercesc_3_2::DOMException const &)
    public: DOMException(short, short, class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
    public: virtual ~DOMException(void)
#endif

  public:
  };

  class DOMImplementation : public DOMImplementationLS
  {
    // Functions:
    protected: DOMImplementation(void)
#if 0 // All found virtual functions names:
    public: virtual ~DOMImplementation(void)
#endif

  public:
  };

  class DOMImplementationLS
  {
  public:
  };

  class/*or struct*/ DOMImplementationRegistry
  {
    // Static functions:
    public: static void addSource(class xercesc_3_2::DOMImplementationSource *)
    public: static class xercesc_3_2::DOMImplementation * getDOMImplementation(char16_t const *)
  public:
  };

  class DOMImplementationSource
  {
    // Functions:
    protected: DOMImplementationSource(void)
#if 0 // All found virtual functions names:
    public: virtual ~DOMImplementationSource(void)
#endif

    // VFTable. Offset=0, Size=3, Start=0
    // Added virtual functions:
    public: virtual ~DOMImplementationSource(void); // 0
    public: virtual void unknown_vf_0_1(void); // 1
    public: virtual void unknown_vf_0_2(void); // 2
    // VFTable with 0 offset end

  public:
  };

  class DOMLSInput
  {
  public:
  };

  class DOMLSOutput
  {
    // VFTable. Offset=0, Size=0, Start=0
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ DOMLSOutputImpl : public XMemory, public DOMLSOutput
  {
    // Functions:
    public: DOMLSOutputImpl(class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
    public: virtual ~DOMLSOutputImpl(void)
    public: virtual class xercesc_3_2::XMLFormatTarget * getByteStream(void) const
    public: virtual char16_t const * getEncoding(void) const
    public: virtual char16_t const * getSystemId(void) const
    public: virtual void release(void)
    public: virtual void setByteStream(class xercesc_3_2::XMLFormatTarget *)
    public: virtual void setEncoding(char16_t const *const)
    public: virtual void setSystemId(char16_t const *const)
#endif

    // VFTable. Offset=0, Size=8, Start=0
    // Corresponding base: xercesc_3_2::DOMLSOutput
    // Owner: SophisXML.dll
    // Added virtual functions:
    public: virtual ~DOMLSOutputImpl(void); // 0
    public: virtual class xercesc_3_2::XMLFormatTarget * getByteStream(void) const; // 1
    public: virtual char16_t const * getEncoding(void) const; // 2
    public: virtual char16_t const * getSystemId(void) const; // 3
    public: virtual void setByteStream(class xercesc_3_2::XMLFormatTarget *); // 4
    public: virtual void setEncoding(char16_t const *const); // 5
    public: virtual void setSystemId(char16_t const *const); // 6
    public: virtual void release(void); // 7
    // VFTable with 0 offset end

  public:
  };

  class DOMLSParser
  {
  public:
    // Enumerations:
    enum ActionType : int {
    };

    // VFTable. Offset=0, Size=21, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual class xercesc_3_2::DOMConfiguration * getDomConfig(void); // 1 (xercesc_3_2::DOMLSParserImpl)
    public: virtual class xercesc_3_2::DOMLSParserFilter const * getFilter(void) const; // 2 (xercesc_3_2::DOMLSParserImpl)
    public: virtual bool getAsync(void) const; // 3 (xercesc_3_2::DOMLSParserImpl)
    public: virtual bool getBusy(void) const; // 4 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void setFilter(class xercesc_3_2::DOMLSParserFilter *const); // 5 (xercesc_3_2::DOMLSParserImpl)
    public: virtual class xercesc_3_2::DOMDocument * parse(class xercesc_3_2::DOMLSInput const *); // 6 (xercesc_3_2::DOMLSParserImpl)
    public: virtual class xercesc_3_2::DOMDocument * parseURI(char const *const); // 7 (xercesc_3_2::DOMLSParserImpl)
    public: virtual class xercesc_3_2::DOMDocument * parseURI(char16_t const *const); // 8 (xercesc_3_2::DOMLSParserImpl)
    public: virtual class xercesc_3_2::DOMNode * parseWithContext(class xercesc_3_2::DOMLSInput const *, class xercesc_3_2::DOMNode *, enum xercesc_3_2::DOMLSParser::ActionType); // 9 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void abort(void); // 10 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void release(void); // 11 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void resetDocumentPool(void); // 12 (xercesc_3_2::DOMLSParserImpl)
    public: virtual class xercesc_3_2::Grammar * loadGrammar(char const *const, enum xercesc_3_2::Grammar::GrammarType, bool); // 13 (xercesc_3_2::DOMLSParserImpl)
    public: virtual class xercesc_3_2::Grammar * loadGrammar(char16_t const *const, enum xercesc_3_2::Grammar::GrammarType, bool); // 14 (xercesc_3_2::DOMLSParserImpl)
    public: virtual class xercesc_3_2::Grammar * loadGrammar(class xercesc_3_2::DOMLSInput const *, enum xercesc_3_2::Grammar::GrammarType, bool); // 15 (xercesc_3_2::DOMLSParserImpl)
    public: virtual class xercesc_3_2::Grammar * getGrammar(char16_t const *const) const; // 16 (xercesc_3_2::DOMLSParserImpl)
    public: virtual class xercesc_3_2::Grammar * getRootGrammar(void) const; // 17 (xercesc_3_2::DOMLSParserImpl)
    public: virtual char16_t const * getURIText(unsigned int) const; // 18 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void resetCachedGrammarPool(void); // 19 (xercesc_3_2::DOMLSParserImpl)
    public: virtual unsigned __int64 getSrcOffset(void) const; // 20 (xercesc_3_2::DOMLSParserImpl)
    // VFTable with 0 offset end

  public:
  };

  class DOMLSParserFilter
  {
  public:
  };

  class/*or struct*/ DOMLSParserImpl : public AbstractDOMParser, public DOMLSParser, public DOMConfiguration
  {
    // Functions:
    public: DOMLSParserImpl(class xercesc_3_2::XMLValidator *const, class xercesc_3_2::MemoryManager *const, class xercesc_3_2::XMLGrammarPool *const)
#if 0 // All found virtual functions names:
    public: virtual ~DOMLSParserImpl(void)
    public: virtual void XMLDecl(char16_t const *const, char16_t const *const, char16_t const *const, char16_t const *const)
    public: virtual void abort(void)
    public: virtual bool canSetParameter(char16_t const *, void const *) const
    public: virtual bool canSetParameter(char16_t const *, bool) const
    public: virtual void docCharacters(char16_t const *const, unsigned __int64, bool)
    public: virtual void docComment(char16_t const *const)
    public: virtual void docPI(char16_t const *const, char16_t const *const)
    public: virtual void endElement(class xercesc_3_2::XMLElementDecl const &, unsigned int, bool, char16_t const *const)
    public: virtual void endInputSource(class xercesc_3_2::InputSource const &)
    public: virtual void error(unsigned int, char16_t const *const, enum xercesc_3_2::XMLErrorReporter::ErrTypes, char16_t const *const, char16_t const *const, char16_t const *const, unsigned __int64, unsigned __int64)
    public: virtual bool expandSystemId(char16_t const *const, class xercesc_3_2::XMLBuffer &)
    public: virtual bool getAsync(void) const
    public: virtual bool getBusy(void) const
    public: virtual class xercesc_3_2::DOMConfiguration * getDomConfig(void)
    public: virtual class xercesc_3_2::DOMLSParserFilter const * getFilter(void) const
    public: virtual class xercesc_3_2::Grammar * getGrammar(char16_t const *const) const
    public: virtual void const * getParameter(char16_t const *) const
    public: virtual class xercesc_3_2::DOMStringList const * getParameterNames(void) const
    public: virtual class xercesc_3_2::Grammar * getRootGrammar(void) const
    public: virtual unsigned __int64 getSrcOffset(void) const
    public: virtual char16_t const * getURIText(unsigned int) const
    public: virtual class xercesc_3_2::Grammar * loadGrammar(class xercesc_3_2::DOMLSInput const *, enum xercesc_3_2::Grammar::GrammarType, bool)
    public: virtual class xercesc_3_2::Grammar * loadGrammar(char const *const, enum xercesc_3_2::Grammar::GrammarType, bool)
    public: virtual class xercesc_3_2::Grammar * loadGrammar(char16_t const *const, enum xercesc_3_2::Grammar::GrammarType, bool)
    public: virtual class xercesc_3_2::DOMDocument * parse(class xercesc_3_2::DOMLSInput const *)
    public: virtual class xercesc_3_2::DOMDocument * parseURI(char const *const)
    public: virtual class xercesc_3_2::DOMDocument * parseURI(char16_t const *const)
    public: virtual class xercesc_3_2::DOMNode * parseWithContext(class xercesc_3_2::DOMLSInput const *, class xercesc_3_2::DOMNode *, enum xercesc_3_2::DOMLSParser::ActionType)
    public: virtual void release(void)
    public: virtual void resetCachedGrammarPool(void)
    public: virtual void resetDocumentPool(void)
    public: virtual void resetEntities(void)
    public: virtual void resetErrors(void)
    public: virtual class xercesc_3_2::InputSource * resolveEntity(class xercesc_3_2::XMLResourceIdentifier *)
    public: virtual void setFilter(class xercesc_3_2::DOMLSParserFilter *const)
    public: virtual void setParameter(char16_t const *, void const *)
    public: virtual void setParameter(char16_t const *, bool)
    public: virtual void startDocument(void)
    public: virtual void startElement(class xercesc_3_2::XMLElementDecl const &, unsigned int, char16_t const *const, class xercesc_3_2::RefVectorOf<class xercesc_3_2::XMLAttr> const &, unsigned __int64, bool, bool)
    public: virtual void startEntityReference(class xercesc_3_2::XMLEntityDecl const &)
    public: virtual void startInputSource(class xercesc_3_2::InputSource const &)
#endif

    // Warning: Greater base vftable size!
    // VFTable. Offset=0, Size=13, Start=20
    // Corresponding base: xercesc_3_2::AbstractDOMParser
    // public: virtual ~DOMLSParserImpl(void); // 0
    // Overrides:
    public: virtual void docCharacters(char16_t const *const, unsigned __int64, bool) override; // 1
    public: virtual void docComment(char16_t const *const) override; // 2
    public: virtual void docPI(char16_t const *const, char16_t const *const) override; // 3
    public: virtual void endElement(class xercesc_3_2::XMLElementDecl const &, unsigned int, bool, char16_t const *const) override; // 5
    public: virtual void startDocument(void) override; // 9
    public: virtual void startElement(class xercesc_3_2::XMLElementDecl const &, unsigned int, char16_t const *const, class xercesc_3_2::RefVectorOf<class xercesc_3_2::XMLAttr> const &, unsigned __int64, bool, bool) override; // 10
    public: virtual void startEntityReference(class xercesc_3_2::XMLEntityDecl const &) override; // 11
    public: virtual void XMLDecl(char16_t const *const, char16_t const *const, char16_t const *const, char16_t const *const) override; // 12
    // VFTable with 0 offset end

    // VFTable. Offset=8, Size=3, Start=3
    // Corresponding base: xercesc_3_2::XMLErrorReporter
    // public: virtual ~DOMLSParserImpl(void); // 0
    // Overrides:
    public: virtual void error(unsigned int, char16_t const *const, enum xercesc_3_2::XMLErrorReporter::ErrTypes, char16_t const *const, char16_t const *const, char16_t const *const, unsigned __int64, unsigned __int64) override; // 1
    public: virtual void resetErrors(void) override; // 2
    // VFTable with 8 offset end

    // VFTable. Offset=16, Size=6, Start=6
    // Corresponding base: xercesc_3_2::XMLEntityHandler
    // public: virtual ~DOMLSParserImpl(void); // 0
    // Overrides:
    public: virtual void endInputSource(class xercesc_3_2::InputSource const &) override; // 1
    public: virtual bool expandSystemId(char16_t const *const, class xercesc_3_2::XMLBuffer &) override; // 2
    public: virtual void resetEntities(void) override; // 3
    public: virtual class xercesc_3_2::InputSource * resolveEntity(class xercesc_3_2::XMLResourceIdentifier *) override; // 4
    public: virtual void startInputSource(class xercesc_3_2::InputSource const &) override; // 5
    // VFTable with 16 offset end

    // VFTable. Offset=192, Size=21, Start=21
    // Corresponding base: xercesc_3_2::DOMLSParser
    // public: virtual ~DOMLSParserImpl(void); // 0
    // Overrides:
    public: virtual class xercesc_3_2::DOMConfiguration * getDomConfig(void) override; // 1
    public: virtual class xercesc_3_2::DOMLSParserFilter const * getFilter(void) const override; // 2
    public: virtual bool getAsync(void) const override; // 3
    public: virtual bool getBusy(void) const override; // 4
    public: virtual void setFilter(class xercesc_3_2::DOMLSParserFilter *const) override; // 5
    public: virtual class xercesc_3_2::DOMDocument * parse(class xercesc_3_2::DOMLSInput const *) override; // 6
    public: virtual class xercesc_3_2::DOMDocument * parseURI(char const *const) override; // 7
    public: virtual class xercesc_3_2::DOMDocument * parseURI(char16_t const *const) override; // 8
    public: virtual class xercesc_3_2::DOMNode * parseWithContext(class xercesc_3_2::DOMLSInput const *, class xercesc_3_2::DOMNode *, enum xercesc_3_2::DOMLSParser::ActionType) override; // 9
    public: virtual void abort(void) override; // 10
    public: virtual void release(void) override; // 11
    public: virtual void resetDocumentPool(void) override; // 12
    public: virtual class xercesc_3_2::Grammar * loadGrammar(char const *const, enum xercesc_3_2::Grammar::GrammarType, bool) override; // 13
    public: virtual class xercesc_3_2::Grammar * loadGrammar(char16_t const *const, enum xercesc_3_2::Grammar::GrammarType, bool) override; // 14
    public: virtual class xercesc_3_2::Grammar * loadGrammar(class xercesc_3_2::DOMLSInput const *, enum xercesc_3_2::Grammar::GrammarType, bool) override; // 15
    public: virtual class xercesc_3_2::Grammar * getGrammar(char16_t const *const) const override; // 16
    public: virtual class xercesc_3_2::Grammar * getRootGrammar(void) const override; // 17
    public: virtual char16_t const * getURIText(unsigned int) const override; // 18
    public: virtual void resetCachedGrammarPool(void) override; // 19
    public: virtual unsigned __int64 getSrcOffset(void) const override; // 20
    // VFTable with 192 offset end

    // Warning: Greater base vftable size!
    // VFTable. Offset=200, Size=6, Start=7
    // Corresponding base: xercesc_3_2::DOMConfiguration
    // Overrides:
    public: virtual void setParameter(char16_t const *, bool) override; // 0
    public: virtual void setParameter(char16_t const *, void const *) override; // 1
    public: virtual void const * getParameter(char16_t const *) const override; // 2
    public: virtual bool canSetParameter(char16_t const *, bool) const override; // 3
    public: virtual bool canSetParameter(char16_t const *, void const *) const override; // 4
    public: virtual class xercesc_3_2::DOMStringList const * getParameterNames(void) const override; // 5
    // VFTable with 200 offset end

  public:
  };

  class DOMLSSerializer
  {
    // VFTable. Offset=0, Size=0, Start=0
    // VFTable with 0 offset end

  public:
  };

  class DOMLSSerializerFilter
  {
  public:
  };

  class/*or struct*/ DOMLSSerializerImpl : public XMemory, public DOMLSSerializer, public DOMConfiguration
  {
    // Functions:
    public: DOMLSSerializerImpl(class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
    public: virtual ~DOMLSSerializerImpl(void)
    public: virtual bool canSetParameter(char16_t const *, void const *) const
    public: virtual bool canSetParameter(char16_t const *, bool) const
    protected: virtual bool customNodeSerialize(class xercesc_3_2::DOMNode const *const, int)
    public: virtual class xercesc_3_2::DOMConfiguration * getDomConfig(void)
    public: virtual class xercesc_3_2::DOMLSSerializerFilter * getFilter(void) const
    public: virtual char16_t const * getNewLine(void) const
    public: virtual void const * getParameter(char16_t const *) const
    public: virtual class xercesc_3_2::DOMStringList const * getParameterNames(void) const
    public: virtual void release(void)
    public: virtual void setFilter(class xercesc_3_2::DOMLSSerializerFilter *)
    public: virtual void setNewLine(char16_t const *const)
    public: virtual void setParameter(char16_t const *, void const *)
    public: virtual void setParameter(char16_t const *, bool)
    public: virtual bool write(class xercesc_3_2::DOMNode const *, class xercesc_3_2::DOMLSOutput *const)
    public: virtual char16_t * writeToString(class xercesc_3_2::DOMNode const *, class xercesc_3_2::MemoryManager *)
    public: virtual bool writeToURI(class xercesc_3_2::DOMNode const *, char16_t const *)
#endif

    // VFTable. Offset=0, Size=11, Start=0
    // Corresponding base: xercesc_3_2::DOMLSSerializer
    // Owner: SophisXML.dll
    // Added virtual functions:
    public: virtual ~DOMLSSerializerImpl(void); // 0
    public: virtual class xercesc_3_2::DOMConfiguration * getDomConfig(void); // 1
    public: virtual void setNewLine(char16_t const *const); // 2
    public: virtual void setFilter(class xercesc_3_2::DOMLSSerializerFilter *); // 3
    public: virtual char16_t const * getNewLine(void) const; // 4
    public: virtual class xercesc_3_2::DOMLSSerializerFilter * getFilter(void) const; // 5
    public: virtual bool write(class xercesc_3_2::DOMNode const *, class xercesc_3_2::DOMLSOutput *const); // 6
    public: virtual bool writeToURI(class xercesc_3_2::DOMNode const *, char16_t const *); // 7
    public: virtual char16_t * writeToString(class xercesc_3_2::DOMNode const *, class xercesc_3_2::MemoryManager *); // 8
    public: virtual void release(void); // 9
    protected: virtual bool customNodeSerialize(class xercesc_3_2::DOMNode const *const, int); // 10
    // VFTable with 0 offset end

    // VFTable. Offset=8, Size=7, Start=7
    // Corresponding base: xercesc_3_2::DOMConfiguration
    // Owner: SophisXML.dll
    // Overrides:
    public: virtual void setParameter(char16_t const *, bool) override; // 0
    public: virtual void setParameter(char16_t const *, void const *) override; // 1
    public: virtual void const * getParameter(char16_t const *) const override; // 2
    public: virtual bool canSetParameter(char16_t const *, bool) const override; // 3
    public: virtual bool canSetParameter(char16_t const *, void const *) const override; // 4
    public: virtual class xercesc_3_2::DOMStringList const * getParameterNames(void) const override; // 5
    // VFTable with 8 offset end

  public:
  };

  class/*or struct*/ DOMMemoryManager
  {
  public:
    // Enumerations:
    enum NodeObjectType : int {
    };

    // VFTable. Offset=0, Size=0, Start=0
    // VFTable with 0 offset end

  public:
  };

  class DOMNamedNodeMap
  {
  public:
  };

  class DOMNode
  {
  public:
    // Enumerations:
    enum NodeType : int {
    };

    // VFTable. Offset=0, Size=39, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual char16_t const * getNodeName(void) const; // 1 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual char16_t const * getNodeValue(void) const; // 2 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual enum xercesc_3_2::DOMNode::NodeType getNodeType(void) const; // 3 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNode * getParentNode(void) const; // 4 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNodeList * getChildNodes(void) const; // 5 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNode * getFirstChild(void) const; // 6 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNode * getLastChild(void) const; // 7 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNode * getPreviousSibling(void) const; // 8 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNode * getNextSibling(void) const; // 9 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNamedNodeMap * getAttributes(void) const; // 10 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMDocument * getOwnerDocument(void) const; // 11 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNode * cloneNode(bool) const; // 12 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNode * insertBefore(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *); // 13 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNode * replaceChild(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *); // 14 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNode * removeChild(class xercesc_3_2::DOMNode *); // 15 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNode * appendChild(class xercesc_3_2::DOMNode *); // 16 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual bool hasChildNodes(void) const; // 17 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual void setNodeValue(char16_t const *); // 18 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual void normalize(void); // 19 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual bool isSupported(char16_t const *, char16_t const *) const; // 20 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual char16_t const * getNamespaceURI(void) const; // 21 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual char16_t const * getPrefix(void) const; // 22 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual char16_t const * getLocalName(void) const; // 23 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual void setPrefix(char16_t const *); // 24 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual bool hasAttributes(void) const; // 25 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual bool isSameNode(class xercesc_3_2::DOMNode const *) const; // 26 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual bool isEqualNode(class xercesc_3_2::DOMNode const *) const; // 27 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual void * setUserData(char16_t const *, void *, class xercesc_3_2::DOMUserDataHandler *); // 28 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual void * getUserData(char16_t const *) const; // 29 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual char16_t const * getBaseURI(void) const; // 30 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual short compareDocumentPosition(class xercesc_3_2::DOMNode const *) const; // 31 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual char16_t const * getTextContent(void) const; // 32 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual void setTextContent(char16_t const *); // 33 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual char16_t const * lookupPrefix(char16_t const *) const; // 34 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual bool isDefaultNamespace(char16_t const *) const; // 35 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual char16_t const * lookupNamespaceURI(char16_t const *) const; // 36 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual void * getFeature(char16_t const *, char16_t const *) const; // 37 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual void release(void); // 38 (xercesc_3_2::DOMDocumentTypeImpl)
    // VFTable with 0 offset end

  public:
  };

  class DOMNodeFilter
  {
  public:
  };

  class DOMNodeImpl
  {
  public:
  };

  class DOMNodeIterator
  {
  public:
  };

  class DOMNodeIteratorImpl
  {
  public:
  };

  class DOMNodeList
  {
  public:
  };

  class DOMNotation
  {
  public:
  };

  class/*or struct*/ DOMPSVITypeInfo
  {
  public:
    // Enumerations:
    enum PSVIProperty : int {
    };

    // VFTable. Offset=0, Size=3, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual char16_t const * getStringProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty) const; // 1 (xercesc_3_2::DOMTypeInfoImpl)
    public: virtual int getNumericProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty) const; // 2 (xercesc_3_2::DOMTypeInfoImpl)
    // VFTable with 0 offset end

  public:
  };

  class DOMParentNode
  {
  public:
  };

  class DOMProcessingInstruction
  {
  public:
  };

  class DOMRange
  {
  public:
  };

  class DOMRangeImpl
  {
  public:
  };

  class DOMStringList
  {
  public:
  };

  class DOMText
  {
  public:
  };

  class DOMTreeWalker
  {
  public:
  };

  class/*or struct*/ DOMTypeInfo
  {
  public:
    // Enumerations:
    enum DerivationMethods : int {
    };

    // VFTable. Offset=0, Size=0, Start=0
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ DOMTypeInfoImpl : public DOMTypeInfo, public DOMPSVITypeInfo
  {
    // Functions:
    public: DOMTypeInfoImpl(char16_t const *, char16_t const *)
#if 0 // All found virtual functions names:
    public: virtual ~DOMTypeInfoImpl(void)
    public: virtual int getNumericProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty) const
    public: virtual char16_t const * getStringProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty) const
    public: virtual char16_t const * getTypeName(void) const
    public: virtual char16_t const * getTypeNamespace(void) const
    public: virtual bool isDerivedFrom(char16_t const *, char16_t const *, enum xercesc_3_2::DOMTypeInfo::DerivationMethods) const
    public: virtual void setNumericProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty, int)
    public: virtual void setStringProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty, char16_t const *)
#endif

    // VFTable. Offset=0, Size=6, Start=0
    // Corresponding base: xercesc_3_2::DOMTypeInfo
    // Owner: SophisXML.dll
    // Added virtual functions:
    public: virtual ~DOMTypeInfoImpl(void); // 0
    public: virtual char16_t const * getTypeName(void) const; // 1
    public: virtual char16_t const * getTypeNamespace(void) const; // 2
    public: virtual bool isDerivedFrom(char16_t const *, char16_t const *, enum xercesc_3_2::DOMTypeInfo::DerivationMethods) const; // 3
    public: virtual void setStringProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty, char16_t const *); // 4
    public: virtual void setNumericProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty, int); // 5
    // VFTable with 0 offset end

    // VFTable. Offset=8, Size=3, Start=3
    // Corresponding base: xercesc_3_2::DOMPSVITypeInfo
    // Owner: SophisXML.dll
    // public: virtual ~DOMTypeInfoImpl(void); // 0
    // Overrides:
    public: virtual char16_t const * getStringProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty) const override; // 1
    public: virtual int getNumericProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty) const override; // 2
    // VFTable with 8 offset end

  public:
  };

  class DOMUserDataHandler
  {
  public:
  };

  class/*or struct*/ DOMXPathEvaluator
  {
    // VFTable. Offset=0, Size=4, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual class xercesc_3_2::DOMXPathExpression * createExpression(char16_t const *, class xercesc_3_2::DOMXPathNSResolver const *); // 1 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMXPathNSResolver * createNSResolver(class xercesc_3_2::DOMNode const *); // 2 (xercesc_3_2::DOMDocumentImpl)
    public: virtual class xercesc_3_2::DOMXPathResult * evaluate(char16_t const *, class xercesc_3_2::DOMNode const *, class xercesc_3_2::DOMXPathNSResolver const *, enum xercesc_3_2::DOMXPathResult::ResultType, class xercesc_3_2::DOMXPathResult *); // 3 (xercesc_3_2::DOMDocumentImpl)
    // VFTable with 0 offset end

  public:
  };

  class DOMXPathExpression
  {
  public:
  };

  class DOMXPathNSResolver
  {
  public:
  };

  class DOMXPathResult
  {
  public:
    // Enumerations:
    enum ResultType : int {
    };

  public:
  };

  class DTDAttDef
  {
  public:
  };

  class DTDElementDecl
  {
  public:
  };

  class DTDEntityDecl
  {
  public:
  };

  class DTDGrammar
  {
  public:
  };

  class DatatypeValidator
  {
    // Functions:
    public: char16_t const * getTypeLocalName(void) const
    public: char16_t const * getTypeName(void) const
  public:
  };

  class/*or struct*/ DocTypeHandler
  {
    // VFTable. Offset=0, Size=17, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void attDef(class xercesc_3_2::DTDElementDecl const &, class xercesc_3_2::DTDAttDef const &, bool); // 1 (xercesc_3_2::AbstractDOMParser)
    public: virtual void doctypeComment(char16_t const *const); // 2 (xercesc_3_2::AbstractDOMParser)
    public: virtual void doctypeDecl(class xercesc_3_2::DTDElementDecl const &, char16_t const *const, char16_t const *const, bool, bool); // 3 (xercesc_3_2::AbstractDOMParser)
    public: virtual void doctypePI(char16_t const *const, char16_t const *const); // 4 (xercesc_3_2::AbstractDOMParser)
    public: virtual void doctypeWhitespace(char16_t const *const, unsigned __int64); // 5 (xercesc_3_2::AbstractDOMParser)
    public: virtual void elementDecl(class xercesc_3_2::DTDElementDecl const &, bool); // 6 (xercesc_3_2::AbstractDOMParser)
    public: virtual void endAttList(class xercesc_3_2::DTDElementDecl const &); // 7 (xercesc_3_2::AbstractDOMParser)
    public: virtual void endIntSubset(void); // 8 (xercesc_3_2::AbstractDOMParser)
    public: virtual void endExtSubset(void); // 9 (xercesc_3_2::AbstractDOMParser)
    public: virtual void entityDecl(class xercesc_3_2::DTDEntityDecl const &, bool, bool); // 10 (xercesc_3_2::AbstractDOMParser)
    public: virtual void resetDocType(void); // 11 (xercesc_3_2::AbstractDOMParser)
    public: virtual void notationDecl(class xercesc_3_2::XMLNotationDecl const &, bool); // 12 (xercesc_3_2::AbstractDOMParser)
    public: virtual void startAttList(class xercesc_3_2::DTDElementDecl const &); // 13 (xercesc_3_2::AbstractDOMParser)
    public: virtual void startIntSubset(void); // 14 (xercesc_3_2::AbstractDOMParser)
    public: virtual void startExtSubset(void); // 15 (xercesc_3_2::AbstractDOMParser)
    public: virtual void TextDecl(char16_t const *const, char16_t const *const); // 16 (xercesc_3_2::AbstractDOMParser)
    // VFTable with 0 offset end

  public:
  };

  class Grammar
  {
  public:
    // Enumerations:
    enum GrammarType : int {
    };

  public:
  };

  class/*or struct*/ HasDOMChildImpl
  {
    // VFTable. Offset=0, Size=3, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual class xercesc_3_2::DOMChildNode const * getChildNodeImpl(void) const; // 1 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMChildNode * getChildNodeImpl(void); // 2 (xercesc_3_2::DOMDocumentTypeImpl)
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ HasDOMNodeImpl
  {
    // VFTable. Offset=0, Size=3, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual class xercesc_3_2::DOMNodeImpl const * getNodeImpl(void) const; // 1 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMNodeImpl * getNodeImpl(void); // 2 (xercesc_3_2::DOMDocumentTypeImpl)
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ HasDOMParentImpl
  {
    // VFTable. Offset=0, Size=3, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual class xercesc_3_2::DOMParentNode const * getParentNodeImpl(void) const; // 1 (xercesc_3_2::DOMDocumentTypeImpl)
    public: virtual class xercesc_3_2::DOMParentNode * getParentNodeImpl(void); // 2 (xercesc_3_2::DOMDocumentTypeImpl)
    // VFTable with 0 offset end

  public:
  };

  class InputSource : public XMemory
  {
    // Functions:
    protected: InputSource(class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
    public: virtual ~InputSource(void)
    public: virtual char16_t const * getEncoding(void) const
    public: virtual bool getIssueFatalErrorIfNotFound(void) const
    public: virtual char16_t const * getPublicId(void) const
    public: virtual char16_t const * getSystemId(void) const
    public: virtual void setEncoding(char16_t const *const)
    public: virtual void setIssueFatalErrorIfNotFound(bool)
    public: virtual void setPublicId(char16_t const *const)
    public: virtual void setSystemId(char16_t const *const)
#endif

    // VFTable. Offset=0, Size=10, Start=0
    // Added virtual functions:
    public: virtual ~InputSource(void); // 0
    public: virtual class xercesc_3_2::BinInputStream * makeStream(void) const; // 1 (xercesc_3_2::MemBufInputSource)
    public: virtual char16_t const * getEncoding(void) const; // 2
    public: virtual char16_t const * getPublicId(void) const; // 3
    public: virtual char16_t const * getSystemId(void) const; // 4
    public: virtual bool getIssueFatalErrorIfNotFound(void) const; // 5
    public: virtual void setEncoding(char16_t const *const); // 6
    public: virtual void setPublicId(char16_t const *const); // 7
    public: virtual void setSystemId(char16_t const *const); // 8
    public: virtual void setIssueFatalErrorIfNotFound(bool); // 9
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ MemBufInputSource : public InputSource
  {
    // Functions:
    public: MemBufInputSource(unsigned char const *const, unsigned __int64, char const *const, bool, class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
    public: virtual ~MemBufInputSource(void)
    public: virtual class xercesc_3_2::BinInputStream * makeStream(void) const
#endif

    // VFTable. Offset=0, Size=10, Start=10
    // Corresponding base: xercesc_3_2::InputSource
    // Owner: SophisXML.dll
    // public: virtual ~MemBufInputSource(void); // 0
    // Overrides:
    public: virtual class xercesc_3_2::BinInputStream * makeStream(void) const override; // 1
    // VFTable with 0 offset end

  public:
  };

  class MemoryManager
  {
    // Functions:
    protected: MemoryManager(void)
#if 0 // All found virtual functions names:
    public: virtual ~MemoryManager(void)
#endif

    // VFTable. Offset=0, Size=0, Start=0
    // VFTable with 0 offset end

  public:
  };

  class NoSuchElementException
  {
    // Functions:
    public: NoSuchElementException(class xercesc_3_2::NoSuchElementException const &)
    public: NoSuchElementException(char const *const, unsigned __int64, enum xercesc_3_2::XMLExcepts::Codes, class xercesc_3_2::MemoryManager *)
#if 0 // All found virtual functions names:
    public: virtual ~NoSuchElementException(void)
#endif

  public:
  };

  class NullPointerException
  {
    // Functions:
    public: NullPointerException(class xercesc_3_2::NullPointerException const &)
    public: NullPointerException(char const *const, unsigned __int64, enum xercesc_3_2::XMLExcepts::Codes, class xercesc_3_2::MemoryManager *)
#if 0 // All found virtual functions names:
    public: virtual ~NullPointerException(void)
#endif

  public:
  };

  class/*or struct*/ OutOfMemoryException
  {
    // Functions:
    public: char16_t const * getMessage(void) const
  public:
  };

  class PSVIAttributeList
  {
  public:
  };

  class PSVIElement
  {
  public:
  };

  class PSVIHandler
  {
    // VFTable. Offset=0, Size=4, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void handleElementPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIElement *); // 1 (xercesc_3_2::AbstractDOMParser)
    public: virtual void handlePartialElementPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIElement *); // 2 (xercesc_3_2::AbstractDOMParser)
    public: virtual void handleAttributesPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIAttributeList *); // 3 (xercesc_3_2::AbstractDOMParser)
    // VFTable with 0 offset end

  public:
  };

  class PanicHandler
  {
  public:
  };

  class QName
  {
    // Functions:
    public: char16_t * getLocalPart(void)
    public: unsigned int getURI(void) const
  public:
  };

  template<typename T0, typename T2  >
  class/*or struct*/ RefHash2KeysTableOfEnumerator
  {
  public:
  };
#if 0 // Instances:
// <class xercesc_3_2::ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>, struct xercesc_3_2::StringHasher>
#if 0
  template<>
  class/*or struct*/ RefHash2KeysTableOfEnumerator<class xercesc_3_2::ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>, struct xercesc_3_2::StringHasher> : public XMLEnumerator<class xercesc_3_2::ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>>, public XMemory
  {
    // VFTable. Offset=0, Size=4, Start=4
    // Corresponding base: XMLEnumerator::XMLEnumerator::XMLEnumerator<class xercesc_3_2::ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>>
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };
#endif
#endif


  template<typename T0, typename T2  >
  class RefHash3KeysIdPoolEnumerator
  {
  public:
  };
#if 0 // Instances:
// <class xercesc_3_2::SchemaElementDecl, struct xercesc_3_2::StringHasher>
#if 0
  template<>
  class RefHash3KeysIdPoolEnumerator<class xercesc_3_2::SchemaElementDecl, struct xercesc_3_2::StringHasher> : public XMLEnumerator<class xercesc_3_2::SchemaElementDecl>, public XMemory
  {
    // VFTable. Offset=0, Size=4, Start=4
    // Corresponding base: XMLEnumerator::XMLEnumerator::XMLEnumerator<class xercesc_3_2::SchemaElementDecl>
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };
#endif
#endif


  template<typename T0, typename T2  >
  class RefHashTableOfEnumerator
  {
  public:
  };
#if 0 // Instances:
// <class xercesc_3_2::ComplexTypeInfo, struct xercesc_3_2::StringHasher>
#if 0
  template<>
  class/*or struct*/ RefHashTableOfEnumerator<class xercesc_3_2::ComplexTypeInfo, struct xercesc_3_2::StringHasher> : public XMLEnumerator<class xercesc_3_2::ComplexTypeInfo>, public XMemory
  {
    // VFTable. Offset=0, Size=4, Start=4
    // Corresponding base: XMLEnumerator::XMLEnumerator::XMLEnumerator<class xercesc_3_2::ComplexTypeInfo>
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };
#endif
// <class xercesc_3_2::DatatypeValidator, struct xercesc_3_2::StringHasher>
#if 0
  template<>
  class/*or struct*/ RefHashTableOfEnumerator<class xercesc_3_2::DatatypeValidator, struct xercesc_3_2::StringHasher> : public XMLEnumerator<class xercesc_3_2::DatatypeValidator>, public XMemory
  {
    // VFTable. Offset=0, Size=4, Start=4
    // Corresponding base: XMLEnumerator::XMLEnumerator::XMLEnumerator<class xercesc_3_2::DatatypeValidator>
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };
#endif
// <class xercesc_3_2::Grammar, struct xercesc_3_2::StringHasher>
#if 0
  template<>
  class RefHashTableOfEnumerator<class xercesc_3_2::Grammar, struct xercesc_3_2::StringHasher> : public XMLEnumerator<class xercesc_3_2::Grammar>, public XMemory
  {
    // VFTable. Offset=0, Size=4, Start=4
    // Corresponding base: XMLEnumerator::XMLEnumerator::XMLEnumerator<class xercesc_3_2::Grammar>
    // Owner: SophisXML.dll
    // VFTable with 0 offset end

  public:
  };
#endif
#endif


  template<typename T1  >
  class RefVectorOf
  {
  public:
  };
#if 0 // Instances:
// <class xercesc_3_2::DOMNodeIteratorImpl>
#if 0
  template<>
  class RefVectorOf<class xercesc_3_2::DOMNodeIteratorImpl>
  {
  public:
  };
#endif
// <class xercesc_3_2::DOMRangeImpl>
#if 0
  template<>
  class RefVectorOf<class xercesc_3_2::DOMRangeImpl>
  {
  public:
  };
#endif
// <class xercesc_3_2::XMLAttr>
#if 0
  template<>
  class RefVectorOf<class xercesc_3_2::XMLAttr>
  {
  public:
  };
#endif
#endif


  class SchemaElementDecl
  {
    // Functions:
    public: class xercesc_3_2::ComplexTypeInfo * getComplexTypeInfo(void) const
  public:
  };

  class SchemaGrammar
  {
    // Functions:
    public: class xercesc_3_2::RefHash3KeysIdPoolEnumerator<class xercesc_3_2::SchemaElementDecl, struct xercesc_3_2::StringHasher> getElemEnumerator(void) const
  public:
  };

  namespace/*or class/struct?*/ SchemaSymbols
  {
    // Variables:
    public: static char16_t const *const fgATTVAL_ANYTYPE
    public: static char16_t const *const fgATT_NILL
    public: static char16_t const *const fgDT_ANYSIMPLETYPE
    public: static char16_t const *const fgDT_ANYURI
    public: static char16_t const *const fgDT_BASE64BINARY
    public: static char16_t const *const fgDT_BOOLEAN
    public: static char16_t const *const fgDT_BYTE
    public: static char16_t const *const fgDT_DATE
    public: static char16_t const *const fgDT_DATETIME
    public: static char16_t const *const fgDT_DECIMAL
    public: static char16_t const *const fgDT_DOUBLE
    public: static char16_t const *const fgDT_FLOAT
    public: static char16_t const *const fgDT_INT
    public: static char16_t const *const fgDT_INTEGER
    public: static char16_t const *const fgDT_LONG
    public: static char16_t const *const fgDT_MONTHDAY
    public: static char16_t const *const fgDT_NAME
    public: static char16_t const *const fgDT_NCNAME
    public: static char16_t const *const fgDT_NEGATIVEINTEGER
    public: static char16_t const *const fgDT_NONNEGATIVEINTEGER
    public: static char16_t const *const fgDT_NONPOSITIVEINTEGER
    public: static char16_t const *const fgDT_NORMALIZEDSTRING
    public: static char16_t const *const fgDT_POSITIVEINTEGER
    public: static char16_t const *const fgDT_QNAME
    public: static char16_t const *const fgDT_SHORT
    public: static char16_t const *const fgDT_STRING
    public: static char16_t const *const fgDT_TIME
    public: static char16_t const *const fgDT_UBYTE
    public: static char16_t const *const fgDT_UINT
    public: static char16_t const *const fgDT_ULONG
    public: static char16_t const *const fgDT_USHORT
    public: static char16_t const *const fgDT_YEARMONTH
    public: static char16_t const *const fgELT_ALL
    public: static char16_t const *const fgELT_ATTRIBUTE
    public: static char16_t const *const fgELT_ATTRIBUTEGROUP
    public: static char16_t const *const fgELT_COMPLEXCONTENT
    public: static char16_t const *const fgELT_COMPLEXTYPE
    public: static char16_t const *const fgELT_ELEMENT
    public: static char16_t const *const fgELT_ENUMERATION
    public: static char16_t const *const fgELT_EXTENSION
    public: static char16_t const *const fgELT_IMPORT
    public: static char16_t const *const fgELT_RESTRICTION
    public: static char16_t const *const fgELT_SEQUENCE
    public: static char16_t const *const fgELT_SIMPLECONTENT
    public: static char16_t const *const fgELT_SIMPLETYPE
    public: static char16_t const *const fgURI_SCHEMAFORSCHEMA
    public: static char16_t const *const fgURI_XSI
    public: static char16_t const *const fgXSI_TYPE
  };

  struct StringHasher
  {
  public:
  };

  template<typename T1  >
  class ValueVectorOf
  {
  public:
  };
#if 0 // Instances:
// <class xercesc_3_2::SchemaElementDecl *>
#if 0
  template<>
  class ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>
  {
  public:
  };
#endif
#endif


  class/*or struct*/ Wrapper4InputSource
  {
    // Functions:
    public: Wrapper4InputSource(class xercesc_3_2::InputSource *const, bool, class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
    public: virtual ~Wrapper4InputSource(void)
#endif

  public:
  };

  class XMLAttr
  {
  public:
  };

  class XMLBigInteger
  {
    // Functions:
    public: XMLBigInteger(char16_t const *const, class xercesc_3_2::MemoryManager *const)
    public: ~XMLBigInteger(void)
    public: char16_t * getRawData(void) const
    // Static functions:
    public: static int compareValues(class xercesc_3_2::XMLBigInteger const *const, class xercesc_3_2::XMLBigInteger const *const, class xercesc_3_2::MemoryManager *const)
  public:
  };

  class XMLBuffer
  {
  public:
  };

  class/*or struct*/ XMLChar1_0
  {
    // Static functions:
    public: static bool isValidName(char16_t const *const, unsigned __int64)
  public:
  };

  class/*or struct*/ XMLChar1_1
  {
    // Static functions:
    public: static bool isFirstNameChar(char16_t, char16_t)
    public: static bool isNameChar(char16_t, char16_t)
    public: static bool isValidNCName(char16_t const *const, unsigned __int64)
    public: static bool isValidName(char16_t const *const, unsigned __int64)
    public: static bool isValidQName(char16_t const *const, unsigned __int64)
  public:
  };

  class XMLDTDDescription
  {
  public:
  };

  class/*or struct*/ XMLDocumentHandler
  {
    // VFTable. Offset=0, Size=0, Start=0
    // VFTable with 0 offset end

  public:
  };

  class XMLElementDecl
  {
    // Functions:
    public: class xercesc_3_2::QName * getElementName(void)
  public:
  };

  class XMLEntityDecl
  {
  public:
  };

  class/*or struct*/ XMLEntityHandler
  {
    // VFTable. Offset=0, Size=6, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void endInputSource(class xercesc_3_2::InputSource const &); // 1 (xercesc_3_2::DOMLSParserImpl)
    public: virtual bool expandSystemId(char16_t const *const, class xercesc_3_2::XMLBuffer &); // 2 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void resetEntities(void); // 3 (xercesc_3_2::DOMLSParserImpl)
    public: virtual class xercesc_3_2::InputSource * resolveEntity(class xercesc_3_2::XMLResourceIdentifier *); // 4 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void startInputSource(class xercesc_3_2::InputSource const &); // 5 (xercesc_3_2::DOMLSParserImpl)
    // VFTable with 0 offset end

  public:
  };

  template<typename T1  >
  class/*or struct*/ XMLEnumerator
  {
  public:
  };
#if 0 // Instances:
// <class xercesc_3_2::ComplexTypeInfo>
#if 0
  template<>
  class/*or struct*/ XMLEnumerator<class xercesc_3_2::ComplexTypeInfo>
  {
    // VFTable. Offset=0, Size=4, Start=0
    // Owner: SophisXML.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void unknown_vf_0_1(void) = 0; // 1
    public: virtual void unknown_vf_0_2(void) = 0; // 2
    public: virtual void unknown_vf_0_3(void) = 0; // 3
    // VFTable with 0 offset end

  public:
  };
#endif
// <class xercesc_3_2::DatatypeValidator>
#if 0
  template<>
  class/*or struct*/ XMLEnumerator<class xercesc_3_2::DatatypeValidator>
  {
    // VFTable. Offset=0, Size=4, Start=0
    // Owner: SophisXML.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void unknown_vf_0_1(void) = 0; // 1
    public: virtual void unknown_vf_0_2(void) = 0; // 2
    public: virtual void unknown_vf_0_3(void) = 0; // 3
    // VFTable with 0 offset end

  public:
  };
#endif
// <class xercesc_3_2::Grammar>
#if 0
  template<>
  class/*or struct*/ XMLEnumerator<class xercesc_3_2::Grammar>
  {
    // VFTable. Offset=0, Size=4, Start=0
    // Owner: SophisXML.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void unknown_vf_0_1(void) = 0; // 1
    public: virtual void unknown_vf_0_2(void) = 0; // 2
    public: virtual void unknown_vf_0_3(void) = 0; // 3
    // VFTable with 0 offset end

  public:
  };
#endif
// <class xercesc_3_2::SchemaElementDecl>
#if 0
  template<>
  class/*or struct*/ XMLEnumerator<class xercesc_3_2::SchemaElementDecl>
  {
    // VFTable. Offset=0, Size=4, Start=0
    // Owner: SophisXML.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void unknown_vf_0_1(void) = 0; // 1
    public: virtual void unknown_vf_0_2(void) = 0; // 2
    public: virtual void unknown_vf_0_3(void) = 0; // 3
    // VFTable with 0 offset end

  public:
  };
#endif
// <class xercesc_3_2::ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>>
#if 0
  template<>
  class/*or struct*/ XMLEnumerator<class xercesc_3_2::ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>>
  {
    // VFTable. Offset=0, Size=4, Start=0
    // Owner: SophisXML.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void unknown_vf_0_1(void) = 0; // 1
    public: virtual void unknown_vf_0_2(void) = 0; // 2
    public: virtual void unknown_vf_0_3(void) = 0; // 3
    // VFTable with 0 offset end

  public:
  };
#endif
#endif


  class/*or struct*/ XMLErrorReporter
  {
  public:
    // Enumerations:
    enum ErrTypes : int {
    };

    // VFTable. Offset=0, Size=3, Start=0
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    public: virtual void error(unsigned int, char16_t const *const, enum xercesc_3_2::XMLErrorReporter::ErrTypes, char16_t const *const, char16_t const *const, char16_t const *const, unsigned __int64, unsigned __int64); // 1 (xercesc_3_2::DOMLSParserImpl)
    public: virtual void resetErrors(void); // 2 (xercesc_3_2::DOMLSParserImpl)
    // VFTable with 0 offset end

  public:
  };

  class XMLException
  {
    // Functions:
    public: XMLException(class xercesc_3_2::XMLException const &)
    public: char16_t const * getMessage(void) const
  public:
  };

  namespace/*or class/struct?*/ XMLExcepts
  {
    // Enumerations:
    enum Codes : int {
    };

  };

  class XMLFormatTarget : public XMemory
  {
    // Functions:
    protected: XMLFormatTarget(void)
#if 0 // All found virtual functions names:
    public: virtual ~XMLFormatTarget(void)
#endif

  public:
  };

  class XMLGrammarDescription
  {
  public:
  };

  class XMLGrammarPool : public XMemory
  {
    // VFTable. Offset=0, Size=0, Start=0
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ XMLGrammarPoolImpl : public XMLGrammarPool
  {
    // Functions:
    public: XMLGrammarPoolImpl(class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
    public: virtual ~XMLGrammarPoolImpl(void)
    public: virtual bool cacheGrammar(class xercesc_3_2::Grammar *const)
    public: virtual bool clear(void)
    public: virtual class xercesc_3_2::XMLDTDDescription * createDTDDescription(char16_t const *const)
    public: virtual class xercesc_3_2::DTDGrammar * createDTDGrammar(void)
    public: virtual class xercesc_3_2::XMLSchemaDescription * createSchemaDescription(char16_t const *const)
    public: virtual class xercesc_3_2::SchemaGrammar * createSchemaGrammar(void)
    private: virtual void createXSModel(void)
    public: virtual void deserializeGrammars(class xercesc_3_2::BinInputStream *const)
    public: virtual class xercesc_3_2::RefHashTableOfEnumerator<class xercesc_3_2::Grammar, struct xercesc_3_2::StringHasher> getGrammarEnumerator(void) const
    public: virtual class xercesc_3_2::XMLStringPool * getURIStringPool(void)
    public: virtual class xercesc_3_2::XSModel * getXSModel(bool &)
    public: virtual void lockPool(void)
    public: virtual class xercesc_3_2::Grammar * orphanGrammar(char16_t const *const)
    public: virtual class xercesc_3_2::Grammar * retrieveGrammar(class xercesc_3_2::XMLGrammarDescription *const)
    public: virtual void serializeGrammars(class xercesc_3_2::BinOutputStream *const)
    public: virtual void unlockPool(void)
#endif

    // VFTable. Offset=0, Size=17, Start=0
    // Corresponding base: xercesc_3_2::XMLGrammarPool
    // Owner: SophisXML.dll
    // Added virtual functions:
    public: virtual ~XMLGrammarPoolImpl(void); // 0
    public: virtual bool cacheGrammar(class xercesc_3_2::Grammar *const); // 1
    public: virtual class xercesc_3_2::Grammar * retrieveGrammar(class xercesc_3_2::XMLGrammarDescription *const); // 2
    public: virtual class xercesc_3_2::Grammar * orphanGrammar(char16_t const *const); // 3
    public: virtual class xercesc_3_2::RefHashTableOfEnumerator<class xercesc_3_2::Grammar, struct xercesc_3_2::StringHasher> getGrammarEnumerator(void) const; // 4
    public: virtual bool clear(void); // 5
    public: virtual void lockPool(void); // 6
    public: virtual void unlockPool(void); // 7
    public: virtual class xercesc_3_2::DTDGrammar * createDTDGrammar(void); // 8
    public: virtual class xercesc_3_2::SchemaGrammar * createSchemaGrammar(void); // 9
    public: virtual class xercesc_3_2::XMLDTDDescription * createDTDDescription(char16_t const *const); // 10
    public: virtual class xercesc_3_2::XMLSchemaDescription * createSchemaDescription(char16_t const *const); // 11
    public: virtual class xercesc_3_2::XSModel * getXSModel(bool &); // 12
    public: virtual class xercesc_3_2::XMLStringPool * getURIStringPool(void); // 13
    public: virtual void serializeGrammars(class xercesc_3_2::BinOutputStream *const); // 14
    public: virtual void deserializeGrammars(class xercesc_3_2::BinInputStream *const); // 15
    private: virtual void createXSModel(void); // 16
    // VFTable with 0 offset end

  public:
  };

  class XMLNotationDecl
  {
  public:
  };

  class/*or struct*/ XMLPlatformUtils
  {
    // Static functions:
    public: static void Initialize(char const *const, char const *const, class xercesc_3_2::PanicHandler *const, class xercesc_3_2::MemoryManager *const)
    public: static void Terminate(void)
    // Variables:
    public: static class xercesc_3_2::MemoryManager *fgMemoryManager
  public:
  };

  class XMLResourceIdentifier
  {
  public:
  };

  class XMLSchemaDescription
  {
  public:
  };

  class/*or struct*/ XMLString
  {
    // Static functions:
    public: static int compareIString(char16_t const *const, char16_t const *const)
    public: static int compareString(char16_t const *const, char16_t const *const)
    public: static bool equals(char16_t const *, char16_t const *)
    public: static unsigned __int64 hash(char16_t const *const, unsigned __int64)
    public: static int indexOf(char16_t const *const, char16_t)
    public: static bool isDigit(char16_t)
    public: static void release(char **, class xercesc_3_2::MemoryManager *const)
    public: static void release(char16_t **, class xercesc_3_2::MemoryManager *const)
    public: static bool startsWith(char16_t const *const, char16_t const *const)
    public: static unsigned __int64 stringLen(char const *const)
    public: static unsigned __int64 stringLen(char16_t const *const)
    public: static void subString(char16_t *const, char16_t const *const, unsigned __int64, unsigned __int64, class xercesc_3_2::MemoryManager *const)
    public: static char * transcode(char16_t const *const, class xercesc_3_2::MemoryManager *const)
    public: static char16_t * transcode(char const *const, class xercesc_3_2::MemoryManager *const)
    public: static bool transcode(char const *const, char16_t *const, unsigned __int64, class xercesc_3_2::MemoryManager *const)
    public: static void trim(char16_t *const)
  public:
  };

  class XMLStringPool
  {
  public:
  };

  class/*or struct*/ XMLStringTokenizer
  {
    // Functions:
    public: XMLStringTokenizer(char16_t const *const, class xercesc_3_2::MemoryManager *const)
    public: ~XMLStringTokenizer(void)
    public: bool hasMoreTokens(void)
    public: char16_t * nextToken(void)
  public:
  };

  namespace/*or class/struct?*/ XMLUni
  {
    // Variables:
    public: static char16_t const *const fgCDATAString
    public: static char16_t const *const fgDOMComments
    public: static char16_t const *const fgDOMErrorHandler
    public: static char16_t const *const fgDOMNamespaces
    public: static char16_t const *const fgDOMValidate
    public: static char16_t const *const fgDOMValidateIfSchema
    public: static char16_t const *const fgDOMWRTDiscardDefaultContent
    public: static char16_t const *const fgDOMWRTFormatPrettyPrint
    public: static char16_t const *const fgDOMXMLDeclaration
    public: static char16_t const *const fgISO88591EncodingString
    public: static char16_t const *const fgSGXMLScanner
    public: static char16_t const *const fgUTF8EncodingString
    public: static char16_t const *const fgXMLNSString
    public: static char16_t const *const fgXMLNSURIName
    public: static char16_t const *const fgXMLString
    public: static char16_t const *const fgXMLURIName
    public: static char16_t const *const fgXercesCacheGrammarFromParse
    public: static char16_t const *const fgXercesDOMHasPSVIInfo
    public: static char16_t const *const fgXercesScannerName
    public: static char16_t const *const fgXercesSchema
    public: static char16_t const *const fgXercesSchemaFullChecking
    public: static char16_t const *const fgXercesUseCachedGrammarInParse
    public: static char const *const fgXercescDefaultLocale
  };

  class XMLValidator
  {
  public:
  };

  class/*or struct*/ XMemory
  {
    // Static functions:
    public: static void * operator new(unsigned __int64)
    public: static void * operator new(unsigned __int64, class xercesc_3_2::MemoryManager *)
    public: static void operator delete(void *)
    public: static void operator delete(void *, class xercesc_3_2::MemoryManager *)
  public:
  };

  class XSModel
  {
  public:
  };


  // Functions:
  class std::basic_ostream<char, struct std::char_traits<char>> & operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class DOMError const &)
  class std::basic_ostream<char, struct std::char_traits<char>> & operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class DOMException const &)
  class std::basic_ostream<char, struct std::char_traits<char>> & operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class QName const &)
public:
};
