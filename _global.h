class/*or struct*/ 
{
public:
  // Enumerations:
  enum EQuotationsCoherencyMode : int {
  };
  enum eBackOfficeType : int {
  };

  // Nested containers:
  class CLockDownDateManager
  {
    // Static functions:
    public: static class CLockDownDateManager * GetInstance(void)
  public:
  };

  namespace/*or class/struct?*/ CSRAPIConfiguration
  {
    // Nested containers:
    class/*or struct*/ DataIntegrity
    {
      // Static functions:
      public: static bool EnableDataIntegrity(void)
    public:
    };


  };

  class CSRColleUtilisateur_v1
  {
  public:
  };

  class/*or struct*/ CSRCurrencyCreatorImpl : public ICSRCurrencyCreator
  {
    // Functions:
    public: CSRCurrencyCreatorImpl(void)
#if 0 // All found virtual functions names:
    public: virtual ~CSRCurrencyCreatorImpl(void)
    public: virtual class sophis::static_data::CSRCurrency const * CreateFromDescription(class sophis::tools::dataModel::DataSet const &)
    private: virtual struct sophis::DAL::CurrencyDescription const GetCurrencyDescription(class sophis::tools::dataModel::DataSet const &)
    public: virtual long const UpdateBankHolidaysFromDescription(class sophis::tools::dataModel::DataSet const &)
#endif

    // VFTable. Offset=0, Size=4, Start=0
    // Corresponding base: static_data::static_data::ICSRCurrencyCreator
    // Owner: SophisXmlTools.dll
    // Added virtual functions:
    public: virtual ~CSRCurrencyCreatorImpl(void); // 0
    public: virtual class sophis::static_data::CSRCurrency const * CreateFromDescription(class sophis::tools::dataModel::DataSet const &); // 1
    public: virtual long const UpdateBankHolidaysFromDescription(class sophis::tools::dataModel::DataSet const &); // 2
    private: virtual struct sophis::DAL::CurrencyDescription const GetCurrencyDescription(class sophis::tools::dataModel::DataSet const &); // 3
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ CSRPlaceCreatorImpl
  {
    // Static functions:
    public: static struct sophis::DAL::PlaceDescription * GetPlaceDescriptionFromDataSet(class sophis::tools::dataModel::DataSet const &)
    public: static void SendPlaceCreateEvent(struct sophis::DAL::PlaceDescription *)
    public: static struct sophis::DAL::PlaceDescription * SynchronizePlaceInstance(struct sophis::DAL::PlaceDescription *, class sophis::tools::CSREventVector &, bool)
    public: static void UpdatePlacesWithHolidays(struct sophis::DAL::PlaceDescription *, class sophis::tools::CSREventVector &)
  public:
  };

  class/*or struct*/ CSRPreference
  {
    // Static functions:
    public: static void GetNthTable(int, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
    public: static bool IsSimulationMode(void)
  public:
  };

  class CSRSiteManager
  {
    // Functions:
    public: double GetCurrentSiteCutoffInDBTimeZone(void)
    // Static functions:
    public: static class CSRSiteManager & GetInstance(void)
  public:
  };

  class CSRic
  {
    // Functions:
    public: void GetDescription(class sophis::tools::dataModel::DataSet &) const
    public: int Save(void *)
    public: void UpdateFromDescription(class sophis::tools::dataModel::DataSet const &)
    // Static functions:
    public: static class CSRic * GetCSRic(long)
  public:
  };

  class CSSimulation
  {
    // Functions:
    public: bool isActive(void)
  public:
  };

  class/*or struct*/ CSXMLDocument
  {
    // Functions:
    public: CSXMLDocument(void)
    public: bool CopyFromProduit(struct sophis::DAL::OptionInstrumentData **)
    public: long FindIdentifiers(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const *)
    public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const * GetBuffer(void) const
#if 0 // All found virtual functions names:
    public: virtual ~CSXMLDocument(void)
#endif

  public:
  };

  class CSxInstrumentHistoryHelper
  {
    // Functions:
    public: CSxInstrumentHistoryHelper(class CSxInstrumentHistoryHelper const &)
    public: CSxInstrumentHistoryHelper(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
    public: class CSxInstrumentHistoryHelper & operator=(class CSxInstrumentHistoryHelper const &)
    private: void _saveHistoricalPrices(class std::map<long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>> const &)
    private: void _saveHistoricalPricesForOneDate(long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &)
    private: void _saveSnapshotPrices(class std::map<struct QuoteKey_t, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>> const &)
    private: void _saveSnapshotPricesForOneDate(struct QuoteKey_t const &, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &, class sophis::tools::CSREventVector &)
    public: bool hasHistoryFor(double, char const *) const
    public: bool hasSnapshotHistoryFor(double, char const *) const
    public: void resetInstrument(long)
    public: bool savePricesForDates(class std::map<long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>> const &, class std::map<struct QuoteKey_t, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>> const &, bool, class sophis::tools::CSREventVector &)
    public: bool savePricesForOneDate(struct QuoteKey_t const &, bool, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &, class sophis::tools::CSREventVector &)
    // Static functions:
    public: static double GetFixingForField(long, long, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
    protected: static bool MustSendSAISMessage(void)
    public: static void SetQuotationsCoherencyMode(enum EQuotationsCoherencyMode)
    // Variables:
    private: static char const *__CLASS__
    private: static enum EQuotationsCoherencyMode fQuotationsCoherencyMode
#if 0 // All found virtual functions names:
    public: virtual ~CSxInstrumentHistoryHelper(void)
    protected: virtual bool DataToBeSaved(long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &)
    public: virtual void Notify(class sophis::tools::CSREventVector &) const
    protected: virtual void UpdateCache(long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &)
#endif

    // VFTable. Offset=0, Size=4, Start=0
    // Owner: SophisXmlTools.dll
    // Added virtual functions:
    public: virtual ~CSxInstrumentHistoryHelper(void); // 0
    public: virtual void Notify(class sophis::tools::CSREventVector &) const; // 1
    protected: virtual bool DataToBeSaved(long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &); // 2
    protected: virtual void UpdateCache(long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &); // 3
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ InstrumentIO
  {
    // Static functions:
    public: static class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct SnapshotColumnDB_t, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>>> const & getSnapshotColumnsFromName(void)
    public: static bool saveHistoricalPrices(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, long, class std::map<long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>> const &)
    public: static bool saveHistoricalPricesForOneDay(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, long, long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>> const &)
    public: static unsigned __int64 saveSnapshotPricesForOneDay(long, long, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>> const &, long)
    public: static unsigned __int64 saveSnapshotPricesHistoric(long, class std::map<struct QuoteKey_t, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>>> const &)
  public:
  };

  namespace/*or class/struct?*/ Log
  {
    // Enumerations:
    enum Severity : int {
    };

  };

  namespace/*or class/struct?*/ NSREnums
  {
    // Enumerations:
    enum eParameterModificationType : int {
    };

  };

  struct OCILobLocator
  {
  public:
  };

  struct PriceDB_t
  {
  public:
  };

  struct QuoteKey_t
  {
    // Functions:
    public: bool operator<(struct QuoteKey_t const &) const
  public:
  };

  struct SSCourbeTauxSup
  {
  public:
  };

  struct SnapshotColumnDB_t
  {
  public:
  };

  struct TConfigClient
  {
  public:
  };

  struct TableauDefProd
  {
  public:
  };

  namespace/*or class/struct?*/ XERCES_CPP_NAMESPACE
  {
    // Nested containers:
    class DOMDocument
    {
    public:
    };


  };

  struct _Cvtvec
  {
  public:
  };

  namespace/*or class/struct?*/ `anonymous namespace'
  {
    // Nested containers:
    class PollingThreadExec
    {
    public:
    };

    class StatisticsProcessor : public PollingThread
    {
      // VFTable. Offset=0, Size=11, Start=11
      // Corresponding base: thread::thread::PollingThread
      // Owner: SophisSystem.dll
      // VFTable with 0 offset end

    public:
    };


  };

#if 0
  template<>
  namespace/*or class/struct?*/ `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'
  {
    // Nested containers:
    struct fidListSave
    {
    public:
    };


  };
#endif

  namespace/*or class/struct?*/ `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'
  {
    // Nested containers:
    struct ReferringDeal
    {
    public:
    };


  };

  namespace/*or class/struct?*/ boost
  {
    // Nested containers:
    class/*or struct*/ bad_lexical_cast : public bad_cast
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::bad_cast
      // Owner: SophisSystem.dll
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ bad_weak_ptr : public exception
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::exception
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };

    class condition_variable
    {
    public:
    };

    class condition_variable_any
    {
    public:
    };

    namespace/*or class/struct?*/ container
    {
      // Nested containers:
      class/*or struct*/ exception : public exception
      {
        // VFTable. Offset=0, Size=2, Start=2
        // Corresponding base: std::exception
        // Owner: SophisXmlTools.dll
        // VFTable with 0 offset end

      public:
      };

      template<typename T0, typename T1, typename T2, typename T4      >
      class flat_map
      {
      public:
      };
#if 0 // Instances:
// <long, long, struct std::less<long>, void>
#if 0
      template<>
      class flat_map<long, long, struct std::less<long>, void>
      {
      public:
      };
#endif
#endif


      class/*or struct*/ out_of_range : public exception
      {
        // VFTable. Offset=0, Size=2, Start=2
        // Corresponding base: container::container::exception
        // Owner: SophisXmlTools.dll
        // VFTable with 0 offset end

      public:
      };


    };

    class/*or struct*/ detail
    {
    public:
      // Nested containers:
      template<typename T0, typename T2      >
      class/*or struct*/ basic_pointerbuf
      {
      public:
      };
#if 0 // Instances:
// <char, class std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>>
#if 0
      template<>
      class/*or struct*/ basic_pointerbuf<char, class std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>> : public basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>
      {
        // VFTable. Offset=0, Size=15, Start=15
        // Corresponding base: basic_stringbuf::basic_stringbuf::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>
        // Owner: SophisSystem.dll
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


      template<typename T0, typename T2      >
      class/*or struct*/ basic_unlockedbuf
      {
      public:
      };
#if 0 // Instances:
// <class std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>, char>
#if 0
      template<>
      class/*or struct*/ basic_unlockedbuf<class std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>, char> : public basic_pointerbuf<char, class std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>>
      {
        // VFTable. Offset=0, Size=15, Start=15
        // Corresponding base: basic_pointerbuf::basic_pointerbuf::basic_pointerbuf::basic_pointerbuf<char, class std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>>
        // Owner: SophisSystem.dll
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


      class/*or struct*/ local_counted_base
      {
        // VFTable. Offset=0, Size=3, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void) = 0; // 2
        // VFTable with 0 offset end

      public:
      };

      struct mono_platform_timepoint
      {
      public:
      };

      template<typename T1      >
      class/*or struct*/ thread_data
      {
      public:
      };
#if 0 // Instances:
// <class `anonymous namespace'::PollingThreadExec>
#if 0
      template<>
      class/*or struct*/ thread_data<class `anonymous namespace'::PollingThreadExec> : public thread_data_base
      {
        // VFTable. Offset=0, Size=3, Start=3
        // Corresponding base: detail::detail::thread_data_base
        // Owner: SophisSystem.dll
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


      class/*or struct*/ thread_data_base
      {
        // Functions:
        public: boost::detail::thread_data_base::thread_data_base(void)
#if 0 // All found virtual functions names:
        public: virtual boost::detail::thread_data_base::~thread_data_base(void)
        public: virtual void boost::detail::thread_data_base::notify_all_at_thread_exit(class boost::condition_variable *, class boost::mutex *)
#endif

        // VFTable. Offset=0, Size=3, Start=0
        // Added virtual functions:
        public: virtual boost::detail::thread_data_base::~thread_data_base(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void boost::detail::thread_data_base::notify_all_at_thread_exit(class boost::condition_variable *, class boost::mutex *); // 2
        // VFTable with 0 offset end

      public:
      };

      namespace/*or class/struct?*/ win32
      {
        // Nested containers:
        class/*or struct*/ handle_manager
        {
          // Functions:
          public: boost::detail::win32::handle_manager::~handle_manager(void)
          public: void * boost::detail::win32::handle_manager::duplicate(void) const
        public:
        };


      };


      // Functions:
      void * get_tss_data(void const *)
      void set_tss_data(void const *, void (__cdecl *)(void (__cdecl *)(void *), void *), void (__cdecl *)(void *), void *, bool)
    public:
    };

    class/*or struct*/ exception
    {
      // VFTable. Offset=0, Size=1, Start=0
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void) = 0; // 0
      // VFTable with 0 offset end

    public:
    };

    namespace/*or class/struct?*/ exception_detail
    {
      // Nested containers:
      class/*or struct*/ clone_base
      {
        // VFTable. Offset=0, Size=3, Start=0
        // Owner: SophisSystem.dll
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void) = 0; // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void); // 2
        // VFTable with 0 offset end

      public:
      };


    };

    class/*or struct*/ lock_error : public thread_exception
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: boost::thread_exception
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };

    class mutex
    {
    public:
    };

    namespace/*or class/struct?*/ numeric
    {
      // Nested containers:
      class/*or struct*/ bad_numeric_cast : public bad_cast
      {
        // VFTable. Offset=0, Size=2, Start=2
        // Corresponding base: std::bad_cast
        // Owner: SophisSystem.dll
        // Owner: SophisXML.dll
        // Owner: SophisXmlTools.dll
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ negative_overflow : public bad_numeric_cast
      {
        // VFTable. Offset=0, Size=2, Start=2
        // Corresponding base: numeric::numeric::bad_numeric_cast
        // Owner: SophisSystem.dll
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ positive_overflow : public bad_numeric_cast
      {
        // VFTable. Offset=0, Size=2, Start=2
        // Corresponding base: numeric::numeric::bad_numeric_cast
        // Owner: SophisSystem.dll
        // Owner: SophisXML.dll
        // Owner: SophisXmlTools.dll
        // VFTable with 0 offset end

      public:
      };


    };

    class recursive_mutex
    {
    public:
    };

    namespace/*or class/struct?*/ system
    {
      // Nested containers:
      namespace/*or class/struct?*/ detail
      {
        // Nested containers:
        class/*or struct*/ generic_error_category : public error_category
        {
          // VFTable. Offset=0, Size=7, Start=0
          // Corresponding base: system::system::error_category
          // Owner: SophisSystem.dll
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          public: virtual void unknown_vf_0_2(void); // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void unknown_vf_0_4(void); // 4
          public: virtual void unknown_vf_0_5(void); // 5
          public: virtual void unknown_vf_0_6(void); // 6
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ interop_error_category : public error_category
        {
          // VFTable. Offset=0, Size=7, Start=0
          // Corresponding base: system::system::error_category
          // Owner: SophisSystem.dll
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          public: virtual void unknown_vf_0_2(void); // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void unknown_vf_0_4(void); // 4
          public: virtual void unknown_vf_0_5(void); // 5
          public: virtual void unknown_vf_0_6(void); // 6
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ system_error_category : public error_category
        {
          // VFTable. Offset=0, Size=7, Start=0
          // Corresponding base: system::system::error_category
          // Owner: SophisSystem.dll
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          public: virtual void unknown_vf_0_2(void); // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void unknown_vf_0_4(void); // 4
          public: virtual void unknown_vf_0_5(void); // 5
          public: virtual void unknown_vf_0_6(void); // 6
          // VFTable with 0 offset end

        public:
        };


      };

      class/*or struct*/ error_category
      {
      public:
      };

      class/*or struct*/ system_error : public runtime_error
      {
        // VFTable. Offset=0, Size=2, Start=2
        // Corresponding base: std::runtime_error
        // Owner: SophisSystem.dll
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };


    };

    class/*or struct*/ this_thread
    {
      // Functions:
      class boost::thread::id get_id(void)
      bool interruptible_wait(void *, struct boost::detail::mono_platform_timepoint const &)
    public:
    };

    class/*or struct*/ thread
    {
    public:
      // Nested containers:
      class id
      {
      public:
      };


      // Functions:
      public: ~thread(void)
      private: bool do_try_join_until(struct boost::detail::mono_platform_timepoint const &)
      public: class id get_id(void) const
      public: void join(void)
      private: void start_thread(void)
    public:
    };

    class/*or struct*/ thread_exception : public system_error
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: system::system::system_error
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ thread_resource_error : public thread_exception
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: boost::thread_exception
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };


  };

  struct fd_set
  {
  public:
  };

  namespace/*or class/struct?*/ sophis
  {
    // Nested containers:
    namespace/*or class/struct?*/ DAL
    {
      // Nested containers:
      struct BaseInstrumentData
      {
        // Functions:
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const & sophis::DAL::BaseInstrumentData::GetName(void) const
        public: long sophis::DAL::BaseInstrumentData::GetSicovam(void) const
      public:
      };

      class CSRCurrencyDescriptionReferential
      {
        // Functions:
        public: struct sophis::DAL::CurrencyDescription * sophis::DAL::CSRCurrencyDescriptionReferential::GetCurrencyByCode(long)
        // Static functions:
        public: static class sophis::DAL::CSRCurrencyDescriptionReferential & sophis::DAL::CSRCurrencyDescriptionReferential::GetInstance(void)
      public:
      };

      class CSRPlaceDescriptionReferential
      {
        // Functions:
        public: bool sophis::DAL::CSRPlaceDescriptionReferential::Delete(long)
        // Static functions:
        public: static class sophis::DAL::CSRPlaceDescriptionReferential & sophis::DAL::CSRPlaceDescriptionReferential::GetInstance(void)
      public:
      };

      struct CurrencyDescription
      {
        // Functions:
        public: void sophis::DAL::CurrencyDescription::BuildPlacesMenu(void)
      public:
      };

      struct InstrumentData
      {
      public:
      };

      class InstrumentReferential
      {
        // Static functions:
        public: static struct sophis::DAL::BaseInstrumentData * sophis::DAL::InstrumentReferential::FindInstrument(long)
        public: static class sophis::DAL::InstrumentReferential & sophis::DAL::InstrumentReferential::GetInstance(void)
      public:
      };

      struct OptionInstrumentData
      {
      public:
      };

      struct PlaceDescription
      {
        // Functions:
        public: sophis::DAL::PlaceDescription::~PlaceDescription(void)
      public:
      };

      class/*or struct*/ PlaceDescriptionDependencyImpl
      {
        // Static functions:
        public: static long sophis::DAL::PlaceDescriptionDependencyImpl::GetPlaceCode(long, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
        public: static long sophis::DAL::PlaceDescriptionDependencyImpl::GetSequenceCode(void)
      public:
      };

      struct SSCreditRiskMgrParameters
      {
      public:
      };

      struct SSRepoMargin
      {
      public:
      };

      struct YieldCurveInfos
      {
        // Functions:
        public: struct SSCourbeTauxSup * sophis::DAL::YieldCurveInfos::GetSSCourbeTauxSup(void)
      public:
      };

      class YieldCurveReferential
      {
        // Functions:
        public: unsigned __int64 sophis::DAL::YieldCurveReferential::GetCountOfYCInfos(void)
        // Static functions:
        public: static class sophis::DAL::YieldCurveReferential & sophis::DAL::YieldCurveReferential::GetInstance(void)
        public: static struct sophis::DAL::YieldCurveInfos * sophis::DAL::YieldCurveReferential::GetNthYCInfos(int)
      public:
      };


    };

    namespace/*or class/struct?*/ accounting
    {
      // Nested containers:
      class/*or struct*/ CSRAccountSetupIOManager
      {
        // Functions:
        public: sophis::accounting::CSRAccountSetupIOManager::CSRAccountSetupIOManager(void)
        public: class sophis::accounting::ImportResult sophis::accounting::CSRAccountSetupIOManager::ProcessXMLWithoutCommit(class sophis::tools::dataModel::DataSet const &) const
#if 0 // All found virtual functions names:
        public: virtual sophis::accounting::CSRAccountSetupIOManager::~CSRAccountSetupIOManager(void)
#endif

      public:
      };

      class ImportResult
      {
        // Functions:
        public: sophis::accounting::ImportResult::ImportResult(void)
        public: sophis::accounting::ImportResult::~ImportResult(void)
        public: class sophis::accounting::ImportResult & sophis::accounting::ImportResult::operator=(class sophis::accounting::ImportResult const &)
        public: bool sophis::accounting::ImportResult::HasError(void) const
        public: void sophis::accounting::ImportResult::SaveLogs(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &) const
      public:
      };


    };

    namespace/*or class/struct?*/ backoffice_kernel
    {
      // Nested containers:
      class KernelPrefTemp
      {
        // Functions:
        public: long sophis::backoffice_kernel::KernelPrefTemp::GetKernelEventForFrontOfficeCreation(void)
        // Static functions:
        public: static class sophis::backoffice_kernel::KernelPrefTemp & sophis::backoffice_kernel::KernelPrefTemp::GetInstance(void)
      public:
      };

      namespace/*or class/struct?*/ dataModel
      {
        // Nested containers:
        class/*or struct*/ CommonType
        {
#if 0 // All found virtual functions names:
          public: virtual char const * sophis::backoffice_kernel::dataModel::CommonType::ns(void) const
#endif

        public:
        };

        class/*or struct*/ PartyReference
        {
          // Functions:
          public: sophis::backoffice_kernel::dataModel::PartyReference::PartyReference(void)
          public: void sophis::backoffice_kernel::dataModel::PartyReference::`vbase dtor'(void)
          public: long sophis::backoffice_kernel::dataModel::PartyReference::resolveId(void) const
#if 0 // All found virtual functions names:
          public: virtual class sophis::tools::dataModel::PersistentState * sophis::backoffice_kernel::dataModel::PartyReference::clone(void) const
          public: virtual void sophis::backoffice_kernel::dataModel::PartyReference::restoreObject(class sophis::tools::dataModel::Storage const &)
          public: virtual void sophis::backoffice_kernel::dataModel::PartyReference::storeObject(class sophis::tools::dataModel::Storage &) const
          public: virtual char const * sophis::backoffice_kernel::dataModel::PartyReference::typeName(void) const
#endif

        public:
        };


      };


    };

    class/*or struct*/ collateral
    {
    public:
      // Nested containers:
      class CSRLBAgreement
      {
      public:
      };


      // Functions:
      void BookBasketSwap(class sophis::finance::CSRBasketSwap const *, class CSRLBAgreement const *, long, long, class sophis::tools::dataModel::DataSet const &, class sophis::tools::CSREventVector &)
      class sophis::finance::CSRBasketSwap * CreateBasketSwap(class CSRLBAgreement const *, long, long, double)
      class CSRLBAgreement * GetAgreement(long)
      class sophis::finance::CSRBasketSwap * GetBasketSwap(long, long)
      void UpdateBasketSwapAdjustmentSpreadsAndDividendRebates(class sophis::finance::CSRBasketSwap *, class sophis::tools::dataModel::DataSet const &, class CSRLBAgreement const *)
    public:
    };

    namespace/*or class/struct?*/ dailyData
    {
      // Nested containers:
      class ISRDailyDataXML
      {
      public:
        // Nested containers:
        struct SSDailyDataXMLParameters
        {
          // Functions:
          public: sophis::dailyData::ISRDailyDataXML::SSDailyDataXMLParameters::SSDailyDataXMLParameters(void)
          public: sophis::dailyData::ISRDailyDataXML::SSDailyDataXMLParameters::~SSDailyDataXMLParameters(void)
        public:
        };


        // Static functions:
        public: static class sophis::dailyData::ISRDailyDataXML * sophis::dailyData::ISRDailyDataXML::Create(struct sophis::dailyData::ISRDailyDataXML::SSDailyDataXMLParameters const &)
        public: static class sophis::dailyData::ISRDailyDataXML * sophis::dailyData::ISRDailyDataXML::Create(void)
      public:
      };


    };

    namespace/*or class/struct?*/ dataIntegrity
    {
      // Enumerations:
      enum eProcessStage : int {
      };

      // Nested containers:
      class CSRDataIntegrityMarketData
      {
      public:
      };

      class CSRDataIntegrityMarketDataFactory
      {
        // Functions:
        public: class sophis::dataIntegrity::CSRDataIntegrityMarketData * sophis::dataIntegrity::CSRDataIntegrityMarketDataFactory::GetDataIntegrityMarketData(long, class sophis::market_data::CSRHistoric &, class std::vector<long, class std::allocator<long>> const &)
        // Static functions:
        public: static class sophis::dataIntegrity::CSRDataIntegrityMarketDataFactory * sophis::dataIntegrity::CSRDataIntegrityMarketDataFactory::GetInstance(void)
      public:
      };

      class CSRDataIntegrityRuleManager
      {
        // Functions:
        public: void sophis::dataIntegrity::CSRDataIntegrityRuleManager::Check(class sophis::dataIntegrity::CSRDataIntegrityMarketData &, enum NSREnums::eParameterModificationType, enum sophis::dataIntegrity::eProcessStage)
        // Static functions:
        public: static class sophis::dataIntegrity::CSRDataIntegrityRuleManager & sophis::dataIntegrity::CSRDataIntegrityRuleManager::GetInstance(void)
      public:
      };


    };

    namespace/*or class/struct?*/ event
    {
      // Nested containers:
      class/*or struct*/ CSCurrencyBankHolidaysUpdate
      {
        // Functions:
        public: sophis::event::CSCurrencyBankHolidaysUpdate::CSCurrencyBankHolidaysUpdate(long const &)
#if 0 // All found virtual functions names:
        public: virtual sophis::event::CSCurrencyBankHolidaysUpdate::~CSCurrencyBankHolidaysUpdate(void)
#endif

      public:
      };

      class CSHistoricPriceData
      {
        // Functions:
        public: sophis::event::CSHistoricPriceData::CSHistoricPriceData(void)
        public: sophis::event::CSHistoricPriceData::~CSHistoricPriceData(void)
        public: void sophis::event::CSHistoricPriceData::ResizeExtraValues(unsigned __int64)
        public: void sophis::event::CSHistoricPriceData::SetAsk(double const &)
        public: void sophis::event::CSHistoricPriceData::SetBeta(double const &)
        public: void sophis::event::CSHistoricPriceData::SetBid(double const &)
        public: void sophis::event::CSHistoricPriceData::SetDate(long const &)
        public: void sophis::event::CSHistoricPriceData::SetExtraValuesAt(unsigned __int64, double const &)
        public: void sophis::event::CSHistoricPriceData::SetHigh(double const &)
        public: void sophis::event::CSHistoricPriceData::SetLast(double const &)
        public: void sophis::event::CSHistoricPriceData::SetLow(double const &)
        public: void sophis::event::CSHistoricPriceData::SetOpen(double const &)
        public: void sophis::event::CSHistoricPriceData::SetSico(long const &)
        public: void sophis::event::CSHistoricPriceData::SetTable(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
      public:
      };

      class/*or struct*/ CSProvisionCreationGroup
      {
#if 0 // All found virtual functions names:
        public: virtual sophis::event::CSProvisionCreationGroup::~CSProvisionCreationGroup(void)
#endif

      public:
      };

      class ISEventManager
      {
      public:
      };


      // Variables:
      class ISEventManager &gEvtMgr
    };

    namespace/*or class/struct?*/ finance
    {
      // Nested containers:
      class CSRABSBond
      {
        // Functions:
        public: class sophis::finance::CSRABSCashFlows * sophis::finance::CSRABSBond::GetABSCashFlows(void) const
        public: class sophis::finance::CSRABSSpecific * sophis::finance::CSRABSBond::GetABSSpecific(void) const
      public:
      };

      class CSRABSCashFlows
      {
        // Functions:
        public: void sophis::finance::CSRABSCashFlows::DescribeABSScenario(class sophis::tools::dataModel::DataSet &, char const *, char const *, class sophis::finance::CSRABSBond const *, long)
        public: void sophis::finance::CSRABSCashFlows::DescribeABSScenarioList(class sophis::tools::dataModel::DataSet &, char const *, char const *, class sophis::finance::CSRABSBond const *)
      public:
      };

      class CSRABSSpecific
      {
        // Functions:
        public: long sophis::finance::CSRABSSpecific::GetCashFlowScenario(void) const
      public:
      };

      class CSRBasketSwap
      {
      public:
      };


    };

    class/*or struct*/ fpmlEngine
    {
      // Functions:
      void InstallAPIEntityHandlers(void)
    public:
    };

    namespace/*or class/struct?*/ inflation
    {
      // Nested containers:
      class CSRSeasonality
      {
        // Static functions:
        public: static class sophis::inflation::CSRSeasonality & sophis::inflation::CSRSeasonality::GetInstance(void)
      public:
      };

      class CSRSeasonalityData
      {
        // Functions:
        public: void sophis::inflation::CSRSeasonalityData::GetDescription_API(class sophis::tools::dataModel::DataSet &) const
        public: void sophis::inflation::CSRSeasonalityData::MultiSave(enum NSREnums::eParameterModificationType, class sophis::tools::CSREventVector &, double) const
        public: void sophis::inflation::CSRSeasonalityData::SetIndexCode(long)
        public: void sophis::inflation::CSRSeasonalityData::UpdateFromDescription_API(class sophis::tools::dataModel::DataSet const &)
      public:
      };


    };

    class/*or struct*/ instrument
    {
    public:
      // Enumerations:
      enum eAskQuotationType : int {
      };
      enum eInstrumentType : int {
      };
      enum eOptimisationType : int {
      };
      enum eUnderlyingComputationType : int {
      };

      // Nested containers:
      class CSRForexSpot
      {
        // Static functions:
        public: static class sophis::instrument::CSRForexSpot * sophis::instrument::CSRForexSpot::new_CSRForexSpot(long, long)
      public:
      };

      class CSRInflationIndex
      {
        // Static functions:
        public: static class sophis::instrument::CSRInflationIndex const * sophis::instrument::CSRInflationIndex::GetCSRInflationIndex(long)
      public:
      };

      class CSRInstrument
      {
        // Functions:
        public: class sophis::instrument::CSRInstrument * sophis::instrument::CSRInstrument::Clone_API(void) const
        public: void sophis::instrument::CSRInstrument::GetDescription_API(class sophis::tools::dataModel::DataSet &) const
        public: double sophis::instrument::CSRInstrument::GetFixing(long, class sophis::static_data::CSRHistoricalData const &, long, bool) const
        public: short sophis::instrument::CSRInstrument::GetRicFid(void) const
        public: void sophis::instrument::CSRInstrument::MultiSave(class sophis::tools::CSREventVector &, enum NSREnums::eParameterModificationType)
        public: struct sophis::instrument::SSHistory * sophis::instrument::CSRInstrument::NEW_HistoryList(long, long, int *, class sophis::static_data::CSRHistoricalData const &) const
        public: void sophis::instrument::CSRInstrument::SetModified(bool)
        public: void sophis::instrument::CSRInstrument::UpdateFromDescription_API(class sophis::tools::dataModel::DataSet const &)
        public: void sophis::instrument::CSRInstrument::reserveCode(long)
        // Static functions:
        public: static class sophis::instrument::CSRInstrument * sophis::instrument::CSRInstrument::CreateFromDescription(class sophis::tools::dataModel::DataSet const &)
        public: static class sophis::instrument::CSRInstrument const * sophis::instrument::CSRInstrument::GetInstance(long)
#if 0 // All found virtual functions names:
        public: virtual struct sophis::DAL::InstrumentData const * sophis::instrument::CSRInstrument::GetDTitre(void) const
#endif

      public:
      };

      class CSRInstrumentChecker
      {
        // Static functions:
        public: static class sophis::instrument::CSRInstrumentChecker const * sophis::instrument::CSRInstrumentChecker::GetInstance(void)
      public:
      };

      class/*or struct*/ CSRInstrumentType
      {
        // Static functions:
        public: static int sophis::instrument::CSRInstrumentType::GetType(class sophis::instrument::CSRInstrument const &)
      public:
      };

      class CSRLeg
      {
      public:
      };

      class CSROption
      {
        // Functions:
        public: struct sophis::DAL::OptionInstrumentData ** sophis::instrument::CSROption::GetProduit(unsigned char) const
        public: void sophis::instrument::CSROption::SetModelByName(char const *)
        public: void sophis::instrument::CSROption::SetModelDialog(char const *, bool)
        public: bool const sophis::instrument::CSROption::SetOptimisationType(enum sophis::instrument::eOptimisationType)
        public: bool const sophis::instrument::CSROption::SetUnderlyingComputationType(enum sophis::instrument::eUnderlyingComputationType)
        public: void sophis::instrument::CSROption::SetValidation(bool)
        // Static functions:
        public: static class sophis::instrument::CSROption * sophis::instrument::CSROption::CreateInstance(char const *)
      public:
      };

      class/*or struct*/ CSRSwap
      {
#if 0 // All found virtual functions names:
        public: virtual class sophis::instrument::CSRLeg const * sophis::instrument::CSRSwap::GetLeg(int) const
#endif

      public:
      };

      struct SSHistory
      {
      public:
      };


      // Functions:
      void DescribeIdentifiers(class sophis::tools::dataModel::DataSet &, long, char const *, bool, char const *)
      long FindIdentifiers(class sophis::tools::dataModel::DataSet const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> *, bool, class std::list<struct std::pair<char const *, char const *>, class std::allocator<struct std::pair<char const *, char const *>>> *)
      long FindIdentifiers(class sophis::tools::dataModel::DataSet const &, bool, class std::list<struct std::pair<char const *, char const *>, class std::allocator<struct std::pair<char const *, char const *>>> *)
      class std::set<long, struct std::less<long>, class std::allocator<long>> FindMultipleIdentifiers(class sophis::tools::dataModel::DataSet const &, bool)
      bool UpdateABSBondCashFlow(class sophis::finance::CSRABSBond *, class sophis::tools::dataModel::DataSet const &)
      void UpdateIdentifiers(class sophis::tools::dataModel::DataSet const &, class CSRInstrument &)
      void UpdateInstrumentRatings(class CSRInstrument *, class sophis::tools::dataModel::DataSet const &)
      long UpdateUnderlyer(class sophis::tools::dataModel::Data const &)
    public:
    };

    namespace/*or class/struct?*/ license
    {
      // Enumerations:
      enum EFeature : int {
      };
      enum ELMStatus : int {
      };

      // Nested containers:
      class LMInterface
      {
        // Functions:
        public: enum sophis::license::ELMStatus sophis::license::LMInterface::CheckoutLicense(enum sophis::license::EFeature)
        // Static functions:
        public: static class sophis::license::LMInterface * sophis::license::LMInterface::GetInstance(void)
      public:
      };


    };

    namespace/*or class/struct?*/ listed_market
    {
      // Nested containers:
      class CSMarcheListe
      {
      public:
      };

      class CSRListedMarket
      {
        // Functions:
        protected: sophis::listed_market::CSRListedMarket::CSRListedMarket(long)
        public: class sophis::listed_market::CSRListedMarket * sophis::listed_market::CSRListedMarket::Clone(void) const
        public: void sophis::listed_market::CSRListedMarket::DescribeSeries(class sophis::tools::dataModel::DataSet &, class std::vector<struct sophis::listed_market::SeriesKey, class std::allocator<struct sophis::listed_market::SeriesKey>> const *) const
        public: void sophis::listed_market::CSRListedMarket::GetDescription_API(class sophis::tools::dataModel::DataSet &) const
        public: void sophis::listed_market::CSRListedMarket::Save(int)
        // Static functions:
        public: static void sophis::listed_market::CSRListedMarket::DescribeIdentifiers(class sophis::tools::dataModel::DataSet &, long)
        public: static long sophis::listed_market::CSRListedMarket::FindIdentifiers(class sophis::tools::dataModel::DataSet const &, bool)
        public: static class sophis::listed_market::CSRListedMarket const * sophis::listed_market::CSRListedMarket::GetCSRListedMarket(long)
#if 0 // All found virtual functions names:
        public: virtual sophis::listed_market::CSRListedMarket::~CSRListedMarket(void)
        public: virtual char const * sophis::listed_market::CSRListedMarket::GetXMLRootName(void) const
        public: virtual void sophis::listed_market::CSRListedMarket::UpdateFromDescription(class sophis::tools::dataModel::DataSet const &)
#endif

        // VFTable. Offset=0, Size=3, Start=0
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual sophis::listed_market::CSRListedMarket::~CSRListedMarket(void); // 0
        public: virtual void sophis::listed_market::CSRListedMarket::UpdateFromDescription(class sophis::tools::dataModel::DataSet const &); // 1
        public: virtual char const * sophis::listed_market::CSRListedMarket::GetXMLRootName(void) const; // 2
        // VFTable with 0 offset end

      public:
      };

      struct SeriesKey
      {
      public:
      };

      class/*or struct*/ TMO_definition
      {
        // Functions:
        public: sophis::listed_market::TMO_definition::TMO_definition(void)
        public: sophis::listed_market::TMO_definition::~TMO_definition(void)
        public: void sophis::listed_market::TMO_definition::Initialise(class sophis::listed_market::CSMarcheListe *)
      public:
      };


    };

    namespace/*or class/struct?*/ market_data
    {
      // Nested containers:
      class CSHistoColumn
      {
        // Variables:
        public: static class sophis::market_data::CSHistoColumn sophis::market_data::CSHistoColumn::global
      public:
      };

      class CSRCorporateActionMgr
      {
        // Functions:
        public: sophis::market_data::CSRCorporateActionMgr::CSRCorporateActionMgr(void)
        public: void sophis::market_data::CSRCorporateActionMgr::GetDescription_API(class sophis::tools::dataModel::DataSet &) const
        public: void sophis::market_data::CSRCorporateActionMgr::MultiSaveWithUpdates(class sophis::tools::CSREventVector &)
        public: void sophis::market_data::CSRCorporateActionMgr::UpdateFromDescription_API(class sophis::tools::dataModel::DataSet const &)
        public: void sophis::market_data::CSRCorporateActionMgr::UpdateFromSicovam(long)
#if 0 // All found virtual functions names:
        public: virtual sophis::market_data::CSRCorporateActionMgr::~CSRCorporateActionMgr(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual sophis::market_data::CSRCorporateActionMgr::~CSRCorporateActionMgr(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class CSRCorrelation
      {
        // Functions:
        public: void sophis::market_data::CSRCorrelation::DescribeIdentifiers(class sophis::tools::dataModel::DataSet &) const
        public: void sophis::market_data::CSRCorrelation::GetDescription_API(class sophis::tools::dataModel::DataSet &) const
        public: void sophis::market_data::CSRCorrelation::MultiSave(enum NSREnums::eParameterModificationType, class sophis::tools::CSREventVector &)
        public: void sophis::market_data::CSRCorrelation::MultiSave(enum NSREnums::eParameterModificationType, class sophis::tools::CSREventVector &, double)
        public: void sophis::market_data::CSRCorrelation::UpdateFromDescription_API(class sophis::tools::dataModel::DataSet const &)
        // Static functions:
        public: static class sophis::market_data::CSRCorrelation * sophis::market_data::CSRCorrelation::CreateInstance(long, long)
        public: static class sophis::market_data::CSRCorrelation * sophis::market_data::CSRCorrelation::CreateInstance(long, long, double)
        public: static class sophis::market_data::CSRCorrelation const * sophis::market_data::CSRCorrelation::GetCorrelation(long, long)
      public:
      };

      class CSRCreditRiskMgr
      {
        // Functions:
        public: sophis::market_data::CSRCreditRiskMgr::CSRCreditRiskMgr(struct sophis::DAL::SSCreditRiskMgrParameters const &)
        public: sophis::market_data::CSRCreditRiskMgr::~CSRCreditRiskMgr(void)
        public: class sophis::market_data::CSRCreditRiskMgr * sophis::market_data::CSRCreditRiskMgr::Clone(void) const
        public: void sophis::market_data::CSRCreditRiskMgr::GetDescription_API(class sophis::tools::dataModel::DataSet &)
        public: int sophis::market_data::CSRCreditRiskMgr::Load(void)
        public: int sophis::market_data::CSRCreditRiskMgr::LoadHisto(long, long)
        public: int sophis::market_data::CSRCreditRiskMgr::LoadModel(void)
        public: void sophis::market_data::CSRCreditRiskMgr::MultiSave(enum NSREnums::eParameterModificationType, class sophis::tools::CSREventVector &)
        public: void sophis::market_data::CSRCreditRiskMgr::MultiSaveHisto(enum NSREnums::eParameterModificationType, class sophis::tools::CSREventVector &, long, long)
        public: void sophis::market_data::CSRCreditRiskMgr::MultiSaveHisto(enum NSREnums::eParameterModificationType, class sophis::tools::CSREventVector &, double)
        public: void sophis::market_data::CSRCreditRiskMgr::UpdateFromDescription_API(class sophis::tools::dataModel::DataSet const &)
      public:
      };

      class CSRDividend : public vector<struct sophis::market_data::SSDividend, class std::allocator<struct sophis::market_data::SSDividend>>
      {
        // Functions:
        public: sophis::market_data::CSRDividend::CSRDividend(struct TableauDefProd **, long, struct sophis::DAL::InstrumentData const *)
        public: sophis::market_data::CSRDividend::CSRDividend(void)
        public: void sophis::market_data::CSRDividend::GetDescription_API(class sophis::tools::dataModel::DataSet &) const
        public: void sophis::market_data::CSRDividend::MultiSave(enum NSREnums::eParameterModificationType, class sophis::tools::CSREventVector &, long)
        public: void sophis::market_data::CSRDividend::MultiSave(enum NSREnums::eParameterModificationType, class sophis::tools::CSREventVector &, long, double)
        public: void sophis::market_data::CSRDividend::SetInstrumentId(long)
        public: void sophis::market_data::CSRDividend::UpdateFromDescription_API(class sophis::tools::dataModel::DataSet const &)
        // Static functions:
        public: static class sophis::market_data::CSRDividend * sophis::market_data::CSRDividend::New_CSRDividend(long, long)
        public: static class sophis::market_data::CSRDividend * sophis::market_data::CSRDividend::New_CSRDividend(long, double)
#if 0 // All found virtual functions names:
        public: virtual sophis::market_data::CSRDividend::~CSRDividend(void)
        protected: virtual char const * sophis::market_data::CSRDividend::GetXMLRootName(void) const
        protected: virtual void sophis::market_data::CSRDividend::UpdateFromDescription(class sophis::tools::dataModel::DataSet const &)
        public: virtual void sophis::market_data::CSRDividend::UpdateFromDescription_Light(class sophis::tools::dataModel::DataSet const &)
#endif

        // VFTable. Offset=0, Size=4, Start=0
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual sophis::market_data::CSRDividend::~CSRDividend(void); // 0
        public: virtual void sophis::market_data::CSRDividend::UpdateFromDescription_Light(class sophis::tools::dataModel::DataSet const &); // 1
        protected: virtual char const * sophis::market_data::CSRDividend::GetXMLRootName(void) const; // 2
        protected: virtual void sophis::market_data::CSRDividend::UpdateFromDescription(class sophis::tools::dataModel::DataSet const &); // 3
        // VFTable with 0 offset end

      public:
      };

      class CSRHistoric
      {
        // Functions:
        public: sophis::market_data::CSRHistoric::CSRHistoric(void)
        public: double * sophis::market_data::CSRHistoric::col_sup(void)
        // Static functions:
        public: static void * sophis::market_data::CSRHistoric::operator new(unsigned __int64)
      public:
      };

      class CSRMarketData
      {
        // Functions:
        public: long sophis::market_data::CSRMarketData::GetInflationFamilyCode(long) const
      public:
      };

      class CSRRepoMargin : public vector<struct sophis::DAL::SSRepoMargin, class std::allocator<struct sophis::DAL::SSRepoMargin>>
      {
        // Functions:
        public: sophis::market_data::CSRRepoMargin::CSRRepoMargin(struct TableauDefProd **, long)
        public: sophis::market_data::CSRRepoMargin::CSRRepoMargin(void)
        public: void sophis::market_data::CSRRepoMargin::GetDescription_API(class sophis::tools::dataModel::DataSet &) const
        public: void sophis::market_data::CSRRepoMargin::MultiSave(enum NSREnums::eParameterModificationType, class sophis::tools::CSREventVector &)
        public: void sophis::market_data::CSRRepoMargin::MultiSave(enum NSREnums::eParameterModificationType, class sophis::tools::CSREventVector &, double)
        public: void sophis::market_data::CSRRepoMargin::SetInstrumentId(long)
        public: void sophis::market_data::CSRRepoMargin::UpdateFromDescription_API(class sophis::tools::dataModel::DataSet const &)
        // Static functions:
        public: static class sophis::market_data::CSRRepoMargin * sophis::market_data::CSRRepoMargin::New_CSRRepoMargin(long, long)
        public: static class sophis::market_data::CSRRepoMargin * sophis::market_data::CSRRepoMargin::New_CSRRepoMargin(long, double)
#if 0 // All found virtual functions names:
        public: virtual sophis::market_data::CSRRepoMargin::~CSRRepoMargin(void)
        protected: virtual char const * sophis::market_data::CSRRepoMargin::GetXMLRootName(void) const
        protected: virtual void sophis::market_data::CSRRepoMargin::UpdateFromDescription(class sophis::tools::dataModel::DataSet const &)
#endif

        // VFTable. Offset=0, Size=3, Start=0
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual sophis::market_data::CSRRepoMargin::~CSRRepoMargin(void); // 0
        protected: virtual char const * sophis::market_data::CSRRepoMargin::GetXMLRootName(void) const; // 1
        protected: virtual void sophis::market_data::CSRRepoMargin::UpdateFromDescription(class sophis::tools::dataModel::DataSet const &); // 2
        // VFTable with 0 offset end

      public:
      };

      class CSRVolatility
      {
        // Functions:
        public: class sophis::market_data::CSRVolatility * sophis::market_data::CSRVolatility::CloneWithNewModel(char const *) const
        public: void sophis::market_data::CSRVolatility::GetDescription_API(class sophis::tools::dataModel::DataSet &) const
        public: void sophis::market_data::CSRVolatility::GetModel(char *) const
        public: void sophis::market_data::CSRVolatility::MultiSave(enum NSREnums::eParameterModificationType, class sophis::tools::CSREventVector &, long)
        public: void sophis::market_data::CSRVolatility::MultiSave(enum NSREnums::eParameterModificationType, class sophis::tools::CSREventVector &, long, double)
        public: void sophis::market_data::CSRVolatility::UpdateFromDescription_API(class sophis::tools::dataModel::DataSet const &)
        // Static functions:
        public: static class sophis::market_data::CSRVolatility const * sophis::market_data::CSRVolatility::GetCSRVolatility(long)
        public: static class sophis::market_data::CSRVolatility * sophis::market_data::CSRVolatility::new_CSRVolatility(long, long, long, class sophis::market_data::SSVolatilityReplicationCursor *)
        public: static class sophis::market_data::CSRVolatility * sophis::market_data::CSRVolatility::new_CSRVolatility(long, double, class sophis::market_data::SSVolatilityReplicationCursor *)
        public: static class sophis::market_data::CSRVolatility * sophis::market_data::CSRVolatility::new_CSRVolatility(long, class sophis::market_data::SSVolatilityReplicationCursor *)
      public:
      };

      class CSRYieldCurve
      {
        // Functions:
        public: class sophis::market_data::CSRYieldCurve * sophis::market_data::CSRYieldCurve::Clone_API(void) const
        public: void sophis::market_data::CSRYieldCurve::GetDescription_API(class sophis::tools::dataModel::DataSet &) const
        public: void sophis::market_data::CSRYieldCurve::MultiSave(class sophis::tools::CSREventVector &)
        public: void sophis::market_data::CSRYieldCurve::UpdateFromDescription_API(class sophis::tools::dataModel::DataSet const &)
        // Static functions:
        public: static class sophis::market_data::CSRYieldCurve * sophis::market_data::CSRYieldCurve::CreateInstance(struct sophis::market_data::SSYieldCurve const &)
        public: static void sophis::market_data::CSRYieldCurve::DescribeIdentifiers(long, class sophis::tools::dataModel::DataSet &, bool)
        public: static long sophis::market_data::CSRYieldCurve::FindIdentifiers(class sophis::tools::dataModel::DataSet const &, bool)
        public: static class sophis::market_data::CSRYieldCurve const * sophis::market_data::CSRYieldCurve::GetCSRYieldCurve(long)
      public:
      };

      class ISRBaselineManager
      {
        // Static functions:
        public: static class sophis::market_data::ISRBaselineManager * sophis::market_data::ISRBaselineManager::getInstance(void)
      public:
      };

      template<typename T1      >
      class/*or struct*/ RefCountHandleDeleteEvent
      {
      public:
      };
#if 0 // Instances:
// <class sophis::market_data::dataModel::YieldCurveHistoric>
#if 0
      template<>
      class/*or struct*/ RefCountHandleDeleteEvent<class sophis::market_data::dataModel::YieldCurveHistoric> : public CSRAbstractEvent
      {
        // VFTable. Offset=0, Size=2, Start=0
        // Corresponding base: tools::tools::CSRAbstractEvent
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


      struct SSDividend
      {
      public:
      };

      class SSVolatilityReplicationCursor
      {
      public:
      };

      struct SSYieldCurve
      {
        // Functions:
        public: sophis::market_data::SSYieldCurve::SSYieldCurve(void)
        public: void sophis::market_data::SSYieldCurve::UpdateFromDescription_API(class sophis::tools::dataModel::DataSet const &)
#if 0 // All found virtual functions names:
        public: virtual sophis::market_data::SSYieldCurve::~SSYieldCurve(void)
#endif

      public:
      };

      namespace/*or class/struct?*/ converters
      {
        // Nested containers:
        class/*or struct*/ CSRMisysToInternalXMLConverter
        {
          // Static functions:
          public: static class sophis::tools::dataModel::Data * sophis::market_data::converters::CSRMisysToInternalXMLConverter::Convert(class sophis::tools::dataModel::Data const &)
          public: static class sophis::tools::dataModel::Data * sophis::market_data::converters::CSRMisysToInternalXMLConverter::ConvertBack(class sophis::tools::dataModel::Data const &)
        public:
        };


      };

      namespace/*or class/struct?*/ dataModel
      {
        // Nested containers:
        class/*or struct*/ CurveHistoric
        {
          // Functions:
          public: void sophis::market_data::dataModel::CurveHistoric::getDescription(class sophis::tools::dataModel::DataSet &) const
          public: void sophis::market_data::dataModel::CurveHistoric::multiSave(class sophis::tools::CSREventVector &, enum NSREnums::eParameterModificationType)
          public: void sophis::market_data::dataModel::CurveHistoric::updateFromDescription(class sophis::tools::dataModel::DataSet const &)
#if 0 // All found virtual functions names:
          private: virtual void sophis::market_data::dataModel::CurveHistoric::Send(void)
#endif

        public:
        };

        class/*or struct*/ TermCurve
        {
          // Functions:
          public: sophis::market_data::dataModel::TermCurve::TermCurve(struct sophis::market_data::SSYieldCurve const &, class sophisTools::base::RefCountHandle<struct sophis::valuation::dataModel::InstrumentSet>)
          public: void sophis::market_data::dataModel::TermCurve::`vbase dtor'(void)
        public:
        };

        class YieldCurveHistoric
        {
          // Functions:
          public: sophis::market_data::dataModel::YieldCurveHistoric::YieldCurveHistoric(long)
          public: void sophis::market_data::dataModel::YieldCurveHistoric::`vbase dtor'(void)
          // Static functions:
          public: static class sophisTools::base::RefCountHandle<class sophis::market_data::dataModel::YieldCurveHistoric> sophis::market_data::dataModel::YieldCurveHistoric::find(long)
#if 0 // All found virtual functions names:
          private: virtual class sophis::tools::dataModel::DataSet & sophis::market_data::dataModel::YieldCurveHistoric::DescribeIdentifiers(long, class sophis::tools::dataModel::DataSet &) const
          private: virtual class sophis::dataIntegrity::CSRDataIntegrityMarketData * sophis::market_data::dataModel::YieldCurveHistoric::GetDataIntegrityMarketData(class sophis::dataIntegrity::CSRDataIntegrityMarketDataFactory *) const
          private: virtual void sophis::market_data::dataModel::YieldCurveHistoric::getCSRCurve(long)
          private: virtual struct sophis::market_data::SSYieldCurve const * sophis::market_data::dataModel::YieldCurveHistoric::getSSYieldCurve(void) const
          private: virtual struct sophis::market_data::SSYieldCurve const * sophis::market_data::dataModel::YieldCurveHistoric::getSSYieldCurveForRead(long) const
          private: virtual void sophis::market_data::dataModel::YieldCurveHistoric::multiSaveData(long, struct sophis::market_data::SSYieldCurve *, double, class sophis::tools::CSREventVector &)
#endif

          // VFTable. Offset=0, Size=8, Start=0
          // Owner: SophisXmlTools.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          private: virtual class sophis::tools::dataModel::DataSet & sophis::market_data::dataModel::YieldCurveHistoric::DescribeIdentifiers(long, class sophis::tools::dataModel::DataSet &) const; // 2
          private: virtual struct sophis::market_data::SSYieldCurve const * sophis::market_data::dataModel::YieldCurveHistoric::getSSYieldCurveForRead(long) const; // 3
          private: virtual void sophis::market_data::dataModel::YieldCurveHistoric::getCSRCurve(long); // 4
          private: virtual struct sophis::market_data::SSYieldCurve const * sophis::market_data::dataModel::YieldCurveHistoric::getSSYieldCurve(void) const; // 5
          private: virtual void sophis::market_data::dataModel::YieldCurveHistoric::multiSaveData(long, struct sophis::market_data::SSYieldCurve *, double, class sophis::tools::CSREventVector &); // 6
          private: virtual class sophis::dataIntegrity::CSRDataIntegrityMarketData * sophis::market_data::dataModel::YieldCurveHistoric::GetDataIntegrityMarketData(class sophis::dataIntegrity::CSRDataIntegrityMarketDataFactory *) const; // 7
          // VFTable with 0 offset end

          // VFTable. Offset=64, Size=4, Start=0
          // Owner: SophisXmlTools.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_64_0(void); // 0
          public: virtual void unknown_vf_64_1(void); // 1
          public: virtual void unknown_vf_64_2(void); // 2
          public: virtual void unknown_vf_64_3(void); // 3
#endif
          // VFTable with 64 offset end

        public:
        };


      };

      class/*or struct*/ tag_col
      {
        // Functions:
        public: sophis::market_data::tag_col::tag_col(void)
      public:
      };


      // Variables:
      class CSRMarketData *gApplicationContext
    };

    namespace/*or class/struct?*/ misc
    {
      // Nested containers:
      class/*or struct*/ BasicLocalResource
      {
        // Functions:
        protected: void sophis::misc::BasicLocalResource::name(char const *)
#if 0 // All found virtual functions names:
        public: virtual void sophis::misc::BasicLocalResource::_add_ref(void)
        public: virtual void sophis::misc::BasicLocalResource::_remove_ref(void)
        public: virtual long sophis::misc::BasicLocalResource::getRef(void) const
        public: virtual char const * sophis::misc::BasicLocalResource::name(void) const
#endif

      public:
      };

      class/*or struct*/ CSRTranscodificationData
      {
        // Functions:
        public: sophis::misc::CSRTranscodificationData::CSRTranscodificationData(long)
        public: sophis::misc::CSRTranscodificationData::~CSRTranscodificationData(void)
        public: long sophis::misc::CSRTranscodificationData::GetInternalId(long, long, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>) const
      public:
      };

      class/*or struct*/ CSRTranscodificationSources
      {
        // Functions:
        public: sophis::misc::CSRTranscodificationSources::CSRTranscodificationSources(void)
        public: long sophis::misc::CSRTranscodificationSources::GetSourceId(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>) const
      public:
      };

      class/*or struct*/ CSRTranscodificationType
      {
        // Functions:
        public: sophis::misc::CSRTranscodificationType::CSRTranscodificationType(void)
        public: long sophis::misc::CSRTranscodificationType::GetTypeId(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>) const
      public:
      };

      class/*or struct*/ LocalResource : public RefCount
      {
      public:
      };

      class LocalSession
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophis::misc::LocalSession> sophis::misc::LocalSession::getLocalSession(void)
      public:
      };

      namespace/*or class/struct?*/ dataModel
      {
        // Nested containers:
        class DuplicateEntity : public FpmlEngineException
        {
          // Functions:
          protected: sophis::misc::dataModel::DuplicateEntity::DuplicateEntity(class sophis::misc::dataModel::DuplicateEntity const &)
          protected: sophis::misc::dataModel::DuplicateEntity::DuplicateEntity(char const *)
#if 0 // All found virtual functions names:
          public: virtual sophis::misc::dataModel::DuplicateEntity::~DuplicateEntity(void)
#endif

        public:
        };

        class FpmlEngineException : public ExceptionBase
        {
          // Functions:
          protected: sophis::misc::dataModel::FpmlEngineException::FpmlEngineException(class sophis::misc::dataModel::FpmlEngineException const &)
#if 0 // All found virtual functions names:
          protected: virtual sophis::misc::dataModel::FpmlEngineException::~FpmlEngineException(void)
#endif

        public:
        };

        class FpmlEntityChecker
        {
        public:
          // Enumerations:
          enum FpmlEntityCheckerType : int {
          };

          // Functions:
          public: sophis::misc::dataModel::FpmlEntityChecker::FpmlEntityChecker(void)
          // Static functions:
          public: static class sophisTools::base::RefCountHandle<class sophis::misc::dataModel::FpmlEntityChecker> sophis::misc::dataModel::FpmlEntityChecker::createInstance(enum sophis::misc::dataModel::FpmlEntityChecker::FpmlEntityCheckerType)
#if 0 // All found virtual functions names:
          public: virtual sophis::misc::dataModel::FpmlEntityChecker::~FpmlEntityChecker(void)
#endif

        public:
        };

        class FpmlEntityHandler
        {
          // Functions:
          public: sophis::misc::dataModel::FpmlEntityHandler::FpmlEntityHandler(void)
          // Static functions:
          public: static class sophisTools::base::RefCountHandle<class sophis::misc::dataModel::FpmlEntityHandler> sophis::misc::dataModel::FpmlEntityHandler::createInstance(char const *, char const *)
          public: static class sophisTools::base::RefCountHandle<class sophis::misc::dataModel::FpmlEntityHandler> sophis::misc::dataModel::FpmlEntityHandler::createInstance(char const *)
          public: static void sophis::misc::dataModel::FpmlEntityHandler::installPrototype(char const *, char const *, class sophisTools::base::RefCountHandle<class sophis::misc::dataModel::FpmlEntityHandler>)
          public: static void sophis::misc::dataModel::FpmlEntityHandler::installPrototype(char const *, class sophisTools::base::RefCountHandle<class sophis::misc::dataModel::FpmlEntityHandler>)
#if 0 // All found virtual functions names:
          public: virtual sophis::misc::dataModel::FpmlEntityHandler::~FpmlEntityHandler(void)
          public: virtual void sophis::misc::dataModel::FpmlEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &, void *)
          public: virtual void sophis::misc::dataModel::FpmlEntityHandler::create(class sophis::tools::dataModel::Data const &, void *)
          public: virtual void sophis::misc::dataModel::FpmlEntityHandler::find(__int64)
          public: virtual void sophis::misc::dataModel::FpmlEntityHandler::find(__int64, void *)
          public: virtual void sophis::misc::dataModel::FpmlEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &, void *)
          public: virtual void sophis::misc::dataModel::FpmlEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &, void *)
#endif

        public:
        };

        class NoSuchEntity : public FpmlEngineException
        {
          // Functions:
          protected: sophis::misc::dataModel::NoSuchEntity::NoSuchEntity(class sophis::misc::dataModel::NoSuchEntity const &)
          protected: sophis::misc::dataModel::NoSuchEntity::NoSuchEntity(char const *)
          protected: sophis::misc::dataModel::NoSuchEntity::NoSuchEntity(char const *, long)
#if 0 // All found virtual functions names:
          public: virtual sophis::misc::dataModel::NoSuchEntity::~NoSuchEntity(void)
#endif

        public:
        };

        class/*or struct*/ UnknownReference : public DataModelException
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Corresponding base: dataModel::dataModel::dataModel::DataModelException
          // Owner: SophisXmlTools.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

        public:
        };

        class WrongCheckEntity : public FpmlEngineException
        {
          // Functions:
          protected: sophis::misc::dataModel::WrongCheckEntity::WrongCheckEntity(class sophis::misc::dataModel::WrongCheckEntity const &)
          protected: sophis::misc::dataModel::WrongCheckEntity::WrongCheckEntity(char const *, char const *)
#if 0 // All found virtual functions names:
          public: virtual sophis::misc::dataModel::WrongCheckEntity::~WrongCheckEntity(void)
#endif

        public:
        };


      };

      namespace/*or class/struct?*/ fpml
      {
        // Nested containers:
        class FpmlUtil
        {
          // Functions:
          public: class sophis::misc::fpml::FpmlUtil & sophis::misc::fpml::FpmlUtil::operator=(class sophis::misc::fpml::FpmlUtil &&)
          public: class sophis::misc::fpml::FpmlUtil & sophis::misc::fpml::FpmlUtil::operator=(class sophis::misc::fpml::FpmlUtil const &)
          // Static functions:
          public: static class sophis::tools::dataModel::Data & sophis::misc::fpml::FpmlUtil::buildEntityReference(class sophis::tools::dataModel::DataSet &, __int64, char const *)
          public: static class sophis::tools::dataModel::Data & sophis::misc::fpml::FpmlUtil::buildFolioReference(class sophis::tools::dataModel::DataSet &, unsigned long)
          public: static class sophis::tools::dataModel::Data & sophis::misc::fpml::FpmlUtil::buildInstrumentReference(class sophis::tools::dataModel::DataSet &, long)
          public: static class sophis::tools::dataModel::Data & sophis::misc::fpml::FpmlUtil::buildOrderReference(class sophis::tools::dataModel::DataSet &, unsigned long)
          public: static class sophis::tools::dataModel::Data & sophis::misc::fpml::FpmlUtil::buildPartyReference(class sophis::tools::dataModel::DataSet &, unsigned long)
          public: static class sophis::tools::dataModel::Data & sophis::misc::fpml::FpmlUtil::buildSrReference(class sophis::tools::dataModel::DataSet &, char const *, char const *)
          public: static class sophis::tools::dataModel::Data & sophis::misc::fpml::FpmlUtil::buildTradeReference(class sophis::tools::dataModel::DataSet &, __int64)
          public: static void sophis::misc::fpml::FpmlUtil::disablePortfolioColumnCache(void)
          public: static class sophisTools::base::RefCountHandle<class sophis::misc::dataModel::FpmlEntityHandler> sophis::misc::fpml::FpmlUtil::getFpmlEntityHandler(class sophis::tools::dataModel::Data const &)
          public: static class sophisTools::base::RefCountHandle<class sophis::misc::dataModel::FpmlEntityHandler> sophis::misc::fpml::FpmlUtil::getFpmlEntityHandler(char const *, char const *)
          public: static class sophisTools::base::RefCountHandle<class sophis::misc::dataModel::FpmlEntityHandler> sophis::misc::fpml::FpmlUtil::getFpmlEntityHandler(char const *)
          public: static class sophisTools::base::RefCountHandle<class sophis::misc::dataModel::FpmlEntityHandler> sophis::misc::fpml::FpmlUtil::getFpmlEntityHandlerForDerivativeMessage(void)
          public: static bool sophis::misc::fpml::FpmlUtil::getSnapshotDateAndId(class sophis::tools::dataModel::DataSet const &, long &, long &, bool &)
          public: static bool sophis::misc::fpml::FpmlUtil::getSnapshotDateTime(class sophis::tools::dataModel::DataSet const &, double &)
          // Variables:
          private: static char const *sophis::misc::fpml::FpmlUtil::__CLASS__
          public: static bool sophis::misc::fpml::FpmlUtil::fCreateOnlyIfValid
          public: static bool sophis::misc::fpml::FpmlUtil::fNotifyHistoric
          public: static bool sophis::misc::fpml::FpmlUtil::fValidateInstruments
        public:
        };

        namespace/*or class/struct?*/ alerts
        {
          // Nested containers:
          struct AlertStruct
          {
            // Functions:
            public: sophis::misc::fpml::alerts::AlertStruct::AlertStruct(struct sophis::misc::fpml::alerts::AlertStruct &&)
            public: sophis::misc::fpml::alerts::AlertStruct::AlertStruct(struct sophis::misc::fpml::alerts::AlertStruct const &)
            public: sophis::misc::fpml::alerts::AlertStruct::AlertStruct(void)
            public: sophis::misc::fpml::alerts::AlertStruct::~AlertStruct(void)
            public: struct sophis::misc::fpml::alerts::AlertStruct & sophis::misc::fpml::alerts::AlertStruct::operator=(struct sophis::misc::fpml::alerts::AlertStruct &&)
            public: struct sophis::misc::fpml::alerts::AlertStruct & sophis::misc::fpml::alerts::AlertStruct::operator=(struct sophis::misc::fpml::alerts::AlertStruct const &)
          public:
          };

          class AlertToolkit
          {
            // Functions:
            public: sophis::misc::fpml::alerts::AlertToolkit::AlertToolkit(class sophis::misc::fpml::alerts::AlertToolkit &&)
            public: sophis::misc::fpml::alerts::AlertToolkit::AlertToolkit(class sophis::misc::fpml::alerts::AlertToolkit const &)
            public: sophis::misc::fpml::alerts::AlertToolkit::AlertToolkit(void)
            public: class sophis::misc::fpml::alerts::AlertToolkit & sophis::misc::fpml::alerts::AlertToolkit::operator=(class sophis::misc::fpml::alerts::AlertToolkit &&)
            public: class sophis::misc::fpml::alerts::AlertToolkit & sophis::misc::fpml::alerts::AlertToolkit::operator=(class sophis::misc::fpml::alerts::AlertToolkit const &)
            // Static functions:
            public: static class sophis::tools::CSRPrototype<class sophis::misc::fpml::alerts::AlertToolkit, char const *, struct sophis::tools::less_char_star, class std::allocator<struct std::pair<char const *const, class sophis::misc::fpml::alerts::AlertToolkit *>>> & sophis::misc::fpml::alerts::AlertToolkit::GetPrototype(void)
            public: static class sophis::misc::fpml::alerts::AlertToolkit * sophis::misc::fpml::alerts::AlertToolkit::get_AlertToolkit(char const *)
            // Variables:
            private: static char const *sophis::misc::fpml::alerts::AlertToolkit::__CLASS__
            // VFTable. Offset=0, Size=2, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void) = 0; // 0
            public: virtual void unknown_vf_0_1(void) = 0; // 1
            // VFTable with 0 offset end

          public:
          };


        };

        namespace/*or class/struct?*/ entity
        {
          // Nested containers:
          class/*or struct*/ AttributesRemover
          {
            // VFTable. Offset=0, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            // VFTable with 0 offset end

            // VFTable. Offset=32, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_32_0(void); // 0
            public: virtual void unknown_vf_32_1(void); // 1
            public: virtual void unknown_vf_32_2(void); // 2
            public: virtual void unknown_vf_32_3(void); // 3
#endif
            // VFTable with 32 offset end

          public:
          };

          class BOSetupEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::BOSetupEntityHandler::BOSetupEntityHandler(class sophis::misc::fpml::entity::BOSetupEntityHandler const &)
            public: sophis::misc::fpml::entity::BOSetupEntityHandler::BOSetupEntityHandler(void)
            public: void sophis::misc::fpml::entity::BOSetupEntityHandler::`vbase dtor'(void)
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::BOSetupEntityHandler::~BOSetupEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::BOSetupEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::BOSetupEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::BOSetupEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::BOSetupEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::BOSetupEntityHandler::~BOSetupEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void unknown_vf_0_7(void); // 7
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::find(long); // 7
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::find(long, void *); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void unknown_vf_0_9(void); // 9
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::find(class sophis::tools::dataModel::Data const &); // 9
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::find(long); // 9
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::find(long, void *); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void unknown_vf_0_11(void); // 11
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::find(class sophis::tools::dataModel::Data const &); // 11
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::find(long); // 11
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void unknown_vf_0_13(void); // 13
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void unknown_vf_0_15(void); // 15
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 15
            // public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::BOSetupEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::BOSetupEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::BOSetupEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::BOSetupEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::BOSetupEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=184, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::BOSetupEntityHandler::~BOSetupEntityHandler(void); // 0
            public: virtual void unknown_vf_184_1(void); // 1
            public: virtual void unknown_vf_184_2(void); // 2
            public: virtual void unknown_vf_184_3(void); // 3
#endif
            // VFTable with 184 offset end

          public:
          };

          struct BSwapSearch
          {
            // Functions:
            public: sophis::misc::fpml::entity::BSwapSearch::BSwapSearch(void)
            public: struct sophis::misc::fpml::entity::BSwapSearch & sophis::misc::fpml::entity::BSwapSearch::operator=(struct sophis::misc::fpml::entity::BSwapSearch &&)
            public: struct sophis::misc::fpml::entity::BSwapSearch & sophis::misc::fpml::entity::BSwapSearch::operator=(struct sophis::misc::fpml::entity::BSwapSearch const &)
          public:
          };

          class CashFlowsEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::CashFlowsEntityHandler::CashFlowsEntityHandler(class sophis::misc::fpml::entity::CashFlowsEntityHandler const &)
            public: sophis::misc::fpml::entity::CashFlowsEntityHandler::CashFlowsEntityHandler(void)
            public: void sophis::misc::fpml::entity::CashFlowsEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::CashFlowsEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::CashFlowsEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::CashFlowsEntityHandler::~CashFlowsEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CashFlowsEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CashFlowsEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CashFlowsEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::CashFlowsEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::CashFlowsEntityHandler::~CashFlowsEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CashFlowsEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CashFlowsEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CashFlowsEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::CashFlowsEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::CashFlowsEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=104, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::CashFlowsEntityHandler::~CashFlowsEntityHandler(void); // 0
            public: virtual void unknown_vf_104_1(void); // 1
            public: virtual void unknown_vf_104_2(void); // 2
            public: virtual void unknown_vf_104_3(void); // 3
#endif
            // VFTable with 104 offset end

          public:
          };

          class CorporateActionEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::CorporateActionEntityHandler::CorporateActionEntityHandler(class sophis::misc::fpml::entity::CorporateActionEntityHandler const &)
            public: sophis::misc::fpml::entity::CorporateActionEntityHandler::CorporateActionEntityHandler(void)
            public: void sophis::misc::fpml::entity::CorporateActionEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::CorporateActionEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::CorporateActionEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::CorporateActionEntityHandler::~CorporateActionEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CorporateActionEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CorporateActionEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CorporateActionEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::CorporateActionEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::CorporateActionEntityHandler::~CorporateActionEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CorporateActionEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CorporateActionEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CorporateActionEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::CorporateActionEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::CorporateActionEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=104, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::CorporateActionEntityHandler::~CorporateActionEntityHandler(void); // 0
            public: virtual void unknown_vf_104_1(void); // 1
            public: virtual void unknown_vf_104_2(void); // 2
            public: virtual void unknown_vf_104_3(void); // 3
#endif
            // VFTable with 104 offset end

          public:
          };

          class CorrelationEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::CorrelationEntityHandler::CorrelationEntityHandler(class sophis::misc::fpml::entity::CorrelationEntityHandler const &)
            public: sophis::misc::fpml::entity::CorrelationEntityHandler::CorrelationEntityHandler(void)
            public: void sophis::misc::fpml::entity::CorrelationEntityHandler::`vbase dtor'(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::CorrelationEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::CorrelationEntityHandler::~CorrelationEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CorrelationEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CorrelationEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CorrelationEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::CorrelationEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::CorrelationEntityHandler::~CorrelationEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CorrelationEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CorrelationEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CorrelationEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::CorrelationEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::CorrelationEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=120, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::CorrelationEntityHandler::~CorrelationEntityHandler(void); // 0
            public: virtual void unknown_vf_120_1(void); // 1
            public: virtual void unknown_vf_120_2(void); // 2
            public: virtual void unknown_vf_120_3(void); // 3
#endif
            // VFTable with 120 offset end

          public:
          };

          class CreditDataEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::CreditDataEntityHandler::CreditDataEntityHandler(class sophis::misc::fpml::entity::CreditDataEntityHandler const &)
            public: sophis::misc::fpml::entity::CreditDataEntityHandler::CreditDataEntityHandler(void)
            public: void sophis::misc::fpml::entity::CreditDataEntityHandler::`vbase dtor'(void)
            public: void sophis::misc::fpml::entity::CreditDataEntityHandler::commit(class sophis::tools::CSREventVector &, long)
            public: long sophis::misc::fpml::entity::CreditDataEntityHandler::key(void)
            // Variables:
            public: static char const *sophis::misc::fpml::entity::CreditDataEntityHandler::NS
            private: static char const *sophis::misc::fpml::entity::CreditDataEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::CreditDataEntityHandler::~CreditDataEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CreditDataEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CreditDataEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CreditDataEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::CreditDataEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::CreditDataEntityHandler::~CreditDataEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void unknown_vf_0_15(void); // 15
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::create(class sophis::tools::dataModel::Data const &); // 15
            // public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void unknown_vf_0_17(void); // 17
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            // public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CreditDataEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CreditDataEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CreditDataEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::CreditDataEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::CreditDataEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=120, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::CreditDataEntityHandler::~CreditDataEntityHandler(void); // 0
            public: virtual void unknown_vf_120_1(void); // 1
            public: virtual void unknown_vf_120_2(void); // 2
            public: virtual void unknown_vf_120_3(void); // 3
#endif
            // VFTable with 120 offset end

          public:
          };

          class CreditDataHistoricEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::CreditDataHistoricEntityHandler(class sophis::misc::fpml::entity::CreditDataHistoricEntityHandler const &)
            public: sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::CreditDataHistoricEntityHandler(void)
            public: void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::~CreditDataHistoricEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::~CreditDataHistoricEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=112, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::CreditDataHistoricEntityHandler::~CreditDataHistoricEntityHandler(void); // 0
            public: virtual void unknown_vf_112_1(void); // 1
            public: virtual void unknown_vf_112_2(void); // 2
            public: virtual void unknown_vf_112_3(void); // 3
#endif
            // VFTable with 112 offset end

          public:
          };

          class CurrencyEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::CurrencyEntityHandler::CurrencyEntityHandler(class sophis::misc::fpml::entity::CurrencyEntityHandler const &)
            public: sophis::misc::fpml::entity::CurrencyEntityHandler::CurrencyEntityHandler(void)
            public: void sophis::misc::fpml::entity::CurrencyEntityHandler::`vbase dtor'(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::CurrencyEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::CurrencyEntityHandler::~CurrencyEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CurrencyEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CurrencyEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CurrencyEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::CurrencyEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::CurrencyEntityHandler::~CurrencyEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void unknown_vf_0_5(void); // 5
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::endSession(void); // 5
            // public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CurrencyEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CurrencyEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::CurrencyEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void unknown_vf_0_23(void); // 23
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::endSession(void); // 23
            // public: virtual void sophis::misc::fpml::entity::CurrencyEntityHandler::rollback(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::CurrencyEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=104, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::CurrencyEntityHandler::~CurrencyEntityHandler(void); // 0
            public: virtual void unknown_vf_104_1(void); // 1
            public: virtual void unknown_vf_104_2(void); // 2
            public: virtual void unknown_vf_104_3(void); // 3
#endif
            // VFTable with 104 offset end

          public:
          };

          class DailyDataEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::DailyDataEntityHandler::DailyDataEntityHandler(class sophis::misc::fpml::entity::DailyDataEntityHandler const &)
            public: sophis::misc::fpml::entity::DailyDataEntityHandler::DailyDataEntityHandler(void)
            public: void sophis::misc::fpml::entity::DailyDataEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::DailyDataEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::DailyDataEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::DailyDataEntityHandler::~DailyDataEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DailyDataEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DailyDataEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DailyDataEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::DailyDataEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::DailyDataEntityHandler::~DailyDataEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void unknown_vf_0_9(void); // 9
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::find(long); // 9
            // public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::find(long, void *); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void unknown_vf_0_11(void); // 11
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::find(long); // 11
            // public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DailyDataEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DailyDataEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DailyDataEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::DailyDataEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::DailyDataEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=112, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::DailyDataEntityHandler::~DailyDataEntityHandler(void); // 0
            public: virtual void unknown_vf_112_1(void); // 1
            public: virtual void unknown_vf_112_2(void); // 2
            public: virtual void unknown_vf_112_3(void); // 3
#endif
            // VFTable with 112 offset end

          public:
          };

          class/*or struct*/ DataKeeperDataSet : public DataSet
          {
            // VFTable. Offset=0, Size=22, Start=22
            // Corresponding base: dataModel::dataModel::dataModel::DataSet
            // Owner: SophisXmlTools.dll
            // VFTable with 0 offset end

          public:
          };

          template<typename T1          >
          class/*or struct*/ DeleteEvent
          {
          public:
          };
#if 0 // Instances:
// <class sophis::inflation::CSRSeasonalityData>
#if 0
          template<>
          class/*or struct*/ DeleteEvent<class sophis::inflation::CSRSeasonalityData> : public CSRAbstractEvent
          {
            // VFTable. Offset=0, Size=2, Start=0
            // Corresponding base: tools::tools::CSRAbstractEvent
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            // VFTable with 0 offset end

          public:
          };
#endif
// <class sophis::instrument::CSRInstrument>
#if 0
          template<>
          class/*or struct*/ DeleteEvent<class sophis::instrument::CSRInstrument> : public CSRAbstractEvent
          {
            // VFTable. Offset=0, Size=2, Start=0
            // Corresponding base: tools::tools::CSRAbstractEvent
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            // VFTable with 0 offset end

          public:
          };
#endif
// <class sophis::market_data::CSRCorporateActionMgr>
#if 0
          template<>
          class/*or struct*/ DeleteEvent<class sophis::market_data::CSRCorporateActionMgr> : public CSRAbstractEvent
          {
            // VFTable. Offset=0, Size=2, Start=0
            // Corresponding base: tools::tools::CSRAbstractEvent
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            // VFTable with 0 offset end

          public:
          };
#endif
// <class sophis::market_data::CSRCorrelation>
#if 0
          template<>
          class/*or struct*/ DeleteEvent<class sophis::market_data::CSRCorrelation> : public CSRAbstractEvent
          {
            // VFTable. Offset=0, Size=2, Start=0
            // Corresponding base: tools::tools::CSRAbstractEvent
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            // VFTable with 0 offset end

          public:
          };
#endif
// <class sophis::market_data::CSRCreditRiskMgr>
#if 0
          template<>
          class/*or struct*/ DeleteEvent<class sophis::market_data::CSRCreditRiskMgr> : public CSRAbstractEvent
          {
            // VFTable. Offset=0, Size=2, Start=0
            // Corresponding base: tools::tools::CSRAbstractEvent
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            // VFTable with 0 offset end

          public:
          };
#endif
// <class sophis::market_data::CSRDividend>
#if 0
          template<>
          class/*or struct*/ DeleteEvent<class sophis::market_data::CSRDividend> : public CSRAbstractEvent
          {
            // VFTable. Offset=0, Size=2, Start=0
            // Corresponding base: tools::tools::CSRAbstractEvent
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            // VFTable with 0 offset end

          public:
          };
#endif
// <class sophis::market_data::CSRRepoMargin>
#if 0
          template<>
          class/*or struct*/ DeleteEvent<class sophis::market_data::CSRRepoMargin> : public CSRAbstractEvent
          {
            // VFTable. Offset=0, Size=2, Start=0
            // Corresponding base: tools::tools::CSRAbstractEvent
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            // VFTable with 0 offset end

          public:
          };
#endif
// <class sophis::market_data::CSRVolatility>
#if 0
          template<>
          class/*or struct*/ DeleteEvent<class sophis::market_data::CSRVolatility> : public CSRAbstractEvent
          {
            // VFTable. Offset=0, Size=2, Start=0
            // Corresponding base: tools::tools::CSRAbstractEvent
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            // VFTable with 0 offset end

          public:
          };
#endif
// <class sophis::market_data::CSRYieldCurve>
#if 0
          template<>
          class/*or struct*/ DeleteEvent<class sophis::market_data::CSRYieldCurve> : public CSRAbstractEvent
          {
            // VFTable. Offset=0, Size=2, Start=0
            // Corresponding base: tools::tools::CSRAbstractEvent
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            // VFTable with 0 offset end

          public:
          };
#endif
#endif


          class DividendEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::DividendEntityHandler::DividendEntityHandler(class sophis::misc::fpml::entity::DividendEntityHandler const &)
            public: sophis::misc::fpml::entity::DividendEntityHandler::DividendEntityHandler(long)
            public: sophis::misc::fpml::entity::DividendEntityHandler::DividendEntityHandler(void)
            public: void sophis::misc::fpml::entity::DividendEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::DividendEntityHandler::key(void)
            // Variables:
            public: static char const *sophis::misc::fpml::entity::DividendEntityHandler::NS
            private: static char const *sophis::misc::fpml::entity::DividendEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::DividendEntityHandler::~DividendEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DividendEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DividendEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DividendEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &, long)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::DividendEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::commit(class sophis::tools::CSREventVector &, long)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::create(class sophis::tools::dataModel::Data const &, long)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &, long)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=28, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::DividendEntityHandler::~DividendEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DividendEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DividendEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DividendEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::endSession(void); // 23
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &, long); // 24
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::create(class sophis::tools::dataModel::Data const &, long); // 25
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &, long); // 26
            public: virtual void sophis::misc::fpml::entity::DividendEntityHandler::commit(class sophis::tools::CSREventVector &, long); // 27
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::DividendEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=120, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::DividendEntityHandler::~DividendEntityHandler(void); // 0
            public: virtual void unknown_vf_120_1(void); // 1
            public: virtual void unknown_vf_120_2(void); // 2
            public: virtual void unknown_vf_120_3(void); // 3
#endif
            // VFTable with 120 offset end

          public:
          };

          class DividendHistoricEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::DividendHistoricEntityHandler::DividendHistoricEntityHandler(class sophis::misc::fpml::entity::DividendHistoricEntityHandler const &)
            public: sophis::misc::fpml::entity::DividendHistoricEntityHandler::DividendHistoricEntityHandler(void)
            public: void sophis::misc::fpml::entity::DividendHistoricEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::DividendHistoricEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::DividendHistoricEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::DividendHistoricEntityHandler::~DividendHistoricEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DividendHistoricEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DividendHistoricEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DividendHistoricEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::DividendHistoricEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::DividendHistoricEntityHandler::~DividendHistoricEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DividendHistoricEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DividendHistoricEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::DividendHistoricEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::DividendHistoricEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::DividendHistoricEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=112, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::DividendHistoricEntityHandler::~DividendHistoricEntityHandler(void); // 0
            public: virtual void unknown_vf_112_1(void); // 1
            public: virtual void unknown_vf_112_2(void); // 2
            public: virtual void unknown_vf_112_3(void); // 3
#endif
            // VFTable with 112 offset end

          public:
          };

          class/*or struct*/ DuplicateCashFlows : public DuplicateEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::DuplicateEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ DuplicateCorrelation : public DuplicateEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::DuplicateEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ DuplicateFactorModel : public DuplicateEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::DuplicateEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ DuplicateInstrument : public DuplicateEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::DuplicateEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ DuplicatePosition : public DuplicateEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::DuplicateEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ DuplicateRatings : public DuplicateEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::DuplicateEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ DuplicateSectors : public DuplicateEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::DuplicateEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ DuplicateTimeDensity : public DuplicateEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::DuplicateEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ DuplicateVolatility : public DuplicateEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::DuplicateEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ DuplicateYieldCurve : public DuplicateEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::DuplicateEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class FactorModelsEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::FactorModelsEntityHandler::FactorModelsEntityHandler(class sophis::misc::fpml::entity::FactorModelsEntityHandler const &)
            public: sophis::misc::fpml::entity::FactorModelsEntityHandler::FactorModelsEntityHandler(void)
            public: void sophis::misc::fpml::entity::FactorModelsEntityHandler::`vbase dtor'(void)
            private: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophis::misc::fpml::entity::FactorModelsEntityHandler::xmlToString(class sophis::tools::dataModel::Data const &)
            // Static functions:
            public: static void sophis::misc::fpml::entity::FactorModelsEntityHandler::init(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::FactorModelsEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::FactorModelsEntityHandler::~FactorModelsEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::FactorModelsEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::FactorModelsEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::FactorModelsEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::FactorModelsEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::FactorModelsEntityHandler::~FactorModelsEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::FactorModelsEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::FactorModelsEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::FactorModelsEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::FactorModelsEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::FactorModelsEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=104, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::FactorModelsEntityHandler::~FactorModelsEntityHandler(void); // 0
            public: virtual void unknown_vf_104_1(void); // 1
            public: virtual void unknown_vf_104_2(void); // 2
            public: virtual void unknown_vf_104_3(void); // 3
#endif
            // VFTable with 104 offset end

          public:
          };

          class/*or struct*/ FactorModelsWrapper
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class HistoricEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::HistoricEntityHandler::HistoricEntityHandler(class sophis::misc::fpml::entity::HistoricEntityHandler const &)
            public: sophis::misc::fpml::entity::HistoricEntityHandler::HistoricEntityHandler(void)
            public: void sophis::misc::fpml::entity::HistoricEntityHandler::`vbase dtor'(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::HistoricEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::HistoricEntityHandler::~HistoricEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::HistoricEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::HistoricEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::HistoricEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::HistoricEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::HistoricEntityHandler::~HistoricEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::HistoricEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::HistoricEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::HistoricEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::HistoricEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::HistoricEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=104, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::HistoricEntityHandler::~HistoricEntityHandler(void); // 0
            public: virtual void unknown_vf_104_1(void); // 1
            public: virtual void unknown_vf_104_2(void); // 2
            public: virtual void unknown_vf_104_3(void); // 3
#endif
            // VFTable with 104 offset end

          public:
          };

          class InflationSeasonalityEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::InflationSeasonalityEntityHandler(class sophis::misc::fpml::entity::InflationSeasonalityEntityHandler const &)
            public: sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::InflationSeasonalityEntityHandler(void)
            public: void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::~InflationSeasonalityEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::~InflationSeasonalityEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void unknown_vf_0_19(void); // 19
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            // public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::endSession(void); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual void unknown_vf_0_21(void); // 21
            // Candidates:
            // public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            // public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual void unknown_vf_0_22(void); // 22
            // Candidates:
            // public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 22
            // public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void unknown_vf_0_23(void); // 23
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 23
            // public: virtual void sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=104, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::InflationSeasonalityEntityHandler::~InflationSeasonalityEntityHandler(void); // 0
            public: virtual void unknown_vf_104_1(void); // 1
            public: virtual void unknown_vf_104_2(void); // 2
            public: virtual void unknown_vf_104_3(void); // 3
#endif
            // VFTable with 104 offset end

          public:
          };

          class InstrumentEntityChecker
          {
            // Functions:
            public: sophis::misc::fpml::entity::InstrumentEntityChecker::InstrumentEntityChecker(class sophis::misc::fpml::entity::InstrumentEntityChecker const &)
            public: sophis::misc::fpml::entity::InstrumentEntityChecker::InstrumentEntityChecker(void)
            public: void sophis::misc::fpml::entity::InstrumentEntityChecker::`vbase dtor'(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::InstrumentEntityChecker::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::InstrumentEntityChecker::~InstrumentEntityChecker(void)
            public: virtual bool sophis::misc::fpml::entity::InstrumentEntityChecker::check(class sophis::tools::dataModel::DataSet const &, long, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &) const
            public: virtual class sophis::misc::dataModel::FpmlEntityChecker * sophis::misc::fpml::entity::InstrumentEntityChecker::clone(void) const
            public: virtual char const * sophis::misc::fpml::entity::InstrumentEntityChecker::name(void) const
#endif

            // VFTable. Offset=0, Size=3, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual class sophis::misc::dataModel::FpmlEntityChecker * sophis::misc::fpml::entity::InstrumentEntityChecker::clone(void) const; // 0
            public: virtual bool sophis::misc::fpml::entity::InstrumentEntityChecker::check(class sophis::tools::dataModel::DataSet const &, long, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &) const; // 1
            public: virtual char const * sophis::misc::fpml::entity::InstrumentEntityChecker::name(void) const; // 2
            // VFTable with 0 offset end

            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::InstrumentEntityChecker::~InstrumentEntityChecker(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };

          class InstrumentEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::InstrumentEntityHandler::InstrumentEntityHandler(class sophis::misc::fpml::entity::InstrumentEntityHandler const &)
            public: sophis::misc::fpml::entity::InstrumentEntityHandler::InstrumentEntityHandler(void)
            public: void sophis::misc::fpml::entity::InstrumentEntityHandler::`vbase dtor'(void)
            public: void sophis::misc::fpml::entity::InstrumentEntityHandler::cloneAndUpdate(long, class sophis::tools::dataModel::Data const &)
            public: long sophis::misc::fpml::entity::InstrumentEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::InstrumentEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::InstrumentEntityHandler::~InstrumentEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InstrumentEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InstrumentEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InstrumentEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::InstrumentEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::InstrumentEntityHandler::~InstrumentEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InstrumentEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InstrumentEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InstrumentEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::InstrumentEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::InstrumentEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=240, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::InstrumentEntityHandler::~InstrumentEntityHandler(void); // 0
            public: virtual void unknown_vf_240_1(void); // 1
            public: virtual void unknown_vf_240_2(void); // 2
            public: virtual void unknown_vf_240_3(void); // 3
#endif
            // VFTable with 240 offset end

          public:
          };

          class InstrumentUtil
          {
          public:
            // Nested containers:
            struct CDSData
            {
            public:
            };


            // Functions:
            public: class sophis::misc::fpml::entity::InstrumentUtil & sophis::misc::fpml::entity::InstrumentUtil::operator=(class sophis::misc::fpml::entity::InstrumentUtil &&)
            public: class sophis::misc::fpml::entity::InstrumentUtil & sophis::misc::fpml::entity::InstrumentUtil::operator=(class sophis::misc::fpml::entity::InstrumentUtil const &)
            // Static functions:
            public: static class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::InstrumentUtil::addDescriptionOfCb(class sophis::tools::dataModel::DataSet &, class sophis::instrument::CSROption const *)
            private: static bool sophis::misc::fpml::entity::InstrumentUtil::cdsInstrumentMatch(long, struct sophis::misc::fpml::entity::InstrumentUtil::CDSData, bool)
            public: static bool sophis::misc::fpml::entity::InstrumentUtil::checkCb(class sophis::instrument::CSROption const *, class sophis::tools::dataModel::DataSet const &, class std::basic_ostream<char, struct std::char_traits<char>> &)
            public: static class sophisTools::base::RefCountHandle<class sophis::misc::fpml::entity::InstrumentEntityHandler> sophis::misc::fpml::entity::InstrumentUtil::createInstrument(char const *, char const *, long, long &)
            public: static class sophis::instrument::CSRInstrument * sophis::misc::fpml::entity::InstrumentUtil::createInstrument(class sophis::tools::dataModel::DataSet const &)
            public: static class sophis::instrument::CSRInstrument * sophis::misc::fpml::entity::InstrumentUtil::createNonExistingCB(class sophis::tools::dataModel::DataSet const &)
            public: static long sophis::misc::fpml::entity::InstrumentUtil::findCB(class sophis::tools::dataModel::DataSet const &)
            private: static bool sophis::misc::fpml::entity::InstrumentUtil::getCDSData(class sophis::tools::dataModel::Data const &, struct sophis::misc::fpml::entity::InstrumentUtil::CDSData &)
            public: static class sophis::instrument::CSRInstrument * sophis::misc::fpml::entity::InstrumentUtil::getInstrumentAPIForWrite(long)
            public: static class sophis::instrument::CSRInstrument * sophis::misc::fpml::entity::InstrumentUtil::updateExistingCb(long, class sophis::tools::dataModel::DataSet const &)
            public: static class sophis::instrument::CSRInstrument * sophis::misc::fpml::entity::InstrumentUtil::updateInstrument(class sophis::instrument::CSRInstrument *, class sophis::tools::dataModel::DataSet const &)
            public: static void sophis::misc::fpml::entity::InstrumentUtil::updateLegacyOption(class sophis::instrument::CSRInstrument *, class sophis::tools::dataModel::DataSet const &)
            public: static class sophis::instrument::CSRInstrument * sophis::misc::fpml::entity::InstrumentUtil::updateModel(class sophis::instrument::CSRInstrument *, char const *)
            public: static class sophisTools::base::RefCountHandle<class sophis::misc::fpml::entity::InstrumentEntityHandler> sophis::misc::fpml::entity::InstrumentUtil::updateOrCreateInstrument(char const *, char const *, bool, long, long &)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::InstrumentUtil::__CLASS__
          public:
          };

          class ListedMarketEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::ListedMarketEntityHandler::ListedMarketEntityHandler(class sophis::misc::fpml::entity::ListedMarketEntityHandler const &)
            public: sophis::misc::fpml::entity::ListedMarketEntityHandler::ListedMarketEntityHandler(void)
            public: void sophis::misc::fpml::entity::ListedMarketEntityHandler::`vbase dtor'(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::ListedMarketEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::ListedMarketEntityHandler::~ListedMarketEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::ListedMarketEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::ListedMarketEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::ListedMarketEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::ListedMarketEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::ListedMarketEntityHandler::~ListedMarketEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::ListedMarketEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::ListedMarketEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::ListedMarketEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::ListedMarketEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::ListedMarketEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=128, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::ListedMarketEntityHandler::~ListedMarketEntityHandler(void); // 0
            public: virtual void unknown_vf_128_1(void); // 1
            public: virtual void unknown_vf_128_2(void); // 2
            public: virtual void unknown_vf_128_3(void); // 3
#endif
            // VFTable with 128 offset end

          public:
          };

          class MisysCorporateActionEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::MisysCorporateActionEntityHandler(class sophis::misc::fpml::entity::MisysCorporateActionEntityHandler const &)
            public: sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::MisysCorporateActionEntityHandler(void)
            public: void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::~MisysCorporateActionEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::~MisysCorporateActionEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=112, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::MisysCorporateActionEntityHandler::~MisysCorporateActionEntityHandler(void); // 0
            public: virtual void unknown_vf_112_1(void); // 1
            public: virtual void unknown_vf_112_2(void); // 2
            public: virtual void unknown_vf_112_3(void); // 3
#endif
            // VFTable with 112 offset end

          public:
          };

          class/*or struct*/ NoCashFlows : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchCorporateAction : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchCorrelation : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchCreditData : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchDailyData : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchDividend : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchFactorModel : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchInflationSeasonality : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchInstrument : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchInstrumentForRic : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchListedMarket : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchPosition : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchRepoMargin : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchTimeDensity : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchVolatility : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchYieldCurve : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class PlaceEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::PlaceEntityHandler::PlaceEntityHandler(class sophis::misc::fpml::entity::PlaceEntityHandler const &)
            public: sophis::misc::fpml::entity::PlaceEntityHandler::PlaceEntityHandler(void)
            public: void sophis::misc::fpml::entity::PlaceEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::PlaceEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::PlaceEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::PlaceEntityHandler::~PlaceEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::PlaceEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::PlaceEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::PlaceEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::PlaceEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(__int64)
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(__int64, void *)
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::PlaceEntityHandler::~PlaceEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void unknown_vf_0_7(void); // 7
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(long, void *); // 7
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(__int64); // 7
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(__int64, void *); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(class sophis::tools::dataModel::Data const &); // 8
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(long, void *); // 8
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(__int64); // 8
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(__int64, void *); // 8
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(class sophis::tools::dataModel::Data const &); // 10
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(long, void *); // 10
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(__int64); // 10
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(__int64, void *); // 10
            public: virtual void unknown_vf_0_11(void); // 11
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(class sophis::tools::dataModel::Data const &); // 11
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(long, void *); // 11
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(__int64); // 11
            // public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::find(__int64, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::PlaceEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::PlaceEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::PlaceEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::PlaceEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::PlaceEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=112, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::PlaceEntityHandler::~PlaceEntityHandler(void); // 0
            public: virtual void unknown_vf_112_1(void); // 1
            public: virtual void unknown_vf_112_2(void); // 2
            public: virtual void unknown_vf_112_3(void); // 3
#endif
            // VFTable with 112 offset end

          public:
          };

          class PositionEntityChecker
          {
            // Functions:
            public: sophis::misc::fpml::entity::PositionEntityChecker::PositionEntityChecker(class sophis::misc::fpml::entity::PositionEntityChecker const &)
            public: sophis::misc::fpml::entity::PositionEntityChecker::PositionEntityChecker(void)
            public: void sophis::misc::fpml::entity::PositionEntityChecker::`vbase dtor'(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::PositionEntityChecker::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::PositionEntityChecker::~PositionEntityChecker(void)
            public: virtual bool sophis::misc::fpml::entity::PositionEntityChecker::check(class sophis::tools::dataModel::DataSet const &, long, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &) const
            public: virtual class sophis::misc::dataModel::FpmlEntityChecker * sophis::misc::fpml::entity::PositionEntityChecker::clone(void) const
            public: virtual char const * sophis::misc::fpml::entity::PositionEntityChecker::name(void) const
#endif

            // VFTable. Offset=0, Size=3, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual class sophis::misc::dataModel::FpmlEntityChecker * sophis::misc::fpml::entity::PositionEntityChecker::clone(void) const; // 0
            public: virtual bool sophis::misc::fpml::entity::PositionEntityChecker::check(class sophis::tools::dataModel::DataSet const &, long, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &) const; // 1
            public: virtual char const * sophis::misc::fpml::entity::PositionEntityChecker::name(void) const; // 2
            // VFTable with 0 offset end

            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::PositionEntityChecker::~PositionEntityChecker(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };

          class PositionEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::PositionEntityHandler::PositionEntityHandler(class sophis::misc::fpml::entity::PositionEntityHandler const &)
            public: sophis::misc::fpml::entity::PositionEntityHandler::PositionEntityHandler(void)
            public: void sophis::misc::fpml::entity::PositionEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::PositionEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::PositionEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::PositionEntityHandler::~PositionEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::PositionEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::PositionEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::PositionEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::PositionEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::PositionEntityHandler::~PositionEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::PositionEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::PositionEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::PositionEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::PositionEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::PositionEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=128, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::PositionEntityHandler::~PositionEntityHandler(void); // 0
            public: virtual void unknown_vf_128_1(void); // 1
            public: virtual void unknown_vf_128_2(void); // 2
            public: virtual void unknown_vf_128_3(void); // 3
#endif
            // VFTable with 128 offset end

          public:
          };

          class/*or struct*/ PositionRefreshUtil
          {
          public:
            // Enumerations:
            enum eImportType : int {
            };

            // Static functions:
            public: static class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> sophis::misc::fpml::entity::PositionRefreshUtil::GetTags(class sophis::tools::dataModel::DataSet const &)
            public: static void sophis::misc::fpml::entity::PositionRefreshUtil::actionPostImport(class sophis::tools::CSREventVector &)
            public: static void sophis::misc::fpml::entity::PositionRefreshUtil::actionPreImport(class sophis::tools::CSREventVector &)
            public: static void sophis::misc::fpml::entity::PositionRefreshUtil::checkSessionInformations(class sophis::tools::dataModel::Data const &)
            public: static class sophis::portfolio::CSRPositionRefresh * sophis::misc::fpml::entity::PositionRefreshUtil::createPosition(class sophis::tools::dataModel::DataSet const &)
            public: static class sophis::portfolio::CSRPositionRefresh * sophis::misc::fpml::entity::PositionRefreshUtil::createPositionObject(class sophis::tools::dataModel::DataSet const &)
            public: static class sophis::portfolio::CSRPositionRefresh const * sophis::misc::fpml::entity::PositionRefreshUtil::findPositionRefresh(class sophis::tools::dataModel::Data const &)
            public: static enum sophis::misc::fpml::entity::PositionRefreshUtil::eImportType sophis::misc::fpml::entity::PositionRefreshUtil::getImportType(void)
            public: static enum sophis::portfolio::eSessionStatus sophis::misc::fpml::entity::PositionRefreshUtil::getSessionStatus(void)
            public: static long sophis::misc::fpml::entity::PositionRefreshUtil::getValuationDate(void)
            public: static void sophis::misc::fpml::entity::PositionRefreshUtil::reinit(void)
            public: static void sophis::misc::fpml::entity::PositionRefreshUtil::setRefreshPosition(class sophis::portfolio::CSRPositionRefresh *)
            public: static class sophis::portfolio::CSRPositionRefresh * sophis::misc::fpml::entity::PositionRefreshUtil::updatePosition(class sophis::portfolio::CSRPositionRefresh const *, class sophis::tools::dataModel::DataSet const &)
            // Variables:
            public: static bool sophis::misc::fpml::entity::PositionRefreshUtil::sendEventLocal
          public:
          };

          class ProvisionEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::ProvisionEntityHandler::ProvisionEntityHandler(class sophis::misc::fpml::entity::ProvisionEntityHandler const &)
            public: sophis::misc::fpml::entity::ProvisionEntityHandler::ProvisionEntityHandler(void)
            public: void sophis::misc::fpml::entity::ProvisionEntityHandler::`vbase dtor'(void)
            // Variables:
            private: static char const *const sophis::misc::fpml::entity::ProvisionEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::ProvisionEntityHandler::~ProvisionEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::ProvisionEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::ProvisionEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::ProvisionEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::ProvisionEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::ProvisionEntityHandler::~ProvisionEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void unknown_vf_0_5(void); // 5
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::endSession(void); // 5
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void unknown_vf_0_7(void); // 7
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::find(long); // 7
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::find(long, void *); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void unknown_vf_0_9(void); // 9
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::find(class sophis::tools::dataModel::Data const &); // 9
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::find(long); // 9
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::find(long, void *); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void unknown_vf_0_11(void); // 11
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::find(class sophis::tools::dataModel::Data const &); // 11
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::find(long); // 11
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::ProvisionEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::ProvisionEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::ProvisionEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void unknown_vf_0_23(void); // 23
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::endSession(void); // 23
            // public: virtual void sophis::misc::fpml::entity::ProvisionEntityHandler::rollback(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::ProvisionEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=152, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::ProvisionEntityHandler::~ProvisionEntityHandler(void); // 0
            public: virtual void unknown_vf_152_1(void); // 1
            public: virtual void unknown_vf_152_2(void); // 2
            public: virtual void unknown_vf_152_3(void); // 3
#endif
            // VFTable with 152 offset end

          public:
          };

          class RatingEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::RatingEntityHandler::RatingEntityHandler(class sophis::misc::fpml::entity::RatingEntityHandler const &)
            public: sophis::misc::fpml::entity::RatingEntityHandler::RatingEntityHandler(void)
            public: void sophis::misc::fpml::entity::RatingEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::RatingEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::RatingEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::RatingEntityHandler::~RatingEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RatingEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RatingEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RatingEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::RatingEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::RatingEntityHandler::~RatingEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RatingEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RatingEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RatingEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::RatingEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::RatingEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=104, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::RatingEntityHandler::~RatingEntityHandler(void); // 0
            public: virtual void unknown_vf_104_1(void); // 1
            public: virtual void unknown_vf_104_2(void); // 2
            public: virtual void unknown_vf_104_3(void); // 3
#endif
            // VFTable with 104 offset end

          public:
          };

          class RepoMarginEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::RepoMarginEntityHandler::RepoMarginEntityHandler(class sophis::misc::fpml::entity::RepoMarginEntityHandler const &)
            public: sophis::misc::fpml::entity::RepoMarginEntityHandler::RepoMarginEntityHandler(void)
            public: void sophis::misc::fpml::entity::RepoMarginEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::RepoMarginEntityHandler::key(void)
            // Variables:
            public: static char const *sophis::misc::fpml::entity::RepoMarginEntityHandler::NS
            private: static char const *sophis::misc::fpml::entity::RepoMarginEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::RepoMarginEntityHandler::~RepoMarginEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RepoMarginEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RepoMarginEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RepoMarginEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &, long)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::RepoMarginEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::commit(class sophis::tools::CSREventVector &, long)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::create(class sophis::tools::dataModel::Data const &, long)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &, long)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=28, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::RepoMarginEntityHandler::~RepoMarginEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RepoMarginEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RepoMarginEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RepoMarginEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::endSession(void); // 23
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &, long); // 24
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::create(class sophis::tools::dataModel::Data const &, long); // 25
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &, long); // 26
            public: virtual void sophis::misc::fpml::entity::RepoMarginEntityHandler::commit(class sophis::tools::CSREventVector &, long); // 27
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::RepoMarginEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=112, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::RepoMarginEntityHandler::~RepoMarginEntityHandler(void); // 0
            public: virtual void unknown_vf_112_1(void); // 1
            public: virtual void unknown_vf_112_2(void); // 2
            public: virtual void unknown_vf_112_3(void); // 3
#endif
            // VFTable with 112 offset end

          public:
          };

          class RepoMarginHistoricEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::RepoMarginHistoricEntityHandler(class sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler const &)
            public: sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::RepoMarginHistoricEntityHandler(void)
            public: void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::~RepoMarginHistoricEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::~RepoMarginHistoricEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=112, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::RepoMarginHistoricEntityHandler::~RepoMarginHistoricEntityHandler(void); // 0
            public: virtual void unknown_vf_112_1(void); // 1
            public: virtual void unknown_vf_112_2(void); // 2
            public: virtual void unknown_vf_112_3(void); // 3
#endif
            // VFTable with 112 offset end

          public:
          };

          class RicEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::RicEntityHandler::RicEntityHandler(class sophis::misc::fpml::entity::RicEntityHandler const &)
            public: sophis::misc::fpml::entity::RicEntityHandler::RicEntityHandler(void)
            public: void sophis::misc::fpml::entity::RicEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::RicEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::RicEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::RicEntityHandler::~RicEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RicEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RicEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RicEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::RicEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::RicEntityHandler::~RicEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RicEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RicEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::RicEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::RicEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::RicEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=104, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::RicEntityHandler::~RicEntityHandler(void); // 0
            public: virtual void unknown_vf_104_1(void); // 1
            public: virtual void unknown_vf_104_2(void); // 2
            public: virtual void unknown_vf_104_3(void); // 3
#endif
            // VFTable with 104 offset end

          public:
          };

          class SectorEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::SectorEntityHandler::SectorEntityHandler(class sophis::misc::fpml::entity::SectorEntityHandler const &)
            public: sophis::misc::fpml::entity::SectorEntityHandler::SectorEntityHandler(void)
            public: void sophis::misc::fpml::entity::SectorEntityHandler::`vbase dtor'(void)
            private: class sophis::instrument::CSRInstrument const * sophis::misc::fpml::entity::SectorEntityHandler::getInstrumentIfExists(void)
            public: long sophis::misc::fpml::entity::SectorEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::SectorEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::SectorEntityHandler::~SectorEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::SectorEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::SectorEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::SectorEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::SectorEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::SectorEntityHandler::~SectorEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::SectorEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::SectorEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::SectorEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::SectorEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::SectorEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=104, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::SectorEntityHandler::~SectorEntityHandler(void); // 0
            public: virtual void unknown_vf_104_1(void); // 1
            public: virtual void unknown_vf_104_2(void); // 2
            public: virtual void unknown_vf_104_3(void); // 3
#endif
            // VFTable with 104 offset end

          public:
          };

          class TaxlotEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::TaxlotEntityHandler::TaxlotEntityHandler(class sophis::misc::fpml::entity::TaxlotEntityHandler const &)
            public: sophis::misc::fpml::entity::TaxlotEntityHandler::TaxlotEntityHandler(void)
            public: void sophis::misc::fpml::entity::TaxlotEntityHandler::`vbase dtor'(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::TaxlotEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::TaxlotEntityHandler::~TaxlotEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TaxlotEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TaxlotEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TaxlotEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::TaxlotEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::TaxlotEntityHandler::~TaxlotEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void unknown_vf_0_7(void); // 7
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            // public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::find(long); // 7
            // public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::find(long, void *); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void unknown_vf_0_9(void); // 9
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::find(class sophis::tools::dataModel::Data const &); // 9
            // public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::find(long); // 9
            // public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::find(long, void *); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void unknown_vf_0_11(void); // 11
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::find(class sophis::tools::dataModel::Data const &); // 11
            // public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::find(long); // 11
            // public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TaxlotEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TaxlotEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TaxlotEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::TaxlotEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::TaxlotEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=1432, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::TaxlotEntityHandler::~TaxlotEntityHandler(void); // 0
            public: virtual void unknown_vf_1432_1(void); // 1
            public: virtual void unknown_vf_1432_2(void); // 2
            public: virtual void unknown_vf_1432_3(void); // 3
#endif
            // VFTable with 1432 offset end

          public:
          };

          class TimeDensityEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::TimeDensityEntityHandler::TimeDensityEntityHandler(class sophis::misc::fpml::entity::TimeDensityEntityHandler const &)
            public: sophis::misc::fpml::entity::TimeDensityEntityHandler::TimeDensityEntityHandler(void)
            public: void sophis::misc::fpml::entity::TimeDensityEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::TimeDensityEntityHandler::key(void)
            // Variables:
            public: static char const *sophis::misc::fpml::entity::TimeDensityEntityHandler::NS
            private: static char const *sophis::misc::fpml::entity::TimeDensityEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::TimeDensityEntityHandler::~TimeDensityEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TimeDensityEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TimeDensityEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TimeDensityEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::TimeDensityEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::TimeDensityEntityHandler::~TimeDensityEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void unknown_vf_0_9(void); // 9
            // Candidates:
            // public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TimeDensityEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 9
            // public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::find(long); // 9
            // public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::find(long, void *); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void unknown_vf_0_11(void); // 11
            // Candidates:
            // public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TimeDensityEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 11
            // public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::find(long); // 11
            // public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void unknown_vf_0_19(void); // 19
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            // public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::endSession(void); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TimeDensityEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TimeDensityEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual void unknown_vf_0_22(void); // 22
            // Candidates:
            // public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::TimeDensityEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            // public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::find(long); // 22
            // public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::find(long, void *); // 22
            public: virtual void unknown_vf_0_23(void); // 23
            // Candidates:
            // public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 23
            // public: virtual void sophis::misc::fpml::entity::TimeDensityEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::TimeDensityEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=144, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::TimeDensityEntityHandler::~TimeDensityEntityHandler(void); // 0
            public: virtual void unknown_vf_144_1(void); // 1
            public: virtual void unknown_vf_144_2(void); // 2
            public: virtual void unknown_vf_144_3(void); // 3
#endif
            // VFTable with 144 offset end

          public:
          };

          class VolatilityEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::VolatilityEntityHandler::VolatilityEntityHandler(class sophis::misc::fpml::entity::VolatilityEntityHandler const &)
            public: sophis::misc::fpml::entity::VolatilityEntityHandler::VolatilityEntityHandler(void)
            public: void sophis::misc::fpml::entity::VolatilityEntityHandler::`vbase dtor'(void)
            public: void sophis::misc::fpml::entity::VolatilityEntityHandler::commit(class sophis::tools::CSREventVector &, long)
            public: long sophis::misc::fpml::entity::VolatilityEntityHandler::key(void)
            // Variables:
            public: static char const *sophis::misc::fpml::entity::VolatilityEntityHandler::NS
            private: static char const *sophis::misc::fpml::entity::VolatilityEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::VolatilityEntityHandler::~VolatilityEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::VolatilityEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::VolatilityEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::VolatilityEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::VolatilityEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::VolatilityEntityHandler::~VolatilityEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::VolatilityEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::VolatilityEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::VolatilityEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::VolatilityEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::VolatilityEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=120, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::VolatilityEntityHandler::~VolatilityEntityHandler(void); // 0
            public: virtual void unknown_vf_120_1(void); // 1
            public: virtual void unknown_vf_120_2(void); // 2
            public: virtual void unknown_vf_120_3(void); // 3
#endif
            // VFTable with 120 offset end

          public:
          };

          class VolatilityHistoricEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::VolatilityHistoricEntityHandler(class sophis::misc::fpml::entity::VolatilityHistoricEntityHandler const &)
            public: sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::VolatilityHistoricEntityHandler(void)
            public: void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::~VolatilityHistoricEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::~VolatilityHistoricEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=112, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::VolatilityHistoricEntityHandler::~VolatilityHistoricEntityHandler(void); // 0
            public: virtual void unknown_vf_112_1(void); // 1
            public: virtual void unknown_vf_112_2(void); // 2
            public: virtual void unknown_vf_112_3(void); // 3
#endif
            // VFTable with 112 offset end

          public:
          };

          class/*or struct*/ WrongCheckCashFlows : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ WrongCheckCorporateAction : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ WrongCheckCorrelation : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ WrongCheckCreditData : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ WrongCheckDividend : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ WrongCheckInstrument : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ WrongCheckRating : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ WrongCheckRepoMargin : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ WrongCheckSector : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ WrongCheckVolatility : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ WrongCheckYieldCurve : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ WrongCheckYieldCurveHistoric : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class YieldCurveEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::YieldCurveEntityHandler::YieldCurveEntityHandler(class sophis::misc::fpml::entity::YieldCurveEntityHandler const &)
            public: sophis::misc::fpml::entity::YieldCurveEntityHandler::YieldCurveEntityHandler(void)
            public: void sophis::misc::fpml::entity::YieldCurveEntityHandler::`vbase dtor'(void)
            public: long sophis::misc::fpml::entity::YieldCurveEntityHandler::key(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::YieldCurveEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::YieldCurveEntityHandler::~YieldCurveEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::YieldCurveEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::YieldCurveEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::YieldCurveEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::YieldCurveEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::YieldCurveEntityHandler::~YieldCurveEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::YieldCurveEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::YieldCurveEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::YieldCurveEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::YieldCurveEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::YieldCurveEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=104, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::YieldCurveEntityHandler::~YieldCurveEntityHandler(void); // 0
            public: virtual void unknown_vf_104_1(void); // 1
            public: virtual void unknown_vf_104_2(void); // 2
            public: virtual void unknown_vf_104_3(void); // 3
#endif
            // VFTable with 104 offset end

          public:
          };

          class YieldCurveHistoricEntityHandler
          {
            // Functions:
            public: sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::YieldCurveHistoricEntityHandler(class sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler const &)
            public: sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::YieldCurveHistoricEntityHandler(void)
            public: void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::`vbase dtor'(void)
            // Variables:
            private: static char const *sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::__CLASS__
#if 0 // All found virtual functions names:
            public: virtual sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::~YieldCurveHistoricEntityHandler(void)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &)
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::addReference(class sophis::tools::dataModel::DataSet &)
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::clone(void) const
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::commit(class sophis::tools::CSREventVector &)
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::create(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::endSession(void)
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::find(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::find(long)
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::find(long, void *)
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &)
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::rollback(void)
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &)
#endif

            // VFTable. Offset=0, Size=24, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::~YieldCurveHistoricEntityHandler(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::commit(class sophis::tools::CSREventVector &); // 4
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::rollback(void); // 5
            public: virtual void unknown_vf_0_6(void); // 6
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::find(class sophis::tools::dataModel::Data const &); // 7
            public: virtual void unknown_vf_0_8(void); // 8
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::find(long); // 9
            public: virtual void unknown_vf_0_10(void); // 10
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::find(long, void *); // 11
            public: virtual void unknown_vf_0_12(void); // 12
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::findOrCreate(class sophis::tools::dataModel::Data const &); // 13
            public: virtual void unknown_vf_0_14(void); // 14
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::updateOrCreate(class sophis::tools::dataModel::Data const &); // 15
            public: virtual void unknown_vf_0_16(void); // 16
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::create(class sophis::tools::dataModel::Data const &); // 17
            public: virtual void unknown_vf_0_18(void); // 18
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::checkOrCreate(class sophis::tools::dataModel::Data const &); // 19
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::addReference(class sophis::tools::dataModel::DataSet &); // 20
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::addDescription(class sophis::tools::dataModel::DataSet &); // 21
            public: virtual class sophis::tools::dataModel::Data & sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::addDescriptionInSingleDataSet(class sophis::tools::dataModel::DataSet &); // 22
            public: virtual void sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::endSession(void); // 23
            // VFTable with 0 offset end

            // VFTable. Offset=56, Size=1, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual class sophis::misc::dataModel::FpmlEntityHandler * sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::clone(void) const; // 0
#endif
            // VFTable with 56 offset end

            // VFTable. Offset=104, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual sophis::misc::fpml::entity::YieldCurveHistoricEntityHandler::~YieldCurveHistoricEntityHandler(void); // 0
            public: virtual void unknown_vf_104_1(void); // 1
            public: virtual void unknown_vf_104_2(void); // 2
            public: virtual void unknown_vf_104_3(void); // 3
#endif
            // VFTable with 104 offset end

          public:
          };


        };

        namespace/*or class/struct?*/ quotation
        {
          // Nested containers:
          class/*or struct*/ DuplicateQuotation : public DuplicateEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::DuplicateEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchInstrument : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ NoSuchQuotation : public NoSuchEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::NoSuchEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ Quotations
          {
            // VFTable. Offset=0, Size=2, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            // VFTable with 0 offset end

          public:
          };

          class/*or struct*/ QuotationsByInstrument
          {
            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_40_0(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };

          class/*or struct*/ Quote
          {
            // VFTable. Offset=96, Size=4, Start=0
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_96_0(void); // 0
            public: virtual void unknown_vf_96_1(void); // 1
            public: virtual void unknown_vf_96_2(void); // 2
            public: virtual void unknown_vf_96_3(void); // 3
#endif
            // VFTable with 96 offset end

          public:
          };

          class QuotesByDate
          {
          public:
          };

          class/*or struct*/ WrongCheckQuotation : public WrongCheckEntity
          {
            // VFTable. Offset=0, Size=1, Start=0
            // Corresponding base: dataModel::dataModel::dataModel::WrongCheckEntity
            // Owner: SophisXmlTools.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            // VFTable with 0 offset end

          public:
          };


        };


      };


    };

    class/*or struct*/ portfolio
    {
    public:
      // Enumerations:
      enum eProvisionType : int {
      };
      enum eSessionStatus : int {
      };
      enum eTransactionType : int {
      };

      // Nested containers:
      class CSRAccountingCategory
      {
        // Functions:
        public: long sophis::portfolio::CSRAccountingCategory::GetId(void) const
      public:
      };

      class CSRAccountingCategoryHandler
      {
        // Functions:
        public: class sophis::portfolio::CSRAccountingCategory const * sophis::portfolio::CSRAccountingCategoryHandler::GetAccountingCategoryByShortName(long, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &) const
        // Static functions:
        public: static class sophis::portfolio::CSRAccountingCategoryHandler * sophis::portfolio::CSRAccountingCategoryHandler::GetInstance(void)
      public:
      };

      class CSRAccountingMethodology
      {
        // Functions:
        public: int sophis::portfolio::CSRAccountingMethodology::GetProvisionBE(void) const
      public:
      };

      class CSRAccountingMethodologyHandler
      {
        // Functions:
        public: class sophis::portfolio::CSRAccountingMethodology const * sophis::portfolio::CSRAccountingMethodologyHandler::GetAccountingMethodology(long) const
        // Static functions:
        public: static class sophis::portfolio::CSRAccountingMethodologyHandler * sophis::portfolio::CSRAccountingMethodologyHandler::GetInstance(void)
      public:
      };

      class CSRAccountingPrinciple
      {
        // Functions:
        public: long sophis::portfolio::CSRAccountingPrinciple::DetermineAccountingMethodology(long, long, bool) const
        public: long sophis::portfolio::CSRAccountingPrinciple::GetId(void) const
      public:
      };

      class CSRAccountingPrincipleHandler
      {
        // Functions:
        public: class sophis::portfolio::CSRAccountingPrinciple const * sophis::portfolio::CSRAccountingPrincipleHandler::GetAccountingPrinciple(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &) const
        public: class sophis::portfolio::CSRAccountingPrinciple const * sophis::portfolio::CSRAccountingPrincipleHandler::GetAccountingPrinciple(long) const
        // Static functions:
        public: static class sophis::portfolio::CSRAccountingPrincipleHandler * sophis::portfolio::CSRAccountingPrincipleHandler::GetInstance(void)
      public:
      };

      class/*or struct*/ CSRPortfolioColumnCacheManager
      {
        // Static functions:
        public: static void sophis::portfolio::CSRPortfolioColumnCacheManager::Disable(void)
      public:
      };

      class CSRPortfolioSelection
      {
        // Functions:
        public: bool sophis::portfolio::CSRPortfolioSelection::solveFolio(struct sophis::portfolio::FolioSelectorInput const &, long &)
        // Static functions:
        public: static class sophis::portfolio::CSRPortfolioSelection & sophis::portfolio::CSRPortfolioSelection::getInstance(void)
      public:
      };

      class CSRPosition
      {
        // Static functions:
        public: static class sophis::portfolio::CSRPosition const * sophis::portfolio::CSRPosition::GetCSRPosition(long, long)
      public:
      };

      class CSRPositionRefresh
      {
        // Functions:
        public: void sophis::portfolio::CSRPositionRefresh::DescribeIdentifiers(class sophis::tools::dataModel::Data &) const
        public: long sophis::portfolio::CSRPositionRefresh::GetIdentifier(void) const
        public: void sophis::portfolio::CSRPositionRefresh::MultiSave(class sophis::tools::CSREventVector &)
        public: void sophis::portfolio::CSRPositionRefresh::SaveExtRef(class sophis::tools::CSREventVector &)
        public: void sophis::portfolio::CSRPositionRefresh::SaveTags(class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> &, class sophis::tools::CSREventVector *)
        // Static functions:
        public: static class sophis::portfolio::CSRPositionRefresh * sophis::portfolio::CSRPositionRefresh::GetCSRPositionRefresh(long, long)
        public: static class sophis::portfolio::CSRPositionRefresh * sophis::portfolio::CSRPositionRefresh::GetCSRPositionRefresh(long, long, short, long)
      public:
      };

      class CSRTaxLotHandler
      {
      public:
        // Nested containers:
        struct SProvisionMapping
        {
        public:
        };


        // Functions:
        public: void sophis::portfolio::CSRTaxLotHandler::SaveArchiveTaxLot(class std::list<class sophis::portfolio::CSRTaxLotList, class std::allocator<class sophis::portfolio::CSRTaxLotList>> const &, long, long)
        public: void sophis::portfolio::CSRTaxLotHandler::StoreProvisionToDB(class std::vector<struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping, class std::allocator<struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping>> const &)
        // Static functions:
        public: static class sophis::portfolio::CSRTaxLotHandler * sophis::portfolio::CSRTaxLotHandler::GetCSRTaxLotHandler(void)
      public:
      };

      class/*or struct*/ CSRTaxLotImport
      {
      public:
        // Enumerations:
        enum eImportType : int {
        };

        // Functions:
        public: sophis::portfolio::CSRTaxLotImport::CSRTaxLotImport(void)
        public: sophis::portfolio::CSRTaxLotImport::~CSRTaxLotImport(void)
        public: void sophis::portfolio::CSRTaxLotImport::ActionPostImport(class sophis::tools::CSREventVector &)
        public: void sophis::portfolio::CSRTaxLotImport::ActionPreImport(class sophis::tools::CSREventVector &)
        public: void sophis::portfolio::CSRTaxLotImport::CheckSessionInformations(class sophis::tools::dataModel::Data const &)
        public: bool sophis::portfolio::CSRTaxLotImport::CreateAccountingPos(class sophis::tools::dataModel::DataSet const &)
        public: struct sophis::portfolio::positionDesc & sophis::portfolio::CSRTaxLotImport::GetPositionDescription(void)
        public: class std::list<class sophis::portfolio::CSRTaxLotList, class std::allocator<class sophis::portfolio::CSRTaxLotList>> const & sophis::portfolio::CSRTaxLotImport::GetTaxLotList(void) const
        public: void sophis::portfolio::CSRTaxLotImport::Reset(void)
        // Static functions:
        public: static enum sophis::portfolio::CSRTaxLotImport::eImportType sophis::portfolio::CSRTaxLotImport::GetImportType(void)
        public: static long sophis::portfolio::CSRTaxLotImport::GetSessionId(void)
        public: static enum sophis::portfolio::eSessionStatus sophis::portfolio::CSRTaxLotImport::GetSessionStatus(void)
        public: static long sophis::portfolio::CSRTaxLotImport::GetValuationDate(void)
      public:
      };

      class CSRTaxLotList
      {
      public:
      };

      class/*or struct*/ CSRTransaction
      {
        // Functions:
        public: sophis::portfolio::CSRTransaction::CSRTransaction(void)
        public: enum eBackOfficeType sophis::portfolio::CSRTransaction::GetFinalStatus(long) const
        public: void sophis::portfolio::CSRTransaction::SaveMultiInsertion(class sophis::tools::CSREventVector &, long, bool)
        public: void sophis::portfolio::CSRTransaction::SetAccountancyDate(long)
        public: void sophis::portfolio::CSRTransaction::SetBackOfficeType(enum eBackOfficeType)
        public: void sophis::portfolio::CSRTransaction::SetEntityOnly(long)
        public: bool sophis::portfolio::CSRTransaction::SetFolioCode(long)
        public: void sophis::portfolio::CSRTransaction::SetInstrumentCode(long)
        public: void sophis::portfolio::CSRTransaction::SetNetAmountOnly(double)
        public: void sophis::portfolio::CSRTransaction::SetOperator(long)
        public: void sophis::portfolio::CSRTransaction::SetQuantityOnly(double)
        public: void sophis::portfolio::CSRTransaction::SetSettlementDate(long)
        public: void sophis::portfolio::CSRTransaction::SetSpotOnly(double)
        public: void sophis::portfolio::CSRTransaction::SetTradeBusinessModels(class boost::container::flat_map<long, long, struct std::less<long>, void>)
        public: void sophis::portfolio::CSRTransaction::SetTransactionDate(long)
        public: void sophis::portfolio::CSRTransaction::SetTransactionTime(double)
        public: void sophis::portfolio::CSRTransaction::SetTransactionTypeOnly(enum sophis::portfolio::eTransactionType)
        public: __int64 sophis::portfolio::CSRTransaction::getReservedCode(void) const
        public: void sophis::portfolio::CSRTransaction::reserveCode(__int64)
        // Static functions:
        public: static __int64 sophis::portfolio::CSRTransaction::GetNewCode(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::portfolio::CSRTransaction::~CSRTransaction(void)
#endif

      public:
      };

      struct FolioSelectorInput
      {
        // Functions:
        public: sophis::portfolio::FolioSelectorInput::FolioSelectorInput(void)
        public: sophis::portfolio::FolioSelectorInput::~FolioSelectorInput(void)
      public:
      };

      class ISRTaxLotPoolFactorHelper
      {
      public:
      };

      struct SSPriceAndAmount
      {
      public:
      };

      class/*or struct*/ SSProvisionCreationGroupEvent
      {
        // Functions:
        public: sophis::portfolio::SSProvisionCreationGroupEvent::SSProvisionCreationGroupEvent(class std::vector<struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping, class std::allocator<struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping>> const &)
#if 0 // All found virtual functions names:
        public: virtual void sophis::portfolio::SSProvisionCreationGroupEvent::Send(void)
#endif

      public:
      };

      class/*or struct*/ TaxLotPoolFactorHelperFactory
      {
        // Static functions:
        public: static class std::shared_ptr<class sophis::portfolio::ISRTaxLotPoolFactorHelper> const sophis::portfolio::TaxLotPoolFactorHelperFactory::GetTaxLotPoolFactorHelper(long)
      public:
      };

      struct positionDesc
      {
      public:
      };


      // Functions:
      struct SSPriceAndAmount ComputePriceAndAmount(class ISRTaxLotPoolFactorHelper const &, double, double, double, double, double, double, enum eProvisionType, enum sophis::instrument::eAskQuotationType)
    public:
    };

    class/*or struct*/ sql
    {
    public:
      // Enumerations:
      enum Indicator : int {
      };

      // Nested containers:
      class CSRConnection
      {
      public:
      };

      class CSRIn
      {
        // Functions:
        public: sophis::sql::CSRIn::CSRIn(class sophis::sql::CSRIn &&)
#if 0 // All found virtual functions names:
        public: virtual sophis::sql::CSRIn::~CSRIn(void)
#endif

      public:
      };

      class/*or struct*/ CSRInBase
      {
        // Functions:
        protected: sophis::sql::CSRInBase::CSRInBase(enum sophis::sql::CSROCIParam::Type, __int64, __int64, enum sophis::sql::Indicator *, __int64, bool)
#if 0 // All found virtual functions names:
        public: virtual sophis::sql::CSRInBase::~CSRInBase(void)
#endif

      public:
      };

      class CSRInParenthesis
      {
      public:
      };

      class CSRInRef
      {
        // Functions:
        public: sophis::sql::CSRInRef::CSRInRef(class sophis::sql::CSRInRef const &)
#if 0 // All found virtual functions names:
        public: virtual sophis::sql::CSRInRef::~CSRInRef(void)
#endif

      public:
      };

      class/*or struct*/ CSRIndicatorParam
      {
        // Functions:
        public: void sophis::sql::CSRIndicatorParam::SetIndicators(enum sophis::sql::Indicator *, __int64)
#if 0 // All found virtual functions names:
        public: virtual sophis::sql::CSRIndicatorParam::~CSRIndicatorParam(void)
#endif

      public:
      };

      template<typename T1      >
      class/*or struct*/ CSRInserter
      {
      public:
      };
#if 0 // Instances:
// <__int64>
#if 0
      template<>
      class/*or struct*/ CSRInserter<__int64> : public CSRQueryBufferedBase<__int64>
      {
        // VFTable. Offset=0, Size=5, Start=5
        // Corresponding base: CSRQueryBufferedBase::CSRQueryBufferedBase::CSRQueryBufferedBase::CSRQueryBufferedBase<__int64>
        // Owner: SophisXmlTools.dll
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


      class/*or struct*/ CSRLob
      {
        // Static functions:
        public: static void sophis::sql::CSRLob::InsertBundleLob(class sophis::sql::CSRConnection &, class std::vector<struct OCILobLocator const *, class std::allocator<struct OCILobLocator const *>> &, class std::vector<void const *, class std::allocator<void const *>> &, class std::vector<unsigned __int64, class std::allocator<unsigned __int64>> &)
      public:
      };

      class CSRLocation
      {
        // Functions:
        public: sophis::sql::CSRLocation::CSRLocation(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, unsigned long, class sophis::sql::CSRQuery *)
        public: sophis::sql::CSRLocation::~CSRLocation(void)
      public:
      };

      class/*or struct*/ CSROCIParam
      {
      public:
        // Enumerations:
        enum Type : int {
        };

        // Functions:
        public: void sophis::sql::CSROCIParam::SetSkipSize(__int64)
#if 0 // All found virtual functions names:
        public: virtual sophis::sql::CSROCIParam::~CSROCIParam(void)
#endif

      public:
      };

      template<typename T0, typename T2      >
      class/*or struct*/ CSROffsetParam
      {
      public:
      };
#if 0 // Instances:
// <struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, long>
#if 0
      template<>
      class/*or struct*/ CSROffsetParam<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, long>
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

      public:
      };
#endif
// <struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, short>
#if 0
      template<>
      class/*or struct*/ CSROffsetParam<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, short>
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

      public:
      };
#endif
// <struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, __int64>
#if 0
      template<>
      class/*or struct*/ CSROffsetParam<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, __int64>
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

      public:
      };
#endif
// <struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, long>
#if 0
      template<>
      class/*or struct*/ CSROffsetParam<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, long>
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


      class CSROut
      {
        // Functions:
        public: sophis::sql::CSROut::CSROut(class sophis::sql::CSROut &&)
        public: sophis::sql::CSROut::CSROut(class sophis::sql::CSROut const &)
#if 0 // All found virtual functions names:
        public: virtual sophis::sql::CSROut::~CSROut(void)
#endif

      public:
      };

      class/*or struct*/ CSROutBase
      {
        // Functions:
        protected: sophis::sql::CSROutBase::CSROutBase(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, enum sophis::sql::CSROCIParam::Type, __int64, __int64, enum sophis::sql::Indicator *, __int64)
#if 0 // All found virtual functions names:
        public: virtual sophis::sql::CSROutBase::~CSROutBase(void)
#endif

      public:
      };

      template<typename T1      >
      class/*or struct*/ CSROutGenerator
      {
      public:
      };
#if 0 // Instances:
// <struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
#if 0
      template<>
      class/*or struct*/ CSROutGenerator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave> : public CSRParamGenerator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

      public:
      };
#endif
// <struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
#if 0
      template<>
      class/*or struct*/ CSROutGenerator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal> : public CSRParamGenerator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


      template<typename T0, typename T2      >
      class/*or struct*/ CSROutOffset
      {
      public:
      };
#if 0 // Instances:
// <struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, long>
#if 0
      template<>
      class/*or struct*/ CSROutOffset<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, long> : public CSROffsetParam<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, long>, public CSROutGenerator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
      {
        // VFTable. Offset=0, Size=1, Start=1
        // Corresponding base: CSROffsetParam::CSROffsetParam::CSROffsetParam::CSROffsetParam<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, long>
        // Owner: SophisXmlTools.dll
        // VFTable with 0 offset end

        // VFTable. Offset=32, Size=1, Start=1
        // Corresponding base: CSROutGenerator::CSROutGenerator::CSROutGenerator::CSROutGenerator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
        // Owner: SophisXmlTools.dll
        // VFTable with 32 offset end

      public:
      };
#endif
// <struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, short>
#if 0
      template<>
      class/*or struct*/ CSROutOffset<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, short> : public CSROffsetParam<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, short>, public CSROutGenerator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
      {
        // VFTable. Offset=0, Size=1, Start=1
        // Corresponding base: CSROffsetParam::CSROffsetParam::CSROffsetParam::CSROffsetParam<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, short>
        // Owner: SophisXmlTools.dll
        // VFTable with 0 offset end

        // VFTable. Offset=32, Size=1, Start=1
        // Corresponding base: CSROutGenerator::CSROutGenerator::CSROutGenerator::CSROutGenerator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
        // Owner: SophisXmlTools.dll
        // VFTable with 32 offset end

      public:
      };
#endif
// <struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, __int64>
#if 0
      template<>
      class/*or struct*/ CSROutOffset<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, __int64> : public CSROffsetParam<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, __int64>, public CSROutGenerator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
      {
        // VFTable. Offset=0, Size=1, Start=1
        // Corresponding base: CSROffsetParam::CSROffsetParam::CSROffsetParam::CSROffsetParam<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, __int64>
        // Owner: SophisXmlTools.dll
        // VFTable with 0 offset end

        // VFTable. Offset=32, Size=1, Start=1
        // Corresponding base: CSROutGenerator::CSROutGenerator::CSROutGenerator::CSROutGenerator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
        // Owner: SophisXmlTools.dll
        // VFTable with 32 offset end

      public:
      };
#endif
// <struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, long>
#if 0
      template<>
      class/*or struct*/ CSROutOffset<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, long> : public CSROffsetParam<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, long>, public CSROutGenerator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
      {
        // VFTable. Offset=0, Size=1, Start=1
        // Corresponding base: CSROffsetParam::CSROffsetParam::CSROffsetParam::CSROffsetParam<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, long>
        // Owner: SophisXmlTools.dll
        // VFTable with 0 offset end

        // VFTable. Offset=32, Size=1, Start=1
        // Corresponding base: CSROutGenerator::CSROutGenerator::CSROutGenerator::CSROutGenerator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
        // Owner: SophisXmlTools.dll
        // VFTable with 32 offset end

      public:
      };
#endif
#endif


      template<typename T1      >
      class/*or struct*/ CSRParamGenerator
      {
      public:
      };
#if 0 // Instances:
// <struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
#if 0
      template<>
      class/*or struct*/ CSRParamGenerator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
      {
      public:
      };
#endif
// <struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
#if 0
      template<>
      class/*or struct*/ CSRParamGenerator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
      {
      public:
      };
#endif
#endif


      class CSRQuery
      {
        // Functions:
        public: sophis::sql::CSRQuery::CSRQuery(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::sql::CSRConnection &)
        private: void sophis::sql::CSRQuery::CleanCacheFor(struct std::integral_constant<bool, 0> const &, struct std::integral_constant<bool, 0> const &, struct std::integral_constant<bool, 0> const &, struct std::integral_constant<bool, 0> const &)
        private: void sophis::sql::CSRQuery::CleanCacheFor(struct std::integral_constant<bool, 0> const &, struct std::integral_constant<bool, 1> const &, struct std::integral_constant<bool, 0> const &, struct std::integral_constant<bool, 0> const &)
        private: void sophis::sql::CSRQuery::CleanCacheForInput(void)
        private: void sophis::sql::CSRQuery::CleanCacheForOutput(void)
        private: void sophis::sql::CSRQuery::CleanCacheForString(void)
        private: void sophis::sql::CSRQuery::CreateStatementIfNeeded(void)
        public: bool sophis::sql::CSRQuery::Ended(void) const
        public: bool sophis::sql::CSRQuery::Execute(unsigned long)
        public: unsigned long sophis::sql::CSRQuery::Fetch(unsigned long)
        public: bool sophis::sql::CSRQuery::Fetch(void)
        public: class sophis::sql::CSRConnection & sophis::sql::CSRQuery::GetConnection(void)
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const & sophis::sql::CSRQuery::GetLogPrefix(void) const
        public: unsigned long sophis::sql::CSRQuery::GetNbFetched(void) const
        public: unsigned long sophis::sql::CSRQuery::GetNbProcessedRows(void) const
        protected: void sophis::sql::CSRQuery::Log(class sophis::sql::CSRLocation const &, enum sophis::sql::ISRLogger::eLevel, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, int) const
        public: bool sophis::sql::CSRQuery::Reset(void)
        public: void sophis::sql::CSRQuery::SetName(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
        public: void sophis::sql::CSRQuery::SetOutStructSize(__int64)
        protected: bool sophis::sql::CSRQuery::WillLog(enum sophis::sql::ISRLogger::eLevel) const
#if 0 // All found virtual functions names:
        public: virtual sophis::sql::CSRQuery::~CSRQuery(void)
        protected: virtual bool sophis::sql::CSRQuery::InternalExecute(unsigned long)
        protected: virtual long sophis::sql::CSRQuery::InternalFetch(unsigned long)
        protected: virtual void sophis::sql::CSRQuery::UpdateAllFetched(unsigned long, unsigned long)
        protected: virtual unsigned long sophis::sql::CSRQuery::UpdateProcessedRows(void)
#endif

        // VFTable. Offset=0, Size=5, Start=0
        // Added virtual functions:
        public: virtual sophis::sql::CSRQuery::~CSRQuery(void); // 0
        protected: virtual unsigned long sophis::sql::CSRQuery::UpdateProcessedRows(void); // 1
        protected: virtual bool sophis::sql::CSRQuery::InternalExecute(unsigned long); // 2
        protected: virtual long sophis::sql::CSRQuery::InternalFetch(unsigned long); // 3
        protected: virtual void sophis::sql::CSRQuery::UpdateAllFetched(unsigned long, unsigned long); // 4
        // VFTable with 0 offset end

      public:
      };

      template<typename T1      >
      class/*or struct*/ CSRQueryBuffered
      {
      public:
      };
#if 0 // Instances:
// <struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
#if 0
      template<>
      class/*or struct*/ CSRQueryBuffered<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave> : public CSRQueryBufferedBase<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
      {
        // VFTable. Offset=0, Size=5, Start=5
        // Corresponding base: CSRQueryBufferedBase::CSRQueryBufferedBase::CSRQueryBufferedBase::CSRQueryBufferedBase<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
        // Owner: SophisXmlTools.dll
        // VFTable with 0 offset end

      public:
      };
#endif
// <struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
#if 0
      template<>
      class/*or struct*/ CSRQueryBuffered<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal> : public CSRQueryBufferedBase<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
      {
        // VFTable. Offset=0, Size=5, Start=5
        // Corresponding base: CSRQueryBufferedBase::CSRQueryBufferedBase::CSRQueryBufferedBase::CSRQueryBufferedBase<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
        // Owner: SophisXmlTools.dll
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


      template<typename T1      >
      class/*or struct*/ CSRQueryBufferedBase
      {
      public:
      };
#if 0 // Instances:
// <__int64>
#if 0
      template<>
      class/*or struct*/ CSRQueryBufferedBase<__int64> : public CSRQueryRestricted
      {
        // VFTable. Offset=0, Size=5, Start=0
        // Corresponding base: sql::sql::CSRQueryRestricted
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void); // 4
        // VFTable with 0 offset end

      public:
      };
#endif
// <struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
#if 0
      template<>
      class/*or struct*/ CSRQueryBufferedBase<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave> : public CSRQueryRestricted
      {
        // VFTable. Offset=0, Size=5, Start=0
        // Corresponding base: sql::sql::CSRQueryRestricted
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void); // 4
        // VFTable with 0 offset end

      public:
      };
#endif
// <struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
#if 0
      template<>
      class/*or struct*/ CSRQueryBufferedBase<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal> : public CSRQueryRestricted
      {
        // VFTable. Offset=0, Size=5, Start=0
        // Corresponding base: sql::sql::CSRQueryRestricted
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void); // 4
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


      class/*or struct*/ CSRQueryRestricted : public CSRQuery
      {
        // Functions:
        public: sophis::sql::CSRQueryRestricted::CSRQueryRestricted(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::sql::CSRConnection &)
#if 0 // All found virtual functions names:
        public: virtual sophis::sql::CSRQueryRestricted::~CSRQueryRestricted(void)
#endif

      public:
      };

      class/*or struct*/ CSRSqlQuery
      {
        // Static functions:
        public: static void sophis::sql::CSRSqlQuery::QueryReturning1LongException(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, long *)
      public:
      };

      class CSRStatement
      {
        // Functions:
        public: class sophis::sql::CSRStatement & sophis::sql::CSRStatement::operator<<(char const *)
        public: class sophis::sql::CSRStatement & sophis::sql::CSRStatement::operator<<(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
        public: class sophis::sql::CSRStatement & sophis::sql::CSRStatement::operator<<(class sophis::sql::CSRIn)
        public: class sophis::sql::CSRStatement & sophis::sql::CSRStatement::operator<<(class sophis::sql::CSRInParenthesis)
        public: class sophis::sql::CSRStatement & sophis::sql::CSRStatement::operator<<(class sophis::sql::CSRInRef)
        public: class sophis::sql::CSRStatement & sophis::sql::CSRStatement::operator<<(class sophis::sql::CSROut)
      public:
      };

      class CSRTempTableClause
      {
        // Functions:
        public: sophis::sql::CSRTempTableClause::~CSRTempTableClause(void)
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophis::sql::CSRTempTableClause::GetClause(void) const
      public:
      };

      template<typename T0, typename T2      >
      class/*or struct*/ CSRTypedTempTable
      {
      public:
      };
#if 0 // Instances:
// <__int64, 20>
#if 0
      template<>
      class/*or struct*/ CSRTypedTempTable<__int64, 20> : public ISRAbstractTempTable
      {
        // VFTable. Offset=0, Size=4, Start=0
        // Corresponding base: sql::sql::ISRAbstractTempTable
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


      class ISRAbstractTempTable
      {
        // Functions:
        public: sophis::sql::ISRAbstractTempTable::ISRAbstractTempTable(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class sophis::sql::CSRConnection &)
        public: void sophis::sql::ISRAbstractTempTable::CleanIfNeeded(void) const
#if 0 // All found virtual functions names:
        public: virtual sophis::sql::ISRAbstractTempTable::~ISRAbstractTempTable(void)
#endif

      public:
      };

      namespace/*or class/struct?*/ ISRLogger
      {
        // Enumerations:
        enum eLevel : int {
        };

      };


      // Functions:
      bool CommitDefaultConnection(void)
      class CSRConnection & GetDefaultConnection(void)
      class CSRTempTableClause InTempTable(class ISRAbstractTempTable const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
      bool RollbackDefaultConnection(void)
    public:
    };

    class/*or struct*/ static_data
    {
    public:
      // Nested containers:
      class CSRCurrency
      {
        // Functions:
        public: long sophis::static_data::CSRCurrency::GetDefaultFamilyYieldCurveCode(void) const
        public: void sophis::static_data::CSRCurrency::GetDescription_API(class sophis::tools::dataModel::DataSet &) const
        public: double sophis::static_data::CSRCurrency::GetForexHistory(long) const
        public: long sophis::static_data::CSRCurrency::GetMasterCurrency(void) const
        public: struct sophis::instrument::SSHistory * sophis::static_data::CSRCurrency::NEW_HistoryList(long, long, int *, class sophis::static_data::CSRHistoricalData const &) const
        // Static functions:
        public: static void sophis::static_data::CSRCurrency::CurrencyToString(long, char *)
        public: static class sophis::static_data::CSRCurrency const * sophis::static_data::CSRCurrency::GetCSRCurrency(long)
        public: static int sophis::static_data::CSRCurrency::GetCurrencyIndex(long)
        public: static long sophis::static_data::CSRCurrency::StringToCurrency(char const *)
        // Variables:
        public: static long sophis::static_data::CSRCurrency::gMasterCurrency
      public:
      };

      class CSRCurrencyExceptions
      {
        // Functions:
        public: sophis::static_data::CSRCurrencyExceptions::CSRCurrencyExceptions(class sophis::static_data::CSRCurrencyExceptions const &)
      public:
      };

      class CSRHistoricalData
      {
        // Static functions:
        public: static class sophis::static_data::CSRHistoricalData const & sophis::static_data::CSRHistoricalData::GetInstance(void)
      public:
      };

      class CSRPlace
      {
        // Functions:
        public: void sophis::static_data::CSRPlace::GetDescription_API(class sophis::tools::dataModel::DataSet &) const
        // Static functions:
        public: static class sophis::static_data::CSRPlace const * sophis::static_data::CSRPlace::GetCSRPlace(long)
        public: static class sophis::static_data::CSRPlace const * sophis::static_data::CSRPlace::GetCSRPlaceWithName(char const *)
      public:
      };

      class/*or struct*/ CSRSeniority
      {
        // Static functions:
        public: static long sophis::static_data::CSRSeniority::GetIdByName(char const *)
      public:
      };

      class CSRTimeDensity
      {
        // Functions:
        public: void sophis::static_data::CSRTimeDensity::GetDescription_API(class sophis::tools::dataModel::DataSet &) const
        // Static functions:
        public: static class sophis::static_data::CSRTimeDensity * sophis::static_data::CSRTimeDensity::CreateFromDescription(class sophis::tools::dataModel::DataSet const &)
        public: static void sophis::static_data::CSRTimeDensity::DescribeIdentifiers(class sophis::tools::dataModel::Data &, long, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
        public: static class sophis::static_data::CSRTimeDensity const * sophis::static_data::CSRTimeDensity::GetInstance(long)
        public: static class sophis::static_data::CSRTimeDensity const * sophis::static_data::CSRTimeDensity::GetInstance(char const *)
      public:
      };

      class/*or struct*/ CSRYieldCurveFamily
      {
        // Static functions:
        public: static long sophis::static_data::CSRYieldCurveFamily::GetYieldCurveFamilyCode(long, char const *)
      public:
      };

      class/*or struct*/ ICSRCurrencyCreator
      {
        // VFTable. Offset=0, Size=0, Start=0
        // VFTable with 0 offset end

      public:
      };

      class NoSuchCurrency
      {
        // Functions:
        public: sophis::static_data::NoSuchCurrency::NoSuchCurrency(class sophis::static_data::NoSuchCurrency const &)
        public: sophis::static_data::NoSuchCurrency::NoSuchCurrency(long)
#if 0 // All found virtual functions names:
        public: virtual sophis::static_data::NoSuchCurrency::~NoSuchCurrency(void)
#endif

      public:
      };

      namespace/*or class/struct?*/ dataModel
      {
        // Nested containers:
        class/*or struct*/ QuotedCurrencyPair
        {
          // Functions:
          public: sophis::static_data::dataModel::QuotedCurrencyPair::QuotedCurrencyPair(void)
          public: void sophis::static_data::dataModel::QuotedCurrencyPair::`vbase dtor'(void)
#if 0 // All found virtual functions names:
          public: virtual class sophis::tools::dataModel::PersistentState * sophis::static_data::dataModel::QuotedCurrencyPair::clone(void) const
          public: virtual char const * sophis::static_data::dataModel::QuotedCurrencyPair::ns(void) const
          public: virtual void sophis::static_data::dataModel::QuotedCurrencyPair::restoreObject(class sophis::tools::dataModel::Storage const &)
          public: virtual void sophis::static_data::dataModel::QuotedCurrencyPair::storeObject(class sophis::tools::dataModel::Storage &) const
          public: virtual char const * sophis::static_data::dataModel::QuotedCurrencyPair::typeName(void) const
#endif

        public:
        };


      };


      // Functions:
      void DescribeAgencies(class sophis::tools::dataModel::DataSet &, class sophis::instrument::CSRInstrument const *, char const *, bool, char const *)
      void DescribeBusinessSectors(class sophis::tools::dataModel::DataSet &, class sophis::instrument::CSRInstrument const *, char const *, bool, char const *)
      void DescribeCurrency(class sophis::tools::dataModel::DataSet &, long, char const *, bool, char const *)
      void UpdateBusinessSectors(class sophis::tools::dataModel::DataSet const &, class sophis::instrument::CSRInstrument *)
      long UpdateCurrency(class sophis::tools::dataModel::DataSet const &, bool, char const *)
      long UpdateMarket(class sophis::tools::dataModel::DataSet const &, long, char const *)
    public:
    };

    namespace/*or class/struct?*/ tools
    {
      // Nested containers:
      class CSRAbstractEvent
      {
        // Functions:
        public: sophis::tools::CSRAbstractEvent::CSRAbstractEvent(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::CSRAbstractEvent::~CSRAbstractEvent(void)
#endif

      public:
      };

      class CSRArchive
      {
#if 0 // All found virtual functions names:
        public: virtual class sophis::tools::CSRArchive * sophis::tools::CSRArchive::Clone(void) const
#endif

        // VFTable. Offset=0, Size=3, Start=0
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void sophisTools::comm::ByteArraySerializableArchive::Rewind(void) const; // 1 (comm::comm::ByteArraySerializableArchive)
        public: virtual class sophis::tools::CSRArchive * sophis::tools::CSRArchive::Clone(void) const; // 2
        // VFTable with 0 offset end

      public:
      };

      class CSREventVector
      {
        // Functions:
        public: sophis::tools::CSREventVector::CSREventVector(void)
        public: void sophis::tools::CSREventVector::ExecuteAll(void)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::CSREventVector::~CSREventVector(void)
#endif

      public:
      };

      template<typename T0, typename T1, typename T2, typename T4      >
      class CSRPrototype
      {
      public:
      };
#if 0 // Instances:
// <class sophis::misc::fpml::alerts::AlertToolkit, char const *, struct sophis::tools::less_char_star, class std::allocator<struct std::pair<char const *const, class sophis::misc::fpml::alerts::AlertToolkit *>>>
#if 0
      template<>
      class CSRPrototype<class sophis::misc::fpml::alerts::AlertToolkit, char const *, struct sophis::tools::less_char_star, class std::allocator<struct std::pair<char const *const, class sophis::misc::fpml::alerts::AlertToolkit *>>>
      {
      public:
      };
#endif
#endif


      class CSRTagMetadata
      {
        // Functions:
        public: sophis::tools::CSRTagMetadata::~CSRTagMetadata(void)
        // Variables:
        public: static class std::map<long, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>>> sophis::tools::CSRTagMetadata::___TAGS___
      public:
      };

      class/*or struct*/ CurrencyBankHolidaysUpdateEvent : public CSRAbstractEvent
      {
        // VFTable. Offset=0, Size=2, Start=0
        // Corresponding base: tools::tools::CSRAbstractEvent
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        // VFTable with 0 offset end

      public:
      };

      struct VoteException
      {
        // Functions:
        public: sophis::tools::VoteException::VoteException(struct sophis::tools::VoteException const &)
        public: sophis::tools::VoteException::VoteException(char const *, long, bool)
#if 0 // All found virtual functions names:
        public: virtual sophis::tools::VoteException::~VoteException(void)
#endif

      public:
      };

      class XML_Root
      {
        // Variables:
        public: static class sophis::tools::XML_Root *sophis::tools::XML_Root::global
      public:
      };

      class/*or struct*/ dataModel
      {
      public:
        // Enumerations:
        enum ValueKind : int {
        };

        // Nested containers:
        class ArrayOfStrings
        {
          // Functions:
          public: sophis::tools::dataModel::ArrayOfStrings::ArrayOfStrings(class sophis::tools::dataModel::ArrayOfStrings const &)
          public: sophis::tools::dataModel::ArrayOfStrings::ArrayOfStrings(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::ArrayOfStrings::~ArrayOfStrings(void)
#endif

        public:
        };

        class Attribute
        {
        public:
        };

        class AttributeSet
        {
          // Functions:
          public: class sophis::tools::dataModel::Attribute & sophis::tools::dataModel::AttributeSet::add_wons(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::AttributeSet::~AttributeSet(void)
#endif

          // VFTable. Offset=0, Size=14, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual sophis::tools::dataModel::AttributeSet::~AttributeSet(void) = 0; // 0
          public: virtual void unknown_vf_0_1(void) = 0; // 1
          public: virtual void unknown_vf_0_2(void) = 0; // 2
          public: virtual void unknown_vf_0_3(void) = 0; // 3
          public: virtual void unknown_vf_0_4(void) = 0; // 4
          public: virtual void unknown_vf_0_5(void) = 0; // 5
          public: virtual void unknown_vf_0_6(void) = 0; // 6
          public: virtual void unknown_vf_0_7(void) = 0; // 7
          public: virtual void unknown_vf_0_8(void) = 0; // 8
          public: virtual void unknown_vf_0_9(void) = 0; // 9
          public: virtual void unknown_vf_0_10(void) = 0; // 10
          public: virtual void unknown_vf_0_11(void) = 0; // 11
          public: virtual void unknown_vf_0_12(void) = 0; // 12
          public: virtual void unknown_vf_0_13(void); // 13
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ BasicDataSet
        {
          // Functions:
          public: sophis::tools::dataModel::BasicDataSet::BasicDataSet(void)
          public: void sophis::tools::dataModel::BasicDataSet::`vbase dtor'(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::BasicDataSet::~BasicDataSet(void)
          public: virtual void sophis::tools::dataModel::BasicDataSet::clear(void)
          public: virtual class sophis::tools::dataModel::Value * sophis::tools::dataModel::BasicDataSet::clone(void) const
          public: virtual bool sophis::tools::dataModel::BasicDataSet::compare(class sophis::tools::dataModel::Value const &) const
          public: virtual unsigned __int64 sophis::tools::dataModel::BasicDataSet::componentCount(bool) const
          public: virtual class sophis::tools::dataModel::GenericDataIterator<class sophis::tools::dataModel::Data> * sophis::tools::dataModel::BasicDataSet::components(void)
          public: virtual class sophis::tools::dataModel::GenericDataIterator<class sophis::tools::dataModel::Data const> * sophis::tools::dataModel::BasicDataSet::components(void) const
          public: virtual class sophis::tools::dataModel::Data & sophis::tools::dataModel::BasicDataSet::getData(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *)
          public: virtual class sophis::tools::dataModel::Data const & sophis::tools::dataModel::BasicDataSet::getData(char const *, enum sophis::tools::dataModel::ValueKind) const
          public: virtual class sophis::tools::dataModel::Data & sophis::tools::dataModel::BasicDataSet::getDataFront(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *)
          public: virtual bool sophis::tools::dataModel::BasicDataSet::has(char const *, bool) const
          public: virtual enum sophis::tools::dataModel::ValueKind sophis::tools::dataModel::BasicDataSet::kind(void) const
          public: virtual class sophis::tools::dataModel::Data & sophis::tools::dataModel::BasicDataSet::lookup(char const *, bool)
          public: virtual class sophis::tools::dataModel::Data const & sophis::tools::dataModel::BasicDataSet::lookup(char const *, bool) const
          public: virtual void sophis::tools::dataModel::BasicDataSet::mergeWith(class sophis::tools::dataModel::DataSet const &, bool)
          public: virtual void sophis::tools::dataModel::BasicDataSet::ns(char const *)
          public: virtual char const * sophis::tools::dataModel::BasicDataSet::ns(void) const
          public: virtual void sophis::tools::dataModel::BasicDataSet::print(class std::basic_ostream<char, struct std::char_traits<char>> &) const
          public: virtual bool sophis::tools::dataModel::BasicDataSet::remove(char const *, bool)
          public: virtual void sophis::tools::dataModel::BasicDataSet::type(char const *)
          public: virtual char const * sophis::tools::dataModel::BasicDataSet::type(void) const
#endif

          // VFTable. Offset=0, Size=22, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual enum sophis::tools::dataModel::ValueKind sophis::tools::dataModel::BasicDataSet::kind(void) const; // 0
          public: virtual class sophis::tools::dataModel::Value * sophis::tools::dataModel::BasicDataSet::clone(void) const; // 1
          public: virtual bool sophis::tools::dataModel::BasicDataSet::compare(class sophis::tools::dataModel::Value const &) const; // 2
          public: virtual char const * sophis::tools::dataModel::BasicDataSet::ns(void) const; // 3
          public: virtual void sophis::tools::dataModel::BasicDataSet::ns(char const *); // 4
          public: virtual char const * sophis::tools::dataModel::BasicDataSet::type(void) const; // 5
          public: virtual void sophis::tools::dataModel::BasicDataSet::type(char const *); // 6
          public: virtual void sophis::tools::dataModel::BasicDataSet::print(class std::basic_ostream<char, struct std::char_traits<char>> &) const; // 7
          public: virtual void unknown_vf_0_8(void); // 8
          public: virtual class sophis::tools::dataModel::GenericDataIterator<class sophis::tools::dataModel::Data const> * sophis::tools::dataModel::BasicDataSet::components(void) const; // 9
          public: virtual class sophis::tools::dataModel::GenericDataIterator<class sophis::tools::dataModel::Data> * sophis::tools::dataModel::BasicDataSet::components(void); // 10
          public: virtual unsigned __int64 sophis::tools::dataModel::BasicDataSet::componentCount(bool) const; // 11
          public: virtual void sophis::tools::dataModel::BasicDataSet::clear(void); // 12
          public: virtual class sophis::tools::dataModel::Data const & sophis::tools::dataModel::BasicDataSet::lookup(char const *, bool) const; // 13
          public: virtual class sophis::tools::dataModel::Data & sophis::tools::dataModel::BasicDataSet::lookup(char const *, bool); // 14
          public: virtual class sophis::tools::dataModel::Data const & sophis::tools::dataModel::BasicDataSet::getData(char const *, enum sophis::tools::dataModel::ValueKind) const; // 15
          public: virtual class sophis::tools::dataModel::Data & sophis::tools::dataModel::BasicDataSet::getData(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *); // 16
          public: virtual class sophis::tools::dataModel::Data & sophis::tools::dataModel::BasicDataSet::getDataFront(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *); // 17
          public: virtual bool sophis::tools::dataModel::BasicDataSet::has(char const *, bool) const; // 18
          public: virtual bool sophis::tools::dataModel::BasicDataSet::remove(char const *, bool); // 19
          public: virtual void sophis::tools::dataModel::BasicDataSet::mergeWith(class sophis::tools::dataModel::DataSet const &, bool); // 20
          public: virtual void unknown_vf_0_21(void); // 21
          // VFTable with 0 offset end

          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual sophis::tools::dataModel::BasicDataSet::~BasicDataSet(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        namespace/*or class/struct?*/ Constants
        {
          // Variables:
          public: static char const *sophis::tools::dataModel::Constants::SOPHIS_COMMON_BYTE
          public: static char const *sophis::tools::dataModel::Constants::SOPHIS_COMMON_NAMESPACE
          public: static char const *sophis::tools::dataModel::Constants::SOPHIS_COMMON_RELATIVE_DATE
        };

        class Data
        {
          // VFTable. Offset=0, Size=8, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void) = 0; // 0
          public: virtual void unknown_vf_0_1(void) = 0; // 1
          public: virtual void unknown_vf_0_2(void) = 0; // 2
          public: virtual void unknown_vf_0_3(void) = 0; // 3
          public: virtual void unknown_vf_0_4(void) = 0; // 4
          public: virtual void unknown_vf_0_5(void) = 0; // 5
          public: virtual void unknown_vf_0_6(void) = 0; // 6
          public: virtual void unknown_vf_0_7(void); // 7
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ DataAdapter
        {
        public:
        };

        class DataContainer : public Value
        {
          // Functions:
          public: sophis::tools::dataModel::DataContainer::DataContainer(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::DataContainer::~DataContainer(void)
#endif

          // VFTable. Offset=0, Size=0, Start=0
          // Corresponding base: dataModel::dataModel::dataModel::Value
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ DataDataSetAdapter : public DataSet
        {
          // VFTable. Offset=0, Size=22, Start=22
          // Corresponding base: dataModel::dataModel::dataModel::DataSet
          // Owner: SophisXmlTools.dll
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ DataDataSetAdapterIterator : public GenericDataIterator<class sophis::tools::dataModel::Data const>
        {
          // VFTable. Offset=0, Size=4, Start=4
          // Corresponding base: GenericDataIterator::GenericDataIterator::GenericDataIterator::GenericDataIterator::GenericDataIterator<class sophis::tools::dataModel::Data const>
          // Owner: SophisXmlTools.dll
          // VFTable with 0 offset end

        public:
        };

        class DataExportException
        {
          // Functions:
          public: sophis::tools::dataModel::DataExportException::DataExportException(class sophis::tools::dataModel::DataExportException const &)
          public: sophis::tools::dataModel::DataExportException::DataExportException(char const *)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::DataExportException::~DataExportException(void)
#endif

        public:
        };

        class/*or struct*/ DataExporter
        {
          // Functions:
          public: sophis::tools::dataModel::DataExporter::DataExporter(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::DataExporter::~DataExporter(void)
#endif

        public:
        };

        class DataImportException : public DataModelException
        {
          // Functions:
          public: sophis::tools::dataModel::DataImportException::DataImportException(class sophis::tools::dataModel::DataImportException &&)
          public: sophis::tools::dataModel::DataImportException::DataImportException(class sophis::tools::dataModel::DataImportException const &)
          public: sophis::tools::dataModel::DataImportException::DataImportException(char const *, char const *)
          public: sophis::tools::dataModel::DataImportException::DataImportException(char const *)
          public: class sophis::tools::dataModel::DataImportException & sophis::tools::dataModel::DataImportException::operator=(class sophis::tools::dataModel::DataImportException &&)
          public: class sophis::tools::dataModel::DataImportException & sophis::tools::dataModel::DataImportException::operator=(class sophis::tools::dataModel::DataImportException const &)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::DataImportException::~DataImportException(void)
#endif

        public:
        };

        class/*or struct*/ DataImporter
        {
          // Functions:
          public: sophis::tools::dataModel::DataImporter::DataImporter(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::DataImporter::~DataImporter(void)
#endif

        public:
        };

        class DataModelException : public ExceptionBase
        {
          // Functions:
          protected: sophis::tools::dataModel::DataModelException::DataModelException(char const *, char const *)
          protected: sophis::tools::dataModel::DataModelException::DataModelException(char const *, char const *, long)
          public: sophis::tools::dataModel::DataModelException::DataModelException(class sophis::tools::dataModel::DataModelException const &)
          public: sophis::tools::dataModel::DataModelException::DataModelException(char const *)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::DataModelException::~DataModelException(void)
#endif

        public:
        };

        class DataSequence : public DataContainer
        {
          // VFTable. Offset=0, Size=20, Start=0
          // Corresponding base: dataModel::dataModel::dataModel::DataContainer
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void) = 0; // 0
          public: virtual void unknown_vf_0_1(void) = 0; // 1
          public: virtual void unknown_vf_0_2(void) = 0; // 2
          public: virtual void unknown_vf_0_3(void) = 0; // 3
          public: virtual void unknown_vf_0_4(void) = 0; // 4
          public: virtual void unknown_vf_0_5(void) = 0; // 5
          public: virtual void unknown_vf_0_6(void) = 0; // 6
          public: virtual void unknown_vf_0_7(void) = 0; // 7
          public: virtual void unknown_vf_0_8(void); // 8
          public: virtual void unknown_vf_0_9(void) = 0; // 9
          public: virtual void unknown_vf_0_10(void) = 0; // 10
          public: virtual void unknown_vf_0_11(void) = 0; // 11
          public: virtual void unknown_vf_0_12(void) = 0; // 12
          public: virtual void unknown_vf_0_13(void) = 0; // 13
          public: virtual void unknown_vf_0_14(void) = 0; // 14
          public: virtual void unknown_vf_0_15(void) = 0; // 15
          public: virtual void unknown_vf_0_16(void) = 0; // 16
          public: virtual void unknown_vf_0_17(void) = 0; // 17
          public: virtual void unknown_vf_0_18(void) = 0; // 18
          public: virtual void unknown_vf_0_19(void) = 0; // 19
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ DataSequenceDataSetAdapter : public DataSet
        {
          // VFTable. Offset=0, Size=22, Start=22
          // Corresponding base: dataModel::dataModel::dataModel::DataSet
          // Owner: SophisXmlTools.dll
          // VFTable with 0 offset end

        public:
        };

        class DataSet : public DataContainer
        {
          // Functions:
          public: sophis::tools::dataModel::DataSet::DataSet(void)
          public: class sophis::tools::dataModel::Value & sophis::tools::dataModel::DataSet::get(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *)
          public: class sophis::tools::dataModel::AttributeSet & sophis::tools::dataModel::DataSet::getAttributes(char const *)
          public: class sophis::tools::dataModel::AttributeSet const & sophis::tools::dataModel::DataSet::getAttributes(char const *) const
          public: class sophis::tools::dataModel::Data const & sophis::tools::dataModel::DataSet::getData(char const *, unsigned __int64) const
          public: class sophis::tools::dataModel::DataSequence & sophis::tools::dataModel::DataSet::getDataSequence(char const *, class sophis::tools::dataModel::Documentation const *)
          public: class sophis::tools::dataModel::DataSequence const & sophis::tools::dataModel::DataSet::getDataSequence(char const *) const
          public: class sophis::tools::dataModel::DataSet & sophis::tools::dataModel::DataSet::getDataSet(char const *, class sophis::tools::dataModel::Documentation const *)
          public: class sophis::tools::dataModel::DataSet const & sophis::tools::dataModel::DataSet::getDataSet(char const *) const
          public: class sophis::tools::dataModel::PlainValue & sophis::tools::dataModel::DataSet::getPlainValue(char const *, enum sophis::tools::dataModel::ValueKind)
          public: class sophis::tools::dataModel::PlainValue const & sophis::tools::dataModel::DataSet::getPlainValue(char const *, enum sophis::tools::dataModel::ValueKind) const
          public: unsigned __int64 sophis::tools::dataModel::DataSet::size(char const *) const
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::DataSet::~DataSet(void)
          public: virtual void sophis::tools::dataModel::DataSet::DeriveFrom(char const *)
#endif

          // VFTable. Offset=0, Size=22, Start=0
          // Corresponding base: dataModel::dataModel::dataModel::DataContainer
          // Added virtual functions:
          public: virtual sophis::tools::dataModel::DataSet::~DataSet(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          public: virtual void unknown_vf_0_2(void); // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void unknown_vf_0_4(void); // 4
          public: virtual void unknown_vf_0_5(void); // 5
          public: virtual void unknown_vf_0_6(void); // 6
          public: virtual void unknown_vf_0_7(void); // 7
          public: virtual void unknown_vf_0_8(void); // 8
          public: virtual void unknown_vf_0_9(void); // 9
          public: virtual void unknown_vf_0_10(void); // 10
          public: virtual void unknown_vf_0_11(void); // 11
          public: virtual void unknown_vf_0_12(void); // 12
          public: virtual void unknown_vf_0_13(void); // 13
          public: virtual void unknown_vf_0_14(void); // 14
          public: virtual void unknown_vf_0_15(void); // 15
          public: virtual void unknown_vf_0_16(void); // 16
          public: virtual void unknown_vf_0_17(void); // 17
          public: virtual void unknown_vf_0_18(void); // 18
          public: virtual void unknown_vf_0_19(void); // 19
          public: virtual void unknown_vf_0_20(void); // 20
          public: virtual void sophis::tools::dataModel::DataSet::DeriveFrom(char const *); // 21
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ DataSetUtil
        {
          // Static functions:
          public: static void sophis::tools::dataModel::DataSetUtil::add(class sophis::tools::dataModel::DataSet &, class sophis::tools::dataModel::Data const &)
          public: static void sophis::tools::dataModel::DataSetUtil::copy(class sophis::tools::dataModel::Data &, class sophis::tools::dataModel::Data const &, bool, bool, bool)
          public: static void sophis::tools::dataModel::DataSetUtil::copy(class sophis::tools::dataModel::Data &, class sophis::tools::dataModel::Data const &, bool, bool)
          public: static void sophis::tools::dataModel::DataSetUtil::copy(class sophis::tools::dataModel::Data &, class sophis::tools::dataModel::Data const &, bool)
          public: static void sophis::tools::dataModel::DataSetUtil::copy(class sophis::tools::dataModel::Value &, class sophis::tools::dataModel::Value const &)
          public: static bool sophis::tools::dataModel::DataSetUtil::fullCompare(class sophis::tools::dataModel::DataSet const &, class sophis::tools::dataModel::DataSet const &, class std::basic_ostream<char, struct std::char_traits<char>> &)
        public:
        };

        class/*or struct*/ DataTraversal
        {
          // Functions:
          public: sophis::tools::dataModel::DataTraversal::DataTraversal(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::DataTraversal::~DataTraversal(void)
          public: virtual bool sophis::tools::dataModel::DataTraversal::traverseDataSequence(class sophis::tools::dataModel::DataSequence const &, class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::ParentStack>, char const *)
          public: virtual bool sophis::tools::dataModel::DataTraversal::traverseDataSet(class sophis::tools::dataModel::DataSet const &, class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::ParentStack>, char const *)
          public: virtual bool sophis::tools::dataModel::DataTraversal::traversePlainValue(class sophis::tools::dataModel::PlainValue const &, class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::ParentStack>, char const *)
#endif

        public:
        };

        class DataTypeRepository
        {
          // Functions:
          public: sophis::tools::dataModel::DataTypeRepository::DataTypeRepository(void)
          public: void sophis::tools::dataModel::DataTypeRepository::`vbase dtor'(void)
          // VFTable. Offset=32, Size=4, Start=0
          // Owner: SophisSystem.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_32_0(void); // 0
          public: virtual void unknown_vf_32_1(void); // 1
          public: virtual void unknown_vf_32_2(void); // 2
          public: virtual void unknown_vf_32_3(void); // 3
#endif
          // VFTable with 32 offset end

        public:
        };

        namespace/*or class/struct?*/ DataTypeRepositorySingletonHolder
        {
          // Variables:
          private: static class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::DataTypeRepository> sophis::tools::dataModel::DataTypeRepositorySingletonHolder::fInstance
        };

        class Documentation
        {
          // Functions:
          public: sophis::tools::dataModel::Documentation::Documentation(class sophis::tools::dataModel::Documentation const &)
          public: sophis::tools::dataModel::Documentation::Documentation(void)
          public: bool sophis::tools::dataModel::Documentation::multiTypesInSequence(void) const
          public: char const * sophis::tools::dataModel::Documentation::refName(void) const
          public: char const * sophis::tools::dataModel::Documentation::refType(void) const
          public: bool sophis::tools::dataModel::Documentation::sequence(void) const
          public: char const * sophis::tools::dataModel::Documentation::substitutionGroup(void) const
          public: char const * sophis::tools::dataModel::Documentation::substitutionGroupElement(void) const
          public: char const * sophis::tools::dataModel::Documentation::substitutionGroupHeadType(void) const
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::Documentation::~Documentation(void)
          public: virtual bool sophis::tools::dataModel::Documentation::Anonymous(void) const
          public: virtual bool sophis::tools::dataModel::Documentation::Choise(void) const
          public: virtual char const * sophis::tools::dataModel::Documentation::Comment(void) const
          public: virtual char const * sophis::tools::dataModel::Documentation::CommentComplexType(void) const
          public: virtual char const * sophis::tools::dataModel::Documentation::ComplexType(void) const
          public: virtual char const * sophis::tools::dataModel::Documentation::EnumsComment(int) const
          public: virtual int sophis::tools::dataModel::Documentation::EnumsCount(void) const
          public: virtual char const * sophis::tools::dataModel::Documentation::EnumsVal(int) const
          public: virtual int sophis::tools::dataModel::Documentation::MaximumSize(void) const
          public: virtual int sophis::tools::dataModel::Documentation::MinimumSize(void) const
          public: virtual char const * sophis::tools::dataModel::Documentation::NameSpace(void) const
          public: virtual bool sophis::tools::dataModel::Documentation::NilPossible(void) const
          public: virtual bool sophis::tools::dataModel::Documentation::NormalizedString(void) const
          public: virtual bool sophis::tools::dataModel::Documentation::Optional(void) const
#endif

          // VFTable. Offset=0, Size=15, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual sophis::tools::dataModel::Documentation::~Documentation(void); // 0
          public: virtual bool sophis::tools::dataModel::Documentation::Optional(void) const; // 1
          public: virtual bool sophis::tools::dataModel::Documentation::NilPossible(void) const; // 2
          public: virtual char const * sophis::tools::dataModel::Documentation::ComplexType(void) const; // 3
          public: virtual int sophis::tools::dataModel::Documentation::MinimumSize(void) const; // 4
          public: virtual int sophis::tools::dataModel::Documentation::MaximumSize(void) const; // 5
          public: virtual bool sophis::tools::dataModel::Documentation::NormalizedString(void) const; // 6
          public: virtual char const * sophis::tools::dataModel::Documentation::Comment(void) const; // 7
          public: virtual char const * sophis::tools::dataModel::Documentation::CommentComplexType(void) const; // 8
          public: virtual int sophis::tools::dataModel::Documentation::EnumsCount(void) const; // 9
          public: virtual char const * sophis::tools::dataModel::Documentation::EnumsVal(int) const; // 10
          public: virtual char const * sophis::tools::dataModel::Documentation::EnumsComment(int) const; // 11
          public: virtual char const * sophis::tools::dataModel::Documentation::NameSpace(void) const; // 12
          public: virtual bool sophis::tools::dataModel::Documentation::Choise(void) const; // 13
          public: virtual bool sophis::tools::dataModel::Documentation::Anonymous(void) const; // 14
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ DocumentationDecorator : public Documentation
        {
          // Functions:
          public: sophis::tools::dataModel::DocumentationDecorator::DocumentationDecorator(class sophis::tools::dataModel::Documentation const *)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::DocumentationDecorator::~DocumentationDecorator(void)
          public: virtual bool sophis::tools::dataModel::DocumentationDecorator::Anonymous(void) const
          public: virtual bool sophis::tools::dataModel::DocumentationDecorator::Choise(void) const
          public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::Comment(void) const
          public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::CommentComplexType(void) const
          public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::ComplexType(void) const
          public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::EnumsComment(int) const
          public: virtual int sophis::tools::dataModel::DocumentationDecorator::EnumsCount(void) const
          public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::EnumsVal(int) const
          public: virtual int sophis::tools::dataModel::DocumentationDecorator::MaximumSize(void) const
          public: virtual int sophis::tools::dataModel::DocumentationDecorator::MinimumSize(void) const
          public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::NameSpace(void) const
          public: virtual bool sophis::tools::dataModel::DocumentationDecorator::NilPossible(void) const
          public: virtual bool sophis::tools::dataModel::DocumentationDecorator::NormalizedString(void) const
          public: virtual bool sophis::tools::dataModel::DocumentationDecorator::Optional(void) const
#endif

          // VFTable. Offset=0, Size=15, Start=15
          // Corresponding base: dataModel::dataModel::dataModel::Documentation
          // public: virtual sophis::tools::dataModel::DocumentationDecorator::~DocumentationDecorator(void); // 0
          // Overrides:
          public: virtual bool sophis::tools::dataModel::DocumentationDecorator::Optional(void) const override; // 1
          public: virtual bool sophis::tools::dataModel::DocumentationDecorator::NilPossible(void) const override; // 2
          public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::ComplexType(void) const override; // 3
          public: virtual int sophis::tools::dataModel::DocumentationDecorator::MinimumSize(void) const override; // 4
          public: virtual int sophis::tools::dataModel::DocumentationDecorator::MaximumSize(void) const override; // 5
          public: virtual bool sophis::tools::dataModel::DocumentationDecorator::NormalizedString(void) const override; // 6
          public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::Comment(void) const override; // 7
          public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::CommentComplexType(void) const override; // 8
          public: virtual int sophis::tools::dataModel::DocumentationDecorator::EnumsCount(void) const override; // 9
          public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::EnumsVal(int) const override; // 10
          public: virtual char const * sophis::tools::dataModel::DocumentationDecorator::EnumsComment(int) const override; // 11
          public: virtual bool sophis::tools::dataModel::DocumentationDecorator::Choise(void) const override; // 13
          public: virtual bool sophis::tools::dataModel::DocumentationDecorator::Anonymous(void) const override; // 14
          // VFTable with 0 offset end

        public:
        };

        class DuplicateData
        {
          // Functions:
          public: sophis::tools::dataModel::DuplicateData::DuplicateData(class sophis::tools::dataModel::DuplicateData const &)
          public: sophis::tools::dataModel::DuplicateData::DuplicateData(char const *)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::DuplicateData::~DuplicateData(void)
#endif

        public:
        };

        class EmptyValue
        {
          // Functions:
          public: sophis::tools::dataModel::EmptyValue::EmptyValue(class sophis::tools::dataModel::EmptyValue const &)
        public:
        };

        template<typename T1        >
        class GenericDataIterator
        {
        public:
        };
#if 0 // Instances:
// <class sophis::tools::dataModel::Data const>
#if 0
        template<>
        class GenericDataIterator<class sophis::tools::dataModel::Data const>
        {
          // VFTable. Offset=0, Size=4, Start=0
          // Owner: SophisXmlTools.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void) = 0; // 0
          public: virtual void unknown_vf_0_1(void) = 0; // 1
          public: virtual void unknown_vf_0_2(void) = 0; // 2
          public: virtual void unknown_vf_0_3(void); // 3
          // VFTable with 0 offset end

        public:
        };
#endif
// <class sophis::tools::dataModel::Data>
#if 0
        template<>
        class GenericDataIterator<class sophis::tools::dataModel::Data>
        {
        public:
        };
#endif
#endif


        class/*or struct*/ InvalidDataValue : public DataModelException
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Corresponding base: dataModel::dataModel::dataModel::DataModelException
          // Owner: SophisXML.dll
          // Owner: SophisXmlTools.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

        public:
        };

        class InvalidValueKind
        {
          // Functions:
          public: sophis::tools::dataModel::InvalidValueKind::InvalidValueKind(class sophis::tools::dataModel::InvalidValueKind const &)
          public: sophis::tools::dataModel::InvalidValueKind::InvalidValueKind(enum sophis::tools::dataModel::ValueKind, enum sophis::tools::dataModel::ValueKind)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::InvalidValueKind::~InvalidValueKind(void)
#endif

        public:
        };

        class IteratorOutOfBounds
        {
          // Functions:
          public: sophis::tools::dataModel::IteratorOutOfBounds::IteratorOutOfBounds(class sophis::tools::dataModel::IteratorOutOfBounds const &)
          public: sophis::tools::dataModel::IteratorOutOfBounds::IteratorOutOfBounds(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::IteratorOutOfBounds::~IteratorOutOfBounds(void)
#endif

        public:
        };

        class NamedEmptyValue
        {
          // Functions:
          public: sophis::tools::dataModel::NamedEmptyValue::NamedEmptyValue(class sophis::tools::dataModel::NamedEmptyValue const &)
          public: sophis::tools::dataModel::NamedEmptyValue::NamedEmptyValue(char const *)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::NamedEmptyValue::~NamedEmptyValue(void)
#endif

        public:
        };

        class NamedInvalidValueKind
        {
          // Functions:
          public: sophis::tools::dataModel::NamedInvalidValueKind::NamedInvalidValueKind(class sophis::tools::dataModel::NamedInvalidValueKind const &)
          public: sophis::tools::dataModel::NamedInvalidValueKind::NamedInvalidValueKind(char const *, enum sophis::tools::dataModel::ValueKind, enum sophis::tools::dataModel::ValueKind)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::NamedInvalidValueKind::~NamedInvalidValueKind(void)
#endif

        public:
        };

        class NoSuchData
        {
          // Functions:
          public: sophis::tools::dataModel::NoSuchData::NoSuchData(class sophis::tools::dataModel::NoSuchData const &)
          public: sophis::tools::dataModel::NoSuchData::NoSuchData(char const *)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::NoSuchData::~NoSuchData(void)
#endif

        public:
        };

        class ParentStack
        {
          // Functions:
          public: sophis::tools::dataModel::ParentStack::ParentStack(class sophis::tools::dataModel::ParentStack const &)
          public: void sophis::tools::dataModel::ParentStack::`vbase dtor'(void)
          // VFTable. Offset=48, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_48_0(void); // 0
          public: virtual void unknown_vf_48_1(void); // 1
          public: virtual void unknown_vf_48_2(void); // 2
          public: virtual void unknown_vf_48_3(void); // 3
#endif
          // VFTable with 48 offset end

        public:
        };

        class PersistentState
        {
        public:
        };

        class PlainValue
        {
        public:
        };

        class/*or struct*/ RootPersistentState
        {
#if 0 // All found virtual functions names:
          public: virtual bool sophis::tools::dataModel::RootPersistentState::isAChoice(void) const
          public: virtual class sophis::tools::dataModel::PersistentState * sophis::tools::dataModel::RootPersistentState::parent(void)
          public: virtual class sophis::tools::dataModel::PersistentState const * sophis::tools::dataModel::RootPersistentState::parent(void) const
          public: virtual char const * sophis::tools::dataModel::RootPersistentState::typeComment(void) const
#endif

        public:
        };

        class Storage
        {
          // Functions:
          public: sophis::tools::dataModel::Storage::Storage(class sophis::tools::dataModel::DataSet *, bool)
          public: sophis::tools::dataModel::Storage::Storage(class sophis::tools::dataModel::DataSet const *)
          public: void sophis::tools::dataModel::Storage::`vbase dtor'(void)
          public: bool sophis::tools::dataModel::Storage::has(char const *) const
          public: bool sophis::tools::dataModel::Storage::restore(char const *, long &, bool) const
          public: bool sophis::tools::dataModel::Storage::restore(char const *, class sophis::tools::dataModel::PersistentState &, bool) const
          public: void sophis::tools::dataModel::Storage::store(char const *, class sophis::tools::dataModel::PersistentState const &, bool, class sophis::tools::dataModel::Documentation *)
        public:
        };

        class TransformationFailure
        {
          // Functions:
          public: sophis::tools::dataModel::TransformationFailure::TransformationFailure(class sophis::tools::dataModel::TransformationFailure const &)
          public: sophis::tools::dataModel::TransformationFailure::TransformationFailure(char const *)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::TransformationFailure::~TransformationFailure(void)
#endif

        public:
        };

        class Transformer
        {
          // Functions:
          public: sophis::tools::dataModel::Transformer::Transformer(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::Transformer::~Transformer(void)
#endif

        public:
        };

        class/*or struct*/ TransformerManagerSingleton
        {
          // Static functions:
          public: static void sophis::tools::dataModel::TransformerManagerSingleton::dispose(void)
          public: static void sophis::tools::dataModel::TransformerManagerSingleton::init(void)
        public:
        };

        class Traversal
        {
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::Traversal::~Traversal(void)
#endif

        public:
        };

        class/*or struct*/ Traverser
        {
          // Functions:
          public: sophis::tools::dataModel::Traverser::Traverser(bool, bool)
          public: void sophis::tools::dataModel::Traverser::`vbase dtor'(void)
#if 0 // All found virtual functions names:
          public: virtual bool sophis::tools::dataModel::Traverser::traverse(class sophis::tools::dataModel::DataContainer const &, class sophis::tools::dataModel::Traversal &)
#endif

          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class UnknownValueKind
        {
          // Functions:
          public: sophis::tools::dataModel::UnknownValueKind::UnknownValueKind(class sophis::tools::dataModel::UnknownValueKind const &)
          public: sophis::tools::dataModel::UnknownValueKind::UnknownValueKind(long)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::dataModel::UnknownValueKind::~UnknownValueKind(void)
#endif

        public:
        };

        class Value
        {
          // VFTable. Offset=0, Size=0, Start=0
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ ValueTypeUtil
        {
          // Static functions:
          public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophis::tools::dataModel::ValueTypeUtil::getTextKind(enum sophis::tools::dataModel::ValueKind)
          public: static bool sophis::tools::dataModel::ValueTypeUtil::isPlain(enum sophis::tools::dataModel::ValueKind)
          public: static enum sophis::tools::dataModel::ValueKind sophis::tools::dataModel::ValueTypeUtil::properKind(long const &)
          public: static enum sophis::tools::dataModel::ValueKind sophis::tools::dataModel::ValueTypeUtil::properKind(__int64 const &)
        public:
        };


        // Functions:
        class std::basic_ostream<char, struct std::char_traits<char>> & sophis::tools::dataModel::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::tools::dataModel::ArrayOfStrings const &)
        class std::basic_ostream<char, struct std::char_traits<char>> & sophis::tools::dataModel::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::tools::dataModel::Value const &)
      public:
      };

      struct less_char_star
      {
      public:
      };

      class/*or struct*/ util
      {
      public:
        // Nested containers:
        class/*or struct*/ BasicRunnable
        {
          // Functions:
          public: sophis::tools::util::BasicRunnable::BasicRunnable(void)
          protected: bool sophis::tools::util::BasicRunnable::exitRequested(void) const
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::util::BasicRunnable::~BasicRunnable(void)
          public: virtual void sophis::tools::util::BasicRunnable::_add_ref(void)
          public: virtual void sophis::tools::util::BasicRunnable::_remove_ref(void)
          protected: virtual void sophis::tools::util::BasicRunnable::clean(void)
          public: virtual long sophis::tools::util::BasicRunnable::getRef(void) const
          public: virtual bool sophis::tools::util::BasicRunnable::isRunning(void)
          protected: virtual void sophis::tools::util::BasicRunnable::requestExit(void)
          public: virtual void sophis::tools::util::BasicRunnable::run(void)
          public: virtual void sophis::tools::util::BasicRunnable::stop(bool)
#endif

        public:
        };

        class ByteArray
        {
          // Functions:
          public: sophis::tools::util::ByteArray::ByteArray(void)
          public: void sophis::tools::util::ByteArray::`vbase dtor'(void)
          public: void sophis::tools::util::ByteArray::buffer(char *, unsigned __int64, unsigned __int64, bool)
          public: char const *const sophis::tools::util::ByteArray::buffer(void) const
          public: unsigned __int64 sophis::tools::util::ByteArray::size(void) const
          // VFTable. Offset=64, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_64_0(void); // 0
          public: virtual void unknown_vf_64_1(void); // 1
          public: virtual void unknown_vf_64_2(void); // 2
          public: virtual void unknown_vf_64_3(void); // 3
#endif
          // VFTable with 64 offset end

        public:
        };

        class/*or struct*/ DateTimeUtil
        {
          // Static functions:
          public: static __int64 sophis::tools::util::DateTimeUtil::currentTime(void)
          public: static void sophis::tools::util::DateTimeUtil::dispose(void)
          public: static void sophis::tools::util::DateTimeUtil::init(void)
          public: static void sophis::tools::util::DateTimeUtil::printDateTime(class std::basic_ostream<char, struct std::char_traits<char>> &, __int64, bool, bool, char, char)
          public: static void sophis::tools::util::DateTimeUtil::scanDate(class std::basic_istream<char, struct std::char_traits<char>> &, class sophisTools::CSRDay &, bool)
          // Variables:
          public: static unsigned long const sophis::tools::util::DateTimeUtil::SECONDS_PER_DAY
        public:
        };

        class DateTimeWrapper
        {
          // Functions:
          public: sophis::tools::util::DateTimeWrapper::DateTimeWrapper(void)
          public: sophis::tools::util::DateTimeWrapper::~DateTimeWrapper(void)
        public:
        };

        struct MonthDayWrapper
        {
        public:
        };

        template<typename T1        >
        class NotificationListener
        {
        public:
        };
#if 0 // Instances:
// <struct sophis::tools::util::Worker::JobTerminatedEvent>
#if 0
        template<>
        class NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>
        {
          // Functions:
          public: sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>::~NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>(void)
#endif

          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisSystem.dll
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>::~NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>(void) = 0; // 0
          // VFTable with 0 offset end

          // VFTable. Offset=32, Size=4, Start=0
          // Owner: SophisSystem.dll
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>::~NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>(void); // 0
          public: virtual void unknown_vf_32_1(void); // 1
          public: virtual void unknown_vf_32_2(void); // 2
          public: virtual void unknown_vf_32_3(void); // 3
#endif
          // VFTable with 32 offset end

        public:
        };
#endif
#endif


        template<typename T1        >
        class NotificationProvider
        {
        public:
        };
#if 0 // Instances:
// <struct sophis::tools::util::Worker::JobTerminatedEvent>
#if 0
        template<>
        class NotificationProvider<struct sophis::tools::util::Worker::JobTerminatedEvent>
        {
        public:
          // Nested containers:
          class/*or struct*/ ListenerList
          {
            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisSystem.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_40_0(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };


          // VFTable. Offset=0, Size=4, Start=0
          // Owner: SophisSystem.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          public: virtual void unknown_vf_0_2(void); // 2
          public: virtual void unknown_vf_0_3(void); // 3
          // VFTable with 0 offset end

          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisSystem.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };
#endif
#endif


        class StringBoolMap
        {
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class StringPairList
        {
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class/*or struct*/ StringToStringMap
        {
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class/*or struct*/ SystemInfoUtil
        {
          // Static functions:
          public: static void sophis::tools::util::SystemInfoUtil::dispose(void)
          public: static void sophis::tools::util::SystemInfoUtil::init(void)
        public:
        };

        class TimeWrapper
        {
          // Functions:
          public: sophis::tools::util::TimeWrapper::TimeWrapper(void)
          public: sophis::tools::util::TimeWrapper::~TimeWrapper(void)
        public:
        };

        class UIDGenerator
        {
        public:
        };

        class Worker : public Runnable
        {
        public:
          // Nested containers:
          struct JobTerminatedEvent
          {
          public:
          };


          // Functions:
          public: sophis::tools::util::Worker::Worker(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::util::Worker::~Worker(void)
#endif

        public:
        };

        class WorkerAllocator : public RefCount
        {
          // Functions:
          public: sophis::tools::util::WorkerAllocator::WorkerAllocator(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::tools::util::WorkerAllocator::~WorkerAllocator(void)
#endif

        public:
        };

        class WorkerList
        {
          // Functions:
          public: sophis::tools::util::WorkerList::WorkerList(void)
          public: void sophis::tools::util::WorkerList::`vbase dtor'(void)
          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisSystem.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class WorkerVisitor : public RefCount
        {
          // VFTable. Offset=0, Size=5, Start=0
          // Corresponding base: base::base::RefCount
          // Owner: SophisSystem.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void) = 0; // 0
          public: virtual void unknown_vf_0_1(void) = 0; // 1
          public: virtual void unknown_vf_0_2(void) = 0; // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void unknown_vf_0_4(void) = 0; // 4
          // VFTable with 0 offset end

        public:
        };

        struct YearMonthWrapper
        {
        public:
        };


        // Functions:
        class std::basic_istream<char, struct std::char_traits<char>> & sophis::tools::util::operator>>(class std::basic_istream<char, struct std::char_traits<char>> &, struct sophis::tools::util::MonthDayWrapper &)
        class std::basic_istream<char, struct std::char_traits<char>> & sophis::tools::util::operator>>(class std::basic_istream<char, struct std::char_traits<char>> &, struct sophis::tools::util::YearMonthWrapper &)
        class std::basic_istream<char, struct std::char_traits<char>> & sophis::tools::util::operator>>(class std::basic_istream<char, struct std::char_traits<char>> &, class sophis::tools::util::DateTimeWrapper &)
        class std::basic_istream<char, struct std::char_traits<char>> & sophis::tools::util::operator>>(class std::basic_istream<char, struct std::char_traits<char>> &, class sophis::tools::util::TimeWrapper &)
        class std::basic_ostream<char, struct std::char_traits<char>> & sophis::tools::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, struct sophis::tools::util::MonthDayWrapper const &)
        class std::basic_ostream<char, struct std::char_traits<char>> & sophis::tools::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, struct sophis::tools::util::YearMonthWrapper const &)
        class std::basic_ostream<char, struct std::char_traits<char>> & sophis::tools::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::tools::util::DateTimeWrapper const &)
        class std::basic_ostream<char, struct std::char_traits<char>> & sophis::tools::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::tools::util::TimeWrapper const &)
      public:
      };


    };

    namespace/*or class/struct?*/ valuation
    {
      // Nested containers:
      namespace/*or class/struct?*/ dataModel
      {
        // Nested containers:
        struct InstrumentSet
        {
        public:
        };


      };


    };

    namespace/*or class/struct?*/ xml
    {
      // Nested containers:
      class SimpleAllocator : public MemoryManager
      {
        // Functions:
        public: sophis::xml::SimpleAllocator::SimpleAllocator(void)
        // Static functions:
        public: static void sophis::xml::SimpleAllocator::dispose(void)
        public: static class xercesc_3_2::MemoryManager * sophis::xml::SimpleAllocator::getInstance(void)
        public: static void sophis::xml::SimpleAllocator::init(void)
        // Variables:
        private: static class sophis::xml::SimpleAllocator *sophis::xml::SimpleAllocator::fSimpleAllocator
#if 0 // All found virtual functions names:
        public: virtual sophis::xml::SimpleAllocator::~SimpleAllocator(void)
        public: virtual void * sophis::xml::SimpleAllocator::allocate(unsigned __int64)
        public: virtual void sophis::xml::SimpleAllocator::deallocate(void *)
        public: virtual class xercesc_3_2::MemoryManager * sophis::xml::SimpleAllocator::getExceptionMemoryManager(void)
#endif

        // VFTable. Offset=0, Size=4, Start=0
        // Corresponding base: xercesc_3_2::MemoryManager
        // Owner: SophisXML.dll
        // Added virtual functions:
        public: virtual sophis::xml::SimpleAllocator::~SimpleAllocator(void); // 0
        public: virtual class xercesc_3_2::MemoryManager * sophis::xml::SimpleAllocator::getExceptionMemoryManager(void); // 1
        public: virtual void * sophis::xml::SimpleAllocator::allocate(unsigned __int64); // 2
        public: virtual void sophis::xml::SimpleAllocator::deallocate(void *); // 3
        // VFTable with 0 offset end

      public:
      };

      namespace/*or class/struct?*/ dataModel
      {
        // Nested containers:
        class/*or struct*/ AlreadyDefinedDataSetOnlyDecorator : public DataSetDecorator
        {
          // VFTable. Offset=0, Size=63, Start=63
          // Corresponding base: dataModel::dataModel::dataModel::DataSetDecorator
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ AttributeSetDecorator : public Decorator<class sophis::tools::dataModel::AttributeSet>
        {
          // VFTable. Offset=0, Size=14, Start=14
          // Corresponding base: Decorator::Decorator::Decorator::Decorator::Decorator<class sophis::tools::dataModel::AttributeSet>
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ BasicDataFactory
        {
          // VFTable. Offset=0, Size=9, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          public: virtual void unknown_vf_0_2(void); // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void unknown_vf_0_4(void); // 4
          public: virtual void unknown_vf_0_5(void); // 5
          public: virtual void unknown_vf_0_6(void); // 6
          public: virtual void unknown_vf_0_7(void); // 7
          public: virtual void unknown_vf_0_8(void); // 8
          // VFTable with 0 offset end

          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class/*or struct*/ BasicGrammarPool
        {
          // VFTable. Offset=0, Size=12, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          public: virtual void unknown_vf_0_2(void); // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void unknown_vf_0_4(void); // 4
          public: virtual void unknown_vf_0_5(void); // 5
          public: virtual void unknown_vf_0_6(void); // 6
          public: virtual void unknown_vf_0_7(void); // 7
          public: virtual void unknown_vf_0_8(void); // 8
          public: virtual void unknown_vf_0_9(void); // 9
          public: virtual void unknown_vf_0_10(void); // 10
          public: virtual void unknown_vf_0_11(void); // 11
          // VFTable with 0 offset end

          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_40_0(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class BasicGrammarPoolImpl
        {
          // Functions:
          protected: sophis::xml::dataModel::BasicGrammarPoolImpl::BasicGrammarPoolImpl(class xercesc_3_2::XMLGrammarPool *, class xercesc_3_2::DOMLSParser *, class xercesc_3_2::DOMLSSerializer *)
          protected: void sophis::xml::dataModel::BasicGrammarPoolImpl::`vbase dtor'(void)
          public: void sophis::xml::dataModel::BasicGrammarPoolImpl::addGrammar(class sophis::xml::dataModel::XMLGrammar &)
          public: void sophis::xml::dataModel::BasicGrammarPoolImpl::addGrammar(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>)
          public: void sophis::xml::dataModel::BasicGrammarPoolImpl::addGrammar(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, char const *, bool)
          public: void sophis::xml::dataModel::BasicGrammarPoolImpl::doAddGrammar(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, bool)
          public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::doGetEnumValues(char const *, char const *, class sophis::tools::dataModel::ArrayOfStrings &)
          public: class sophis::tools::dataModel::ArrayOfStrings const * sophis::xml::dataModel::BasicGrammarPoolImpl::enumValues(char const *, char const *)
          public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::findElement(char const *, char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
          public: void sophis::xml::dataModel::BasicGrammarPoolImpl::findNamespaces(char const *, class std::set<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>> &)
          public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::getAllSubstitutedNames(char const *, class std::vector<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>> &)
          public: class xercesc_3_2::DOMLSParser * sophis::xml::dataModel::BasicGrammarPoolImpl::getDOMBuilder(void)
          private: class xercesc_3_2::DOMImplementationLS * sophis::xml::dataModel::BasicGrammarPoolImpl::getDOMImplementationLS(void)
          public: class xercesc_3_2::DOMLSOutput * sophis::xml::dataModel::BasicGrammarPoolImpl::getDOMLSOutput(void)
          public: class xercesc_3_2::DOMLSSerializer * sophis::xml::dataModel::BasicGrammarPoolImpl::getDOMWriter(void)
          public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::getElementType(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
          public: class xercesc_3_2::SchemaGrammar * sophis::xml::dataModel::BasicGrammarPoolImpl::getGrammar(char const *)
          public: class xercesc_3_2::SchemaGrammar * sophis::xml::dataModel::BasicGrammarPoolImpl::getGrammar(char16_t const *)
          public: char const * sophis::xml::dataModel::BasicGrammarPoolImpl::getSubstituteFor(char const *, char const *, char const *)
          public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::getSubstitutedNS(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
          public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::getSubstitutedNameAndNS(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
          public: class xercesc_3_2::XMLGrammarPool * sophis::xml::dataModel::BasicGrammarPoolImpl::getXMLGrammarPool(void)
          public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::hasGrammar(char const *)
          public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::hasGrammar(char16_t const *)
          public: void sophis::xml::dataModel::BasicGrammarPoolImpl::joinGrammarLoading(void)
          public: void sophis::xml::dataModel::BasicGrammarPoolImpl::logLoadedGrammars(enum Log::Severity)
          public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::orphanGrammar(char const *)
          public: bool sophis::xml::dataModel::BasicGrammarPoolImpl::orphanGrammar(char16_t const *)
          public: unsigned __int64 sophis::xml::dataModel::BasicGrammarPoolImpl::pendingGrammars(void)
          public: void sophis::xml::dataModel::BasicGrammarPoolImpl::stop(void)
          // Static functions:
          private: static void sophis::xml::dataModel::BasicGrammarPoolImpl::CreateGrammarLoadingGuard(class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> &)
          public: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::BasicGrammarPoolImpl> sophis::xml::dataModel::BasicGrammarPoolImpl::create(void)
          public: static void sophis::xml::dataModel::BasicGrammarPoolImpl::dispose(void)
          public: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::BasicGrammarPoolImpl> sophis::xml::dataModel::BasicGrammarPoolImpl::getInstance(void)
          public: static char16_t const * sophis::xml::dataModel::BasicGrammarPoolImpl::getLoadStoreFeatureName(void)
          public: static void sophis::xml::dataModel::BasicGrammarPoolImpl::init(void)
          // Variables:
          private: static char const *sophis::xml::dataModel::BasicGrammarPoolImpl::__CLASS__
          private: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::BasicGrammarPoolImpl> sophis::xml::dataModel::BasicGrammarPoolImpl::fInstance
          private: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::GrammarLoadingGuard> sophis::xml::dataModel::BasicGrammarPoolImpl::gGuard
          private: static bool sophis::xml::dataModel::BasicGrammarPoolImpl::gLateLoading
          private: static class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> sophis::xml::dataModel::BasicGrammarPoolImpl::gWorker
#if 0 // All found virtual functions names:
          protected: virtual sophis::xml::dataModel::BasicGrammarPoolImpl::~BasicGrammarPoolImpl(void)
          public: virtual void sophis::xml::dataModel::BasicGrammarPoolImpl::_add_ref(void)
          public: virtual void sophis::xml::dataModel::BasicGrammarPoolImpl::_remove_ref(void)
          public: virtual long sophis::xml::dataModel::BasicGrammarPoolImpl::getRef(void) const
#endif

          // VFTable. Offset=56, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          protected: virtual sophis::xml::dataModel::BasicGrammarPoolImpl::~BasicGrammarPoolImpl(void); // 0
          public: virtual void unknown_vf_56_1(void); // 1
          public: virtual void unknown_vf_56_2(void); // 2
          public: virtual void unknown_vf_56_3(void); // 3
#endif
          // VFTable with 56 offset end

        public:
        };

        class/*or struct*/ BasicXMLDocument
        {
          // Functions:
          public: sophis::xml::dataModel::BasicXMLDocument::BasicXMLDocument(void)
          public: void sophis::xml::dataModel::BasicXMLDocument::`vbase dtor'(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::dataModel::BasicXMLDocument::~BasicXMLDocument(void)
          public: virtual void sophis::xml::dataModel::BasicXMLDocument::_add_ref(void)
          public: virtual void sophis::xml::dataModel::BasicXMLDocument::_remove_ref(void)
          public: virtual long sophis::xml::dataModel::BasicXMLDocument::getRef(void) const
          public: virtual class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::BasicXMLDocument::getRootNode(void)
          public: virtual class sophis::tools::dataModel::DataSet const & sophis::xml::dataModel::BasicXMLDocument::getRootNode(void) const
          public: virtual void sophis::xml::dataModel::BasicXMLDocument::load(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophis::xml::dataModel::ImportFeature const *)
          public: virtual void sophis::xml::dataModel::BasicXMLDocument::save(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>, class sophis::xml::dataModel::ExportFeature const *)
#endif

          // VFTable. Offset=0, Size=8, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void sophis::xml::dataModel::BasicXMLDocument::_add_ref(void); // 0
          public: virtual void sophis::xml::dataModel::BasicXMLDocument::_remove_ref(void); // 1
          public: virtual long sophis::xml::dataModel::BasicXMLDocument::getRef(void) const; // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void sophis::xml::dataModel::BasicXMLDocument::load(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophis::xml::dataModel::ImportFeature const *); // 4
          public: virtual void sophis::xml::dataModel::BasicXMLDocument::save(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>, class sophis::xml::dataModel::ExportFeature const *); // 5
          public: virtual class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::BasicXMLDocument::getRootNode(void); // 6
          public: virtual class sophis::tools::dataModel::DataSet const & sophis::xml::dataModel::BasicXMLDocument::getRootNode(void) const; // 7
          // VFTable with 0 offset end

          // VFTable. Offset=40, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual sophis::xml::dataModel::BasicXMLDocument::~BasicXMLDocument(void); // 0
          public: virtual void unknown_vf_40_1(void); // 1
          public: virtual void unknown_vf_40_2(void); // 2
          public: virtual void unknown_vf_40_3(void); // 3
#endif
          // VFTable with 40 offset end

        public:
        };

        class/*or struct*/ BasicXMLDocumentImpl
        {
          // VFTable. Offset=32, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_32_0(void); // 0
          public: virtual void unknown_vf_32_1(void); // 1
          public: virtual void unknown_vf_32_2(void); // 2
          public: virtual void unknown_vf_32_3(void); // 3
#endif
          // VFTable with 32 offset end

        public:
        };

        class/*or struct*/ CascadedXSLTransformer
        {
          // Functions:
          protected: sophis::xml::dataModel::CascadedXSLTransformer::CascadedXSLTransformer(char const *, bool, bool, class std::vector<class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>>> const &, char const *)
          protected: void sophis::xml::dataModel::CascadedXSLTransformer::`vbase dtor'(void)
          public: void sophis::xml::dataModel::CascadedXSLTransformer::transform(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
          // Static functions:
          public: static class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::Transformer> sophis::xml::dataModel::CascadedXSLTransformer::create(char const *, class std::vector<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>> const &, bool, bool, char const *)
          // Variables:
          private: static char const *sophis::xml::dataModel::CascadedXSLTransformer::__CLASS__
#if 0 // All found virtual functions names:
          protected: virtual sophis::xml::dataModel::CascadedXSLTransformer::~CascadedXSLTransformer(void)
          public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::dispose(void)
          public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::init(void)
          public: virtual char const * sophis::xml::dataModel::CascadedXSLTransformer::name(void)
          public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::postprocess(class sophis::tools::dataModel::DataSet &)
          public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::preprocess(class sophis::tools::dataModel::DataSet &)
          public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::transform(class sophis::tools::dataModel::DataSet &)
#endif

          // VFTable. Offset=0, Size=8, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual char const * sophis::xml::dataModel::CascadedXSLTransformer::name(void); // 0
          public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::init(void); // 1
          public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::preprocess(class sophis::tools::dataModel::DataSet &); // 2
          public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::transform(class sophis::tools::dataModel::DataSet &); // 3
          public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::postprocess(class sophis::tools::dataModel::DataSet &); // 4
          public: virtual void sophis::xml::dataModel::CascadedXSLTransformer::dispose(void); // 5
          public: virtual void unknown_vf_0_6(void); // 6
          public: virtual void unknown_vf_0_7(void); // 7
          // VFTable with 0 offset end

          // VFTable. Offset=152, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          protected: virtual sophis::xml::dataModel::CascadedXSLTransformer::~CascadedXSLTransformer(void); // 0
          public: virtual void unknown_vf_152_1(void); // 1
          public: virtual void unknown_vf_152_2(void); // 2
          public: virtual void unknown_vf_152_3(void); // 3
#endif
          // VFTable with 152 offset end

        public:
        };

        class/*or struct*/ CharArrayXMLDataImporter
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

          // VFTable. Offset=152, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_152_0(void); // 0
          public: virtual void unknown_vf_152_1(void); // 1
          public: virtual void unknown_vf_152_2(void); // 2
          public: virtual void unknown_vf_152_3(void); // 3
#endif
          // VFTable with 152 offset end

        public:
        };

        class ConfigUtil
        {
          // Functions:
          public: class sophis::xml::dataModel::ConfigUtil & sophis::xml::dataModel::ConfigUtil::operator=(class sophis::xml::dataModel::ConfigUtil &&)
          public: class sophis::xml::dataModel::ConfigUtil & sophis::xml::dataModel::ConfigUtil::operator=(class sophis::xml::dataModel::ConfigUtil const &)
          // Static functions:
          public: static bool sophis::xml::dataModel::ConfigUtil::getCheckResult(void)
        public:
        };

        template<typename T1        >
        class/*or struct*/ DataContainerDecorator
        {
        public:
        };
#if 0 // Instances:
// <class sophis::xml::dataModel::DataSequenceOnlyDecorator>
#if 0
        template<>
        class/*or struct*/ DataContainerDecorator<class sophis::xml::dataModel::DataSequenceOnlyDecorator> : public DataSequenceOnlyDecorator
        {
          // VFTable. Offset=0, Size=22, Start=22
          // Corresponding base: dataModel::dataModel::dataModel::DataSequenceOnlyDecorator
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };
#endif
// <class sophis::xml::dataModel::DataSetOnlyDecorator>
#if 0
        template<>
        class/*or struct*/ DataContainerDecorator<class sophis::xml::dataModel::DataSetOnlyDecorator> : public DataSetOnlyDecorator
        {
          // VFTable. Offset=0, Size=63, Start=63
          // Corresponding base: dataModel::dataModel::dataModel::DataSetOnlyDecorator
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };
#endif
#endif


        class/*or struct*/ DataDecorator : public Decorator<class sophis::tools::dataModel::Data>
        {
          // VFTable. Offset=0, Size=12, Start=8
          // Corresponding base: Decorator::Decorator::Decorator::Decorator::Decorator<class sophis::tools::dataModel::Data>
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_8(void); // 8
          public: virtual void unknown_vf_0_9(void); // 9
          public: virtual void unknown_vf_0_10(void); // 10
          public: virtual void unknown_vf_0_11(void); // 11
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ DataDecoratorInSequence : public DataSetDataDecorator
        {
          // VFTable. Offset=0, Size=14, Start=12
          // Corresponding base: dataModel::dataModel::dataModel::DataSetDataDecorator
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_12(void); // 12
          public: virtual void unknown_vf_0_13(void); // 13
          // VFTable with 0 offset end

        public:
        };

        class DataFactory : public RefCount
        {
        public:
          // Nested containers:
          class/*or struct*/ Manager
          {
            // Static functions:
            public: static class std::map<class sophisTools::FlyWeightString, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>, struct std::less<class sophisTools::FlyWeightString>, class std::allocator<struct std::pair<class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>>> const & sophis::xml::dataModel::DataFactory::Manager::allInstances(void)
            public: static void sophis::xml::dataModel::DataFactory::Manager::disposeAll(void)
            public: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory> sophis::xml::dataModel::DataFactory::Manager::getDefaultInstance(void)
            public: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory> sophis::xml::dataModel::DataFactory::Manager::getInstance(char const *)
            public: static void sophis::xml::dataModel::DataFactory::Manager::initAll(void)
            public: static void sophis::xml::dataModel::DataFactory::Manager::install(class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>)
            public: static void sophis::xml::dataModel::DataFactory::Manager::installDefault(class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>)
          public:
          };


          // VFTable. Offset=0, Size=9, Start=0
          // Corresponding base: base::base::RefCount
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void) = 0; // 0
          public: virtual void unknown_vf_0_1(void) = 0; // 1
          public: virtual void unknown_vf_0_2(void) = 0; // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void unknown_vf_0_4(void) = 0; // 4
          public: virtual void unknown_vf_0_5(void) = 0; // 5
          public: virtual void unknown_vf_0_6(void) = 0; // 6
          public: virtual void unknown_vf_0_7(void) = 0; // 7
          public: virtual void unknown_vf_0_8(void) = 0; // 8
          // VFTable with 0 offset end

        public:
        };

        class DataSequenceDataDecorator : public DataDecorator
        {
          // VFTable. Offset=0, Size=12, Start=12
          // Corresponding base: dataModel::dataModel::dataModel::DataDecorator
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ DataSequenceDecorator : public DataContainerDecorator<class sophis::xml::dataModel::DataSequenceOnlyDecorator>
        {
          // VFTable. Offset=0, Size=22, Start=22
          // Corresponding base: DataContainerDecorator::DataContainerDecorator::DataContainerDecorator::DataContainerDecorator::DataContainerDecorator<class sophis::xml::dataModel::DataSequenceOnlyDecorator>
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };

        class DataSequenceOnlyDecorator : public Decorator<class sophis::tools::dataModel::DataSequence>
        {
          // VFTable. Offset=0, Size=22, Start=20
          // Corresponding base: Decorator::Decorator::Decorator::Decorator::Decorator<class sophis::tools::dataModel::DataSequence>
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_20(void); // 20
          public: virtual void unknown_vf_0_21(void); // 21
          // VFTable with 0 offset end

        public:
        };

        class DataSetDataDecorator : public DataDecorator
        {
          // VFTable. Offset=0, Size=12, Start=12
          // Corresponding base: dataModel::dataModel::dataModel::DataDecorator
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ DataSetDecorator : public DataContainerDecorator<class sophis::xml::dataModel::DataSetOnlyDecorator>
        {
          // VFTable. Offset=0, Size=63, Start=63
          // Corresponding base: DataContainerDecorator::DataContainerDecorator::DataContainerDecorator::DataContainerDecorator::DataContainerDecorator<class sophis::xml::dataModel::DataSetOnlyDecorator>
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };

        class DataSetOnlyDecorator : public Decorator<class sophis::tools::dataModel::DataSet>
        {
          // VFTable. Offset=0, Size=63, Start=22
          // Corresponding base: Decorator::Decorator::Decorator::Decorator::Decorator<class sophis::tools::dataModel::DataSet>
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_22(void); // 22
          public: virtual void unknown_vf_0_23(void); // 23
          public: virtual void unknown_vf_0_24(void); // 24
          public: virtual void unknown_vf_0_25(void); // 25
          public: virtual void unknown_vf_0_26(void); // 26
          public: virtual void unknown_vf_0_27(void); // 27
          public: virtual void unknown_vf_0_28(void); // 28
          public: virtual void unknown_vf_0_29(void); // 29
          public: virtual void unknown_vf_0_30(void); // 30
          public: virtual void unknown_vf_0_31(void); // 31
          public: virtual void unknown_vf_0_32(void); // 32
          public: virtual void unknown_vf_0_33(void); // 33
          public: virtual void unknown_vf_0_34(void); // 34
          public: virtual void unknown_vf_0_35(void); // 35
          public: virtual void unknown_vf_0_36(void); // 36
          public: virtual void unknown_vf_0_37(void); // 37
          public: virtual void unknown_vf_0_38(void); // 38
          public: virtual void unknown_vf_0_39(void); // 39
          public: virtual void unknown_vf_0_40(void); // 40
          public: virtual void unknown_vf_0_41(void); // 41
          public: virtual void unknown_vf_0_42(void); // 42
          public: virtual void unknown_vf_0_43(void); // 43
          public: virtual void unknown_vf_0_44(void); // 44
          public: virtual void unknown_vf_0_45(void); // 45
          public: virtual void unknown_vf_0_46(void); // 46
          public: virtual void unknown_vf_0_47(void); // 47
          public: virtual void unknown_vf_0_48(void); // 48
          public: virtual void unknown_vf_0_49(void); // 49
          public: virtual void unknown_vf_0_50(void); // 50
          public: virtual void unknown_vf_0_51(void); // 51
          public: virtual void unknown_vf_0_52(void); // 52
          public: virtual void unknown_vf_0_53(void); // 53
          public: virtual void unknown_vf_0_54(void); // 54
          public: virtual void unknown_vf_0_55(void); // 55
          public: virtual void unknown_vf_0_56(void); // 56
          public: virtual void unknown_vf_0_57(void); // 57
          public: virtual void unknown_vf_0_58(void); // 58
          public: virtual void unknown_vf_0_59(void); // 59
          public: virtual void unknown_vf_0_60(void); // 60
          public: virtual void unknown_vf_0_61(void); // 61
          public: virtual void unknown_vf_0_62(void); // 62
          // VFTable with 0 offset end

        public:
        };

        template<typename T1        >
        class/*or struct*/ Decorator
        {
        public:
        };
#if 0 // Instances:
// <class sophis::tools::dataModel::AttributeSet>
#if 0
        template<>
        class/*or struct*/ Decorator<class sophis::tools::dataModel::AttributeSet> : public GrammarFriend, public AttributeSet
        {
          // VFTable. Offset=0, Size=14, Start=14
          // Corresponding base: dataModel::dataModel::dataModel::AttributeSet
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };
#endif
// <class sophis::tools::dataModel::Data>
#if 0
        template<>
        class/*or struct*/ Decorator<class sophis::tools::dataModel::Data> : public GrammarFriend, public Data
        {
          // VFTable. Offset=0, Size=8, Start=8
          // Corresponding base: dataModel::dataModel::dataModel::Data
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };
#endif
// <class sophis::tools::dataModel::DataSequence>
#if 0
        template<>
        class/*or struct*/ Decorator<class sophis::tools::dataModel::DataSequence> : public GrammarFriend, public DataSequence
        {
          // VFTable. Offset=0, Size=20, Start=20
          // Corresponding base: dataModel::dataModel::dataModel::DataSequence
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };
#endif
// <class sophis::tools::dataModel::DataSet>
#if 0
        template<>
        class/*or struct*/ Decorator<class sophis::tools::dataModel::DataSet> : public GrammarFriend, public DataSet
        {
          // VFTable. Offset=0, Size=22, Start=22
          // Corresponding base: dataModel::dataModel::dataModel::DataSet
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };
#endif
#endif


        class/*or struct*/ EnumMap
        {
          // VFTable. Offset=80, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_80_0(void); // 0
          public: virtual void unknown_vf_80_1(void); // 1
          public: virtual void unknown_vf_80_2(void); // 2
          public: virtual void unknown_vf_80_3(void); // 3
#endif
          // VFTable with 80 offset end

        public:
        };

        class ExportFeature
        {
          // Functions:
          public: sophis::xml::dataModel::ExportFeature::ExportFeature(class sophis::xml::dataModel::ExportFeature const &)
          public: sophis::xml::dataModel::ExportFeature::ExportFeature(void)
          public: sophis::xml::dataModel::ExportFeature::~ExportFeature(void)
          public: class sophis::xml::dataModel::ExportFeature & sophis::xml::dataModel::ExportFeature::operator=(class sophis::xml::dataModel::ExportFeature const &)
          public: void sophis::xml::dataModel::ExportFeature::checkResult(bool)
          public: bool sophis::xml::dataModel::ExportFeature::checkResult(void) const
          public: void sophis::xml::dataModel::ExportFeature::encoding(long)
          public: long sophis::xml::dataModel::ExportFeature::encoding(void) const
          public: void sophis::xml::dataModel::ExportFeature::instanceTypeGeneration(bool)
          public: bool sophis::xml::dataModel::ExportFeature::instanceTypeGeneration(void) const
          public: void sophis::xml::dataModel::ExportFeature::qualifiedAttributes(char const *, bool)
          public: class sophisTools::base::RefCountHandle<class sophis::tools::util::StringBoolMap> sophis::xml::dataModel::ExportFeature::qualifiedAttributes(void) const
          public: void sophis::xml::dataModel::ExportFeature::qualifiedElements(char const *, bool)
          public: class sophisTools::base::RefCountHandle<class sophis::tools::util::StringBoolMap> sophis::xml::dataModel::ExportFeature::qualifiedElements(void) const
          public: void sophis::xml::dataModel::ExportFeature::renameNonUniqueIds(bool)
          public: bool sophis::xml::dataModel::ExportFeature::renameNonUniqueIds(void) const
          public: void sophis::xml::dataModel::ExportFeature::renameSubstitutionGroups(bool)
          public: bool sophis::xml::dataModel::ExportFeature::renameSubstitutionGroups(void) const
          public: void sophis::xml::dataModel::ExportFeature::renameXsiType(bool)
          public: bool sophis::xml::dataModel::ExportFeature::renameXsiType(void) const
          public: void sophis::xml::dataModel::ExportFeature::reservePrefix(char const *, char const *)
          public: class sophisTools::base::RefCountHandle<class sophis::tools::util::StringPairList> sophis::xml::dataModel::ExportFeature::reservedPrefixes(void) const
          public: void sophis::xml::dataModel::ExportFeature::withFormatPrettyPrint(bool)
          public: bool sophis::xml::dataModel::ExportFeature::withFormatPrettyPrint(void) const
          public: void sophis::xml::dataModel::ExportFeature::withGrammar(bool)
          public: bool sophis::xml::dataModel::ExportFeature::withGrammar(void) const
          public: void sophis::xml::dataModel::ExportFeature::withXmlDeclaration(bool)
          public: bool sophis::xml::dataModel::ExportFeature::withXmlDeclaration(void) const
        public:
        };

        class/*or struct*/ ExportFeatureImpl
        {
          // VFTable. Offset=184, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_184_0(void); // 0
          public: virtual void unknown_vf_184_1(void); // 1
          public: virtual void unknown_vf_184_2(void); // 2
          public: virtual void unknown_vf_184_3(void); // 3
#endif
          // VFTable with 184 offset end

        public:
        };

        class/*or struct*/ GrammarFriend
        {
        public:
        };

        class/*or struct*/ GrammarLoadingException : public ExceptionBase
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Corresponding base: base::base::ExceptionBase
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

        public:
        };

        class GrammarLoadingGuard
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

          // VFTable. Offset=136, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_136_0(void); // 0
          public: virtual void unknown_vf_136_1(void); // 1
          public: virtual void unknown_vf_136_2(void); // 2
          public: virtual void unknown_vf_136_3(void); // 3
#endif
          // VFTable with 136 offset end

        public:
        };

        class GrammarPool : public RefCount
        {
          // VFTable. Offset=0, Size=12, Start=0
          // Corresponding base: base::base::RefCount
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void) = 0; // 0
          public: virtual void unknown_vf_0_1(void) = 0; // 1
          public: virtual void unknown_vf_0_2(void) = 0; // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void unknown_vf_0_4(void) = 0; // 4
          public: virtual void unknown_vf_0_5(void) = 0; // 5
          public: virtual void unknown_vf_0_6(void) = 0; // 6
          public: virtual void unknown_vf_0_7(void) = 0; // 7
          public: virtual void unknown_vf_0_8(void) = 0; // 8
          public: virtual void unknown_vf_0_9(void) = 0; // 9
          public: virtual void unknown_vf_0_10(void) = 0; // 10
          public: virtual void unknown_vf_0_11(void) = 0; // 11
          // VFTable with 0 offset end

        public:
        };

        class GrammarPoolSingleton
        {
          // Functions:
          public: class sophis::xml::dataModel::GrammarPoolSingleton & sophis::xml::dataModel::GrammarPoolSingleton::operator=(class sophis::xml::dataModel::GrammarPoolSingleton &&)
          public: class sophis::xml::dataModel::GrammarPoolSingleton & sophis::xml::dataModel::GrammarPoolSingleton::operator=(class sophis::xml::dataModel::GrammarPoolSingleton const &)
          // Static functions:
          public: static class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::GrammarPool> sophis::xml::dataModel::GrammarPoolSingleton::getInstance(void)
        public:
        };

        class ImportFeature
        {
          // Functions:
          public: sophis::xml::dataModel::ImportFeature::ImportFeature(class sophis::xml::dataModel::ImportFeature const &)
          public: sophis::xml::dataModel::ImportFeature::ImportFeature(void)
          public: sophis::xml::dataModel::ImportFeature::~ImportFeature(void)
          public: class sophis::xml::dataModel::ImportFeature & sophis::xml::dataModel::ImportFeature::operator=(class sophis::xml::dataModel::ImportFeature const &)
          public: void sophis::xml::dataModel::ImportFeature::convertEnums(bool)
          public: bool sophis::xml::dataModel::ImportFeature::convertEnums(void) const
          public: void sophis::xml::dataModel::ImportFeature::ignoreRootElement(bool)
          public: bool sophis::xml::dataModel::ImportFeature::ignoreRootElement(void) const
          public: void sophis::xml::dataModel::ImportFeature::keepXmlStartingAttributes(bool)
          public: bool sophis::xml::dataModel::ImportFeature::keepXmlStartingAttributes(void) const
          public: void sophis::xml::dataModel::ImportFeature::keepXsiTypeAttributes(bool)
          public: bool sophis::xml::dataModel::ImportFeature::keepXsiTypeAttributes(void) const
          public: void sophis::xml::dataModel::ImportFeature::renameXsiType(bool)
          public: bool sophis::xml::dataModel::ImportFeature::renameXsiType(void) const
          public: void sophis::xml::dataModel::ImportFeature::withGrammar(bool)
          public: bool sophis::xml::dataModel::ImportFeature::withGrammar(void) const
        public:
        };

        class/*or struct*/ ImportFeatureImpl
        {
          // VFTable. Offset=32, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_32_0(void); // 0
          public: virtual void unknown_vf_32_1(void); // 1
          public: virtual void unknown_vf_32_2(void); // 2
          public: virtual void unknown_vf_32_3(void); // 3
#endif
          // VFTable with 32 offset end

        public:
        };

        class/*or struct*/ InputStreamXMLDataImporter
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

          // VFTable. Offset=152, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_152_0(void); // 0
          public: virtual void unknown_vf_152_1(void); // 1
          public: virtual void unknown_vf_152_2(void); // 2
          public: virtual void unknown_vf_152_3(void); // 3
#endif
          // VFTable with 152 offset end

        public:
        };

        class InvalidGrammar : public DataImportException
        {
          // Functions:
          public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(class sophis::xml::dataModel::InvalidGrammar &&)
          public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(class sophis::xml::dataModel::InvalidGrammar const &)
          public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(char const *, char const *)
          public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(char const *)
          public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(char const *, unsigned __int64, char const *)
          public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(char const *, unsigned __int64)
          public: sophis::xml::dataModel::InvalidGrammar::InvalidGrammar(char16_t const *, unsigned __int64, char16_t const *)
          public: class sophis::xml::dataModel::InvalidGrammar & sophis::xml::dataModel::InvalidGrammar::operator=(class sophis::xml::dataModel::InvalidGrammar &&)
          public: class sophis::xml::dataModel::InvalidGrammar & sophis::xml::dataModel::InvalidGrammar::operator=(class sophis::xml::dataModel::InvalidGrammar const &)
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::dataModel::InvalidGrammar::~InvalidGrammar(void)
#endif

          // VFTable. Offset=0, Size=1, Start=0
          // Corresponding base: dataModel::dataModel::dataModel::DataImportException
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual sophis::xml::dataModel::InvalidGrammar::~InvalidGrammar(void); // 0
          // VFTable with 0 offset end

        public:
        };

        class InvalidXMLDocument : public DataImportException
        {
          // Functions:
          public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(class sophis::xml::dataModel::InvalidXMLDocument &&)
          public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(class sophis::xml::dataModel::InvalidXMLDocument const &)
          public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(char const *, char const *)
          public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(char const *)
          public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(char const *, char16_t const *)
          public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(char const *, unsigned __int64, char const *)
          public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(char const *, unsigned __int64)
          public: sophis::xml::dataModel::InvalidXMLDocument::InvalidXMLDocument(char16_t const *, unsigned __int64, char16_t const *)
          public: class sophis::xml::dataModel::InvalidXMLDocument & sophis::xml::dataModel::InvalidXMLDocument::operator=(class sophis::xml::dataModel::InvalidXMLDocument &&)
          public: class sophis::xml::dataModel::InvalidXMLDocument & sophis::xml::dataModel::InvalidXMLDocument::operator=(class sophis::xml::dataModel::InvalidXMLDocument const &)
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::dataModel::InvalidXMLDocument::~InvalidXMLDocument(void)
#endif

          // VFTable. Offset=0, Size=1, Start=0
          // Corresponding base: dataModel::dataModel::dataModel::DataImportException
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual sophis::xml::dataModel::InvalidXMLDocument::~InvalidXMLDocument(void); // 0
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ LateGrammarLoader
        {
          // VFTable. Offset=0, Size=10, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          public: virtual void unknown_vf_0_2(void); // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void unknown_vf_0_4(void); // 4
          public: virtual void unknown_vf_0_5(void); // 5
          public: virtual void unknown_vf_0_6(void); // 6
          public: virtual void unknown_vf_0_7(void); // 7
          public: virtual void unknown_vf_0_8(void); // 8
          public: virtual void unknown_vf_0_9(void); // 9
          // VFTable with 0 offset end

          // VFTable. Offset=80, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_80_0(void); // 0
          public: virtual void unknown_vf_80_1(void); // 1
          public: virtual void unknown_vf_80_2(void); // 2
          public: virtual void unknown_vf_80_3(void); // 3
#endif
          // VFTable with 80 offset end

        public:
        };

        class/*or struct*/ NamespaceDocumentation : public DocumentationDecorator
        {
          // VFTable. Offset=0, Size=15, Start=15
          // Corresponding base: dataModel::dataModel::dataModel::DocumentationDecorator
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ NullXMLDataExporter
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

          // VFTable. Offset=136, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_136_0(void); // 0
          public: virtual void unknown_vf_136_1(void); // 1
          public: virtual void unknown_vf_136_2(void); // 2
          public: virtual void unknown_vf_136_3(void); // 3
#endif
          // VFTable with 136 offset end

        public:
        };

        class/*or struct*/ NullXMLDataImporter
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

          // VFTable. Offset=136, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_136_0(void); // 0
          public: virtual void unknown_vf_136_1(void); // 1
          public: virtual void unknown_vf_136_2(void); // 2
          public: virtual void unknown_vf_136_3(void); // 3
#endif
          // VFTable with 136 offset end

        public:
        };

        class/*or struct*/ OStreamXMLDataExporter
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

          // VFTable. Offset=144, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_144_0(void); // 0
          public: virtual void unknown_vf_144_1(void); // 1
          public: virtual void unknown_vf_144_2(void); // 2
          public: virtual void unknown_vf_144_3(void); // 3
#endif
          // VFTable with 144 offset end

        public:
        };

        class/*or struct*/ OutputStreamXMLDataExporter
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

          // VFTable. Offset=144, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_144_0(void); // 0
          public: virtual void unknown_vf_144_1(void); // 1
          public: virtual void unknown_vf_144_2(void); // 2
          public: virtual void unknown_vf_144_3(void); // 3
#endif
          // VFTable with 144 offset end

        public:
        };

        class/*or struct*/ PlainValueDataDecorator : public DataDecorator
        {
          // VFTable. Offset=0, Size=12, Start=12
          // Corresponding base: dataModel::dataModel::dataModel::DataDecorator
          // Owner: SophisXML.dll
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ RandomAccessInputStreamXMLDataImporter
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

          // VFTable. Offset=144, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_144_0(void); // 0
          public: virtual void unknown_vf_144_1(void); // 1
          public: virtual void unknown_vf_144_2(void); // 2
          public: virtual void unknown_vf_144_3(void); // 3
#endif
          // VFTable with 144 offset end

        public:
        };

        class/*or struct*/ StringXMLDataExporter
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

          // VFTable. Offset=144, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_144_0(void); // 0
          public: virtual void unknown_vf_144_1(void); // 1
          public: virtual void unknown_vf_144_2(void); // 2
          public: virtual void unknown_vf_144_3(void); // 3
#endif
          // VFTable with 144 offset end

        public:
        };

        class XMLDataExporter
        {
          // Functions:
          public: sophis::xml::dataModel::XMLDataExporter::XMLDataExporter(class std::basic_ostream<char, struct std::char_traits<char>> &)
          public: sophis::xml::dataModel::XMLDataExporter::XMLDataExporter(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
          public: sophis::xml::dataModel::XMLDataExporter::XMLDataExporter(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
          public: sophis::xml::dataModel::XMLDataExporter::XMLDataExporter(void)
          public: void sophis::xml::dataModel::XMLDataExporter::`vbase dtor'(void)
          public: void sophis::xml::dataModel::XMLDataExporter::checkResult(bool)
          public: bool sophis::xml::dataModel::XMLDataExporter::checkResult(void) const
          public: class sophisTools::base::RefCountHandle<class sophis::xml::util::DOMDocumentWrapper> sophis::xml::dataModel::XMLDataExporter::getDOMDocument(void)
          public: class sophisTools::base::RefCountHandle<class sophis::xml::util::DOMDocumentWrapper> sophis::xml::dataModel::XMLDataExporter::getDOMDocument(bool)
          public: void sophis::xml::dataModel::XMLDataExporter::getFeature(class sophis::xml::dataModel::ExportFeature &) const
          public: void sophis::xml::dataModel::XMLDataExporter::instanceTypeGeneration(bool)
          public: bool sophis::xml::dataModel::XMLDataExporter::instanceTypeGeneration(void)
          public: void sophis::xml::dataModel::XMLDataExporter::lazyReservePrefix(char const *, char const *)
          public: void sophis::xml::dataModel::XMLDataExporter::qualifiedAttributes(char const *, bool)
          public: bool sophis::xml::dataModel::XMLDataExporter::qualifiedAttributes(char const *)
          public: void sophis::xml::dataModel::XMLDataExporter::qualifiedElements(char const *, bool)
          public: bool sophis::xml::dataModel::XMLDataExporter::qualifiedElements(char const *)
          public: void sophis::xml::dataModel::XMLDataExporter::renameNonUniqueIds(bool)
          public: bool sophis::xml::dataModel::XMLDataExporter::renameNonUniqueIds(void)
          public: void sophis::xml::dataModel::XMLDataExporter::renameSubstitutionGroups(bool)
          public: bool sophis::xml::dataModel::XMLDataExporter::renameSubstitutionGroups(void) const
          public: void sophis::xml::dataModel::XMLDataExporter::renameXsiType(bool)
          public: bool sophis::xml::dataModel::XMLDataExporter::renameXsiType(void) const
          public: void sophis::xml::dataModel::XMLDataExporter::reservePrefix(char const *, char const *)
          public: void sophis::xml::dataModel::XMLDataExporter::setFeature(class sophis::xml::dataModel::ExportFeature const &)
          public: void sophis::xml::dataModel::XMLDataExporter::withFormatPrettyPrint(bool)
          public: bool sophis::xml::dataModel::XMLDataExporter::withFormatPrettyPrint(void) const
          public: void sophis::xml::dataModel::XMLDataExporter::withGrammar(bool)
          public: bool sophis::xml::dataModel::XMLDataExporter::withGrammar(void) const
          public: void sophis::xml::dataModel::XMLDataExporter::withXmlDeclaration(bool)
          public: bool sophis::xml::dataModel::XMLDataExporter::withXmlDeclaration(void) const
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::dataModel::XMLDataExporter::~XMLDataExporter(void)
          public: virtual void sophis::xml::dataModel::XMLDataExporter::_add_ref(void)
          public: virtual void sophis::xml::dataModel::XMLDataExporter::_remove_ref(void)
          public: virtual void sophis::xml::dataModel::XMLDataExporter::documentName(char const *)
          public: virtual char const * sophis::xml::dataModel::XMLDataExporter::documentName(void) const
          public: virtual void sophis::xml::dataModel::XMLDataExporter::exportFrom(class sophis::tools::dataModel::DataSet &, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
          public: virtual void sophis::xml::dataModel::XMLDataExporter::exportFrom(class sophis::tools::dataModel::DataSet const &)
          public: virtual long sophis::xml::dataModel::XMLDataExporter::getRef(void) const
#endif

          // VFTable. Offset=0, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void sophis::xml::dataModel::XMLDataExporter::exportFrom(class sophis::tools::dataModel::DataSet const &); // 0
          public: virtual char const * sophis::xml::dataModel::XMLDataExporter::documentName(void) const; // 1
          public: virtual void sophis::xml::dataModel::XMLDataExporter::documentName(char const *); // 2
          public: virtual void sophis::xml::dataModel::XMLDataExporter::exportFrom(class sophis::tools::dataModel::DataSet &, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>); // 3
          // VFTable with 0 offset end

          // VFTable. Offset=48, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual sophis::xml::dataModel::XMLDataExporter::~XMLDataExporter(void); // 0
          public: virtual void unknown_vf_48_1(void); // 1
          public: virtual void unknown_vf_48_2(void); // 2
          public: virtual void unknown_vf_48_3(void); // 3
#endif
          // VFTable with 48 offset end

        public:
        };

        class/*or struct*/ XMLDataExporterImpl
        {
        public:
          // Nested containers:
          class/*or struct*/ ContainerStack
          {
            // VFTable. Offset=48, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_48_0(void); // 0
            public: virtual void unknown_vf_48_1(void); // 1
            public: virtual void unknown_vf_48_2(void); // 2
            public: virtual void unknown_vf_48_3(void); // 3
#endif
            // VFTable with 48 offset end

          public:
          };

          class/*or struct*/ HRefTraversal
          {
            // VFTable. Offset=0, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
            public: virtual void unknown_vf_0_0(void); // 0
            public: virtual void unknown_vf_0_1(void); // 1
            public: virtual void unknown_vf_0_2(void); // 2
            public: virtual void unknown_vf_0_3(void); // 3
            // VFTable with 0 offset end

            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_40_0(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };

          class/*or struct*/ IdRefToPositionListMap
          {
            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_40_0(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };

          class/*or struct*/ NamespacePrefixMap
          {
            // VFTable. Offset=56, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_56_0(void); // 0
            public: virtual void unknown_vf_56_1(void); // 1
            public: virtual void unknown_vf_56_2(void); // 2
            public: virtual void unknown_vf_56_3(void); // 3
#endif
            // VFTable with 56 offset end

          public:
          };

          class/*or struct*/ NamespaceQualifiedMap
          {
            // VFTable. Offset=32, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_32_0(void); // 0
            public: virtual void unknown_vf_32_1(void); // 1
            public: virtual void unknown_vf_32_2(void); // 2
            public: virtual void unknown_vf_32_3(void); // 3
#endif
            // VFTable with 32 offset end

          public:
          };

          class/*or struct*/ NamespaceSet
          {
            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_40_0(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };

          struct Position
          {
          public:
          };

          class PositionList
          {
            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_40_0(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };

          class PositionListPair
          {
            // VFTable. Offset=120, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_120_0(void); // 0
            public: virtual void unknown_vf_120_1(void); // 1
            public: virtual void unknown_vf_120_2(void); // 2
            public: virtual void unknown_vf_120_3(void); // 3
#endif
            // VFTable with 120 offset end

          public:
          };

          class/*or struct*/ ReplacePositionList
          {
            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_40_0(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };

          class/*or struct*/ WStringPairList
          {
            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_40_0(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };

          class/*or struct*/ WStringToBoolMap
          {
            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_40_0(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };

          class/*or struct*/ WStringToWStringMap
          {
            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_40_0(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };


          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void) = 0; // 0
          // VFTable with 0 offset end

          // VFTable. Offset=136, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_136_0(void); // 0
          public: virtual void unknown_vf_136_1(void); // 1
          public: virtual void unknown_vf_136_2(void); // 2
          public: virtual void unknown_vf_136_3(void); // 3
#endif
          // VFTable with 136 offset end

        public:
        };

        class XMLDataImporter
        {
          // Functions:
          public: sophis::xml::dataModel::XMLDataImporter::XMLDataImporter(char const *, unsigned __int64)
          public: sophis::xml::dataModel::XMLDataImporter::XMLDataImporter(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, unsigned __int64)
          public: sophis::xml::dataModel::XMLDataImporter::XMLDataImporter(class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>)
          public: sophis::xml::dataModel::XMLDataImporter::XMLDataImporter(void)
          public: void sophis::xml::dataModel::XMLDataImporter::`vbase dtor'(void)
          public: void sophis::xml::dataModel::XMLDataImporter::convertEnums(bool)
          public: class sophisTools::base::RefCountHandle<class sophis::xml::util::DOMDocumentWrapper> sophis::xml::dataModel::XMLDataImporter::getDOMDocument(void)
          public: class sophisTools::base::RefCountHandle<class sophis::xml::util::DOMDocumentWrapper> sophis::xml::dataModel::XMLDataImporter::getDOMDocument(bool)
          public: void sophis::xml::dataModel::XMLDataImporter::getFeature(class sophis::xml::dataModel::ImportFeature &) const
          public: void sophis::xml::dataModel::XMLDataImporter::keepXmlStartingAttributes(bool)
          public: bool sophis::xml::dataModel::XMLDataImporter::keepXmlStartingAttributes(void) const
          public: void sophis::xml::dataModel::XMLDataImporter::keepXsiTypeAttributes(bool)
          public: bool sophis::xml::dataModel::XMLDataImporter::keepXsiTypeAttributes(void) const
          public: void sophis::xml::dataModel::XMLDataImporter::renameXsiType(bool)
          public: bool sophis::xml::dataModel::XMLDataImporter::renameXsiType(void) const
          public: void sophis::xml::dataModel::XMLDataImporter::setFeature(class sophis::xml::dataModel::ImportFeature const &)
          // Static functions:
          public: static bool sophis::xml::dataModel::XMLDataImporter::parseXML(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
          // Variables:
          private: static char const *sophis::xml::dataModel::XMLDataImporter::__CLASS__
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::dataModel::XMLDataImporter::~XMLDataImporter(void)
          public: virtual void sophis::xml::dataModel::XMLDataImporter::_add_ref(void)
          public: virtual void sophis::xml::dataModel::XMLDataImporter::_remove_ref(void)
          public: virtual bool sophis::xml::dataModel::XMLDataImporter::convertEnums(void) const
          public: virtual long sophis::xml::dataModel::XMLDataImporter::getRef(void) const
          public: virtual void sophis::xml::dataModel::XMLDataImporter::ignoreRootElement(bool)
          public: virtual bool sophis::xml::dataModel::XMLDataImporter::ignoreRootElement(void) const
          public: virtual void sophis::xml::dataModel::XMLDataImporter::importTo(class sophis::tools::dataModel::DataSet &)
          public: virtual void sophis::xml::dataModel::XMLDataImporter::importTo(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophis::tools::dataModel::DataSet &)
          public: virtual void sophis::xml::dataModel::XMLDataImporter::withGrammar(bool)
          public: virtual bool sophis::xml::dataModel::XMLDataImporter::withGrammar(void) const
#endif

          // VFTable. Offset=0, Size=7, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void sophis::xml::dataModel::XMLDataImporter::importTo(class sophis::tools::dataModel::DataSet &); // 0
          public: virtual bool sophis::xml::dataModel::XMLDataImporter::ignoreRootElement(void) const; // 1
          public: virtual void sophis::xml::dataModel::XMLDataImporter::ignoreRootElement(bool); // 2
          public: virtual bool sophis::xml::dataModel::XMLDataImporter::withGrammar(void) const; // 3
          public: virtual void sophis::xml::dataModel::XMLDataImporter::withGrammar(bool); // 4
          public: virtual bool sophis::xml::dataModel::XMLDataImporter::convertEnums(void) const; // 5
          public: virtual void sophis::xml::dataModel::XMLDataImporter::importTo(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophis::tools::dataModel::DataSet &); // 6
          // VFTable with 0 offset end

          // VFTable. Offset=48, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual sophis::xml::dataModel::XMLDataImporter::~XMLDataImporter(void); // 0
          public: virtual void unknown_vf_48_1(void); // 1
          public: virtual void unknown_vf_48_2(void); // 2
          public: virtual void unknown_vf_48_3(void); // 3
#endif
          // VFTable with 48 offset end

        public:
        };

        class/*or struct*/ XMLDataImporterImpl
        {
        public:
          // Nested containers:
          struct NodeInfo
          {
          public:
          };

          class/*or struct*/ NodeMap
          {
            // VFTable. Offset=40, Size=4, Start=0
            // Owner: SophisXML.dll
            // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
            public: virtual void unknown_vf_40_0(void); // 0
            public: virtual void unknown_vf_40_1(void); // 1
            public: virtual void unknown_vf_40_2(void); // 2
            public: virtual void unknown_vf_40_3(void); // 3
#endif
            // VFTable with 40 offset end

          public:
          };


          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void) = 0; // 0
          // VFTable with 0 offset end

          // VFTable. Offset=136, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual void unknown_vf_136_0(void); // 0
          public: virtual void unknown_vf_136_1(void); // 1
          public: virtual void unknown_vf_136_2(void); // 2
          public: virtual void unknown_vf_136_3(void); // 3
#endif
          // VFTable with 136 offset end

        public:
        };

        class XMLDocument : public RefCount
        {
          // Functions:
          public: sophis::xml::dataModel::XMLDocument::XMLDocument(class sophis::xml::dataModel::XMLDocument &&)
          public: sophis::xml::dataModel::XMLDocument::XMLDocument(class sophis::xml::dataModel::XMLDocument const &)
          public: sophis::xml::dataModel::XMLDocument::XMLDocument(void)
          public: class sophis::xml::dataModel::XMLDocument & sophis::xml::dataModel::XMLDocument::operator=(class sophis::xml::dataModel::XMLDocument &&)
          public: class sophis::xml::dataModel::XMLDocument & sophis::xml::dataModel::XMLDocument::operator=(class sophis::xml::dataModel::XMLDocument const &)
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::dataModel::XMLDocument::~XMLDocument(void)
#endif

          // VFTable. Offset=0, Size=8, Start=0
          // Corresponding base: base::base::RefCount
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual sophis::xml::dataModel::XMLDocument::~XMLDocument(void) = 0; // 0
          public: virtual void unknown_vf_0_1(void) = 0; // 1
          public: virtual void unknown_vf_0_2(void) = 0; // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void unknown_vf_0_4(void) = 0; // 4
          public: virtual void unknown_vf_0_5(void) = 0; // 5
          public: virtual void unknown_vf_0_6(void) = 0; // 6
          public: virtual void unknown_vf_0_7(void) = 0; // 7
          // VFTable with 0 offset end

        public:
        };

        class XMLGrammar
        {
          // Functions:
          public: sophis::xml::dataModel::XMLGrammar::XMLGrammar(void)
          public: sophis::xml::dataModel::XMLGrammar::XMLGrammar(bool)
          public: void sophis::xml::dataModel::XMLGrammar::`vbase dtor'(void)
          protected: class sophis::tools::dataModel::Data * sophis::xml::dataModel::XMLGrammar::AddComplexType(char const *, bool &)
          protected: class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::XMLGrammar::AddDerivation(class sophis::tools::dataModel::DataSet &, char const *, char const *, bool)
          protected: class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::XMLGrammar::AddDerivation(char const *, char const *, char const *, bool)
          protected: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophis::xml::dataModel::XMLGrammar::AddForInTheName(char const *)
          protected: void sophis::xml::dataModel::XMLGrammar::AddRestriction(char const *, char const *, char const *)
          protected: void sophis::xml::dataModel::XMLGrammar::AddRestriction(char const *, char const *)
          protected: class sophis::tools::dataModel::Data * sophis::xml::dataModel::XMLGrammar::AddSimpleType(char const *)
          protected: bool sophis::xml::dataModel::XMLGrammar::AddSubstitutionGroup(class sophis::tools::dataModel::Documentation const *, char const *)
          protected: class sophis::tools::dataModel::DataSequence * sophis::xml::dataModel::XMLGrammar::AddType(class sophis::tools::dataModel::Data *, char const *, class sophis::tools::dataModel::Documentation const *)
          protected: class sophis::tools::dataModel::DataSequence & sophis::xml::dataModel::XMLGrammar::CreateDecorator(class sophis::tools::dataModel::DataSequence &, char const *, class sophis::xml::dataModel::DataSequenceDataDecorator *, class sophis::tools::dataModel::Attribute *, class sophis::tools::dataModel::Documentation const *, class sophis::xml::dataModel::DataSetOnlyDecorator *)
          protected: class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::XMLGrammar::CreateDecorator(bool, class sophis::tools::dataModel::DataSet *, char const *, class sophis::xml::dataModel::DataSetDataDecorator *, class sophis::tools::dataModel::DataSet **, class sophis::tools::dataModel::Documentation const *, bool, class sophis::xml::dataModel::DataSetOnlyDecorator *)
          public: class sophis::tools::dataModel::DataSet const & sophis::xml::dataModel::XMLGrammar::GetGrammar(void) const
          protected: bool sophis::xml::dataModel::XMLGrammar::HasComplexType(char const *)
          public: void sophis::xml::dataModel::XMLGrammar::MergeGrammar(char const *, char const *)
          protected: void sophis::xml::dataModel::XMLGrammar::UpdateNameRoot(void)
          public: void sophis::xml::dataModel::XMLGrammar::exportGrammar(class sophis::xml::dataModel::XMLDataExporter &)
          public: void sophis::xml::dataModel::XMLGrammar::exportGrammar(class sophis::xml::dataModel::XMLDataExporter &, char const *)
          protected: char const * sophis::xml::dataModel::XMLGrammar::importExternalNamespace(char const *)
          protected: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophis::xml::dataModel::XMLGrammar::prefixForNamespace(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, bool *)
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::dataModel::XMLGrammar::~XMLGrammar(void)
          public: virtual class sophis::tools::dataModel::Data & sophis::xml::dataModel::XMLGrammar::getData(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *)
          public: virtual class sophis::tools::dataModel::Data const & sophis::xml::dataModel::XMLGrammar::getData(char const *, enum sophis::tools::dataModel::ValueKind) const
          public: virtual class sophis::tools::dataModel::Data & sophis::xml::dataModel::XMLGrammar::getDataFront(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *)
          public: virtual class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::XMLGrammar::getDataSet(char const *, class sophis::tools::dataModel::Documentation const *)
          public: virtual class sophis::tools::dataModel::Data const & sophis::xml::dataModel::XMLGrammar::lookup(char const *, bool) const
          public: virtual void sophis::xml::dataModel::XMLGrammar::ns(char const *)
#endif

          // VFTable. Offset=0, Size=23, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual sophis::xml::dataModel::XMLGrammar::~XMLGrammar(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          public: virtual void unknown_vf_0_2(void); // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void sophis::xml::dataModel::XMLGrammar::ns(char const *); // 4
          public: virtual void unknown_vf_0_5(void); // 5
          public: virtual void unknown_vf_0_6(void); // 6
          public: virtual void unknown_vf_0_7(void); // 7
          public: virtual void unknown_vf_0_8(void); // 8
          public: virtual void unknown_vf_0_9(void); // 9
          public: virtual void unknown_vf_0_10(void); // 10
          public: virtual void unknown_vf_0_11(void); // 11
          public: virtual void unknown_vf_0_12(void); // 12
          public: virtual class sophis::tools::dataModel::Data const & sophis::xml::dataModel::XMLGrammar::lookup(char const *, bool) const; // 13
          public: virtual void unknown_vf_0_14(void); // 14
          public: virtual class sophis::tools::dataModel::Data const & sophis::xml::dataModel::XMLGrammar::getData(char const *, enum sophis::tools::dataModel::ValueKind) const; // 15
          public: virtual class sophis::tools::dataModel::Data & sophis::xml::dataModel::XMLGrammar::getData(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *); // 16
          public: virtual class sophis::tools::dataModel::Data & sophis::xml::dataModel::XMLGrammar::getDataFront(char const *, enum sophis::tools::dataModel::ValueKind, class sophis::tools::dataModel::Documentation const *); // 17
          public: virtual void unknown_vf_0_18(void); // 18
          public: virtual void unknown_vf_0_19(void); // 19
          public: virtual void unknown_vf_0_20(void); // 20
          public: virtual void unknown_vf_0_21(void); // 21
          public: virtual class sophis::tools::dataModel::DataSet & sophis::xml::dataModel::XMLGrammar::getDataSet(char const *, class sophis::tools::dataModel::Documentation const *); // 22
          // VFTable with 0 offset end

          // VFTable. Offset=168, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual sophis::xml::dataModel::XMLGrammar::~XMLGrammar(void); // 0
          public: virtual void unknown_vf_168_1(void); // 1
          public: virtual void unknown_vf_168_2(void); // 2
          public: virtual void unknown_vf_168_3(void); // 3
#endif
          // VFTable with 168 offset end

        public:
        };

        class/*or struct*/ XSLTransformer
        {
          // Functions:
          protected: sophis::xml::dataModel::XSLTransformer::XSLTransformer(char const *, class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>, bool, bool, char const *)
          public: void sophis::xml::dataModel::XSLTransformer::`vbase dtor'(void)
          public: void sophis::xml::dataModel::XSLTransformer::transform(class sophis::tools::dataModel::DataSet &, class sophisTools::base::RefCountHandle<class sophisTools::io::FilterInputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::FilterOutputStream>)
          public: void sophis::xml::dataModel::XSLTransformer::transform(class sophisTools::base::RefCountHandle<class sophis::xml::util::DOMDocumentWrapper>, class sophis::tools::dataModel::DataSet &, class sophisTools::base::RefCountHandle<class sophisTools::io::FilterInputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::FilterOutputStream>)
          public: void sophis::xml::dataModel::XSLTransformer::transform(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
          // Static functions:
          public: static class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::Transformer> sophis::xml::dataModel::XSLTransformer::create(char const *, char const *, unsigned __int64, bool, bool, char const *)
          public: static class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::Transformer> sophis::xml::dataModel::XSLTransformer::create(char const *, char const *, unsigned __int64, bool, bool)
          public: static class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::Transformer> sophis::xml::dataModel::XSLTransformer::create(char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, bool, bool, char const *)
          public: static class sophisTools::base::RefCountHandle<class sophis::tools::dataModel::Transformer> sophis::xml::dataModel::XSLTransformer::create(char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, bool, bool)
          // Variables:
          private: static char const *sophis::xml::dataModel::XSLTransformer::__CLASS__
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::dataModel::XSLTransformer::~XSLTransformer(void)
          public: virtual void sophis::xml::dataModel::XSLTransformer::dispose(void)
          public: virtual void sophis::xml::dataModel::XSLTransformer::init(void)
          public: virtual char const * sophis::xml::dataModel::XSLTransformer::name(void)
          public: virtual void sophis::xml::dataModel::XSLTransformer::postprocess(class sophis::tools::dataModel::DataSet &)
          public: virtual void sophis::xml::dataModel::XSLTransformer::preprocess(class sophis::tools::dataModel::DataSet &)
          public: virtual void sophis::xml::dataModel::XSLTransformer::transform(class sophis::tools::dataModel::DataSet &)
#endif

          // VFTable. Offset=0, Size=8, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual char const * sophis::xml::dataModel::XSLTransformer::name(void); // 0
          public: virtual void sophis::xml::dataModel::XSLTransformer::init(void); // 1
          public: virtual void sophis::xml::dataModel::XSLTransformer::preprocess(class sophis::tools::dataModel::DataSet &); // 2
          public: virtual void sophis::xml::dataModel::XSLTransformer::transform(class sophis::tools::dataModel::DataSet &); // 3
          public: virtual void sophis::xml::dataModel::XSLTransformer::postprocess(class sophis::tools::dataModel::DataSet &); // 4
          public: virtual void sophis::xml::dataModel::XSLTransformer::dispose(void); // 5
          public: virtual void unknown_vf_0_6(void); // 6
          public: virtual void unknown_vf_0_7(void); // 7
          // VFTable with 0 offset end

          // VFTable. Offset=144, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual sophis::xml::dataModel::XSLTransformer::~XSLTransformer(void); // 0
          public: virtual void unknown_vf_144_1(void); // 1
          public: virtual void unknown_vf_144_2(void); // 2
          public: virtual void unknown_vf_144_3(void); // 3
#endif
          // VFTable with 144 offset end

        public:
        };


      };

      namespace/*or class/struct?*/ io
      {
        // Nested containers:
        class/*or struct*/ BinInputStreamAdapter : public BinInputStream
        {
          // Functions:
          public: sophis::xml::io::BinInputStreamAdapter::BinInputStreamAdapter(class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>)
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::io::BinInputStreamAdapter::~BinInputStreamAdapter(void)
          public: virtual unsigned __int64 sophis::xml::io::BinInputStreamAdapter::curPos(void) const
          public: virtual char16_t const * sophis::xml::io::BinInputStreamAdapter::getContentType(void) const
          public: virtual unsigned __int64 sophis::xml::io::BinInputStreamAdapter::readBytes(unsigned char *const, unsigned __int64)
#endif

          // VFTable. Offset=0, Size=5, Start=5
          // Corresponding base: xercesc_3_2::BinInputStream
          // Owner: SophisXML.dll
          // public: virtual sophis::xml::io::BinInputStreamAdapter::~BinInputStreamAdapter(void); // 0
          // Overrides:
          public: virtual unsigned __int64 sophis::xml::io::BinInputStreamAdapter::curPos(void) const override; // 1
          public: virtual unsigned __int64 sophis::xml::io::BinInputStreamAdapter::readBytes(unsigned char *const, unsigned __int64) override; // 2
          public: virtual char16_t const * sophis::xml::io::BinInputStreamAdapter::getContentType(void) const override; // 3
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ BinOutputStreamAdapter : public BinOutputStream
        {
          // Functions:
          public: sophis::xml::io::BinOutputStreamAdapter::BinOutputStreamAdapter(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::io::BinOutputStreamAdapter::~BinOutputStreamAdapter(void)
          public: virtual unsigned __int64 sophis::xml::io::BinOutputStreamAdapter::curPos(void) const
          public: virtual void sophis::xml::io::BinOutputStreamAdapter::writeBytes(unsigned char const *const, unsigned __int64)
#endif

          // VFTable. Offset=0, Size=3, Start=0
          // Corresponding base: xercesc_3_2::BinOutputStream
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual sophis::xml::io::BinOutputStreamAdapter::~BinOutputStreamAdapter(void); // 0
          public: virtual unsigned __int64 sophis::xml::io::BinOutputStreamAdapter::curPos(void) const; // 1
          public: virtual void sophis::xml::io::BinOutputStreamAdapter::writeBytes(unsigned char const *const, unsigned __int64); // 2
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ XMLFormatTargetAdapter : public XMLFormatTarget
        {
          // VFTable. Offset=0, Size=3, Start=0
          // Corresponding base: xercesc_3_2::XMLFormatTarget
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          public: virtual void unknown_vf_0_2(void); // 2
          // VFTable with 0 offset end

        public:
        };

        class/*or struct*/ XMLInputStreamAdapter : public InputSource
        {
          // Functions:
          public: sophis::xml::io::XMLInputStreamAdapter::XMLInputStreamAdapter(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class xercesc_3_2::MemoryManager *const)
          public: sophis::xml::io::XMLInputStreamAdapter::XMLInputStreamAdapter(class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>, class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::io::XMLInputStreamAdapter::~XMLInputStreamAdapter(void)
          public: virtual char16_t const * sophis::xml::io::XMLInputStreamAdapter::getSystemId(void) const
          public: virtual class xercesc_3_2::BinInputStream * sophis::xml::io::XMLInputStreamAdapter::makeStream(void) const
#endif

          // VFTable. Offset=0, Size=10, Start=10
          // Corresponding base: xercesc_3_2::InputSource
          // Owner: SophisXML.dll
          // public: virtual sophis::xml::io::XMLInputStreamAdapter::~XMLInputStreamAdapter(void); // 0
          // Overrides:
          public: virtual class xercesc_3_2::BinInputStream * sophis::xml::io::XMLInputStreamAdapter::makeStream(void) const override; // 1
          public: virtual char16_t const * sophis::xml::io::XMLInputStreamAdapter::getSystemId(void) const override; // 4
          // VFTable with 0 offset end

        public:
        };


      };

      class/*or struct*/ util
      {
      public:
        // Enumerations:
        enum EscapeMode : int {
        };

        // Nested containers:
        class/*or struct*/ BuilderImpl : public DOMLSParserImpl
        {
          // VFTable. Offset=0, Size=20, Start=13
          // Corresponding base: xercesc_3_2::DOMLSParserImpl
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_13(void); // 13
          public: virtual void unknown_vf_0_14(void); // 14
          public: virtual void unknown_vf_0_15(void); // 15
          public: virtual void unknown_vf_0_16(void); // 16
          public: virtual void unknown_vf_0_17(void); // 17
          public: virtual void unknown_vf_0_18(void); // 18
          public: virtual void unknown_vf_0_19(void); // 19
          // VFTable with 0 offset end

          // VFTable. Offset=8, Size=3, Start=3
          // Corresponding base: xercesc_3_2::XMLErrorReporter
          // Owner: SophisXML.dll
          // VFTable with 8 offset end

          // VFTable. Offset=16, Size=6, Start=6
          // Corresponding base: xercesc_3_2::XMLEntityHandler
          // Owner: SophisXML.dll
          // VFTable with 16 offset end

          // VFTable. Offset=24, Size=17, Start=17
          // Corresponding base: xercesc_3_2::DocTypeHandler
          // Owner: SophisXML.dll
          // VFTable with 24 offset end

          // VFTable. Offset=32, Size=4, Start=4
          // Corresponding base: xercesc_3_2::PSVIHandler
          // Owner: SophisXML.dll
          // VFTable with 32 offset end

          // VFTable. Offset=192, Size=21, Start=21
          // Corresponding base: xercesc_3_2::DOMLSParser
          // Owner: SophisXML.dll
          // VFTable with 192 offset end

          // VFTable. Offset=200, Size=7, Start=7
          // Corresponding base: xercesc_3_2::DOMConfiguration
          // Owner: SophisXML.dll
          // VFTable with 200 offset end

        public:
        };

        class DOMDocumentWrapper
        {
          // Functions:
          public: sophis::xml::util::DOMDocumentWrapper::DOMDocumentWrapper(class sophis::xml::util::DOMDocumentWrapper &)
          public: sophis::xml::util::DOMDocumentWrapper::DOMDocumentWrapper(class XERCES_CPP_NAMESPACE::DOMDocument *)
          public: sophis::xml::util::DOMDocumentWrapper::DOMDocumentWrapper(class xercesc_3_2::DOMDocument *)
          public: sophis::xml::util::DOMDocumentWrapper::DOMDocumentWrapper(void)
          public: void sophis::xml::util::DOMDocumentWrapper::`vbase dtor'(void)
          public: class XERCES_CPP_NAMESPACE::DOMDocument * sophis::xml::util::DOMDocumentWrapper::document(void)
          public: class xercesc_3_2::DOMDocument * sophis::xml::util::DOMDocumentWrapper::document(void)
          public: void sophis::xml::util::DOMDocumentWrapper::document(class XERCES_CPP_NAMESPACE::DOMDocument *)
          public: void sophis::xml::util::DOMDocumentWrapper::document(class xercesc_3_2::DOMDocument *)
          public: class XERCES_CPP_NAMESPACE::DOMDocument const * sophis::xml::util::DOMDocumentWrapper::document(void) const
          public: class xercesc_3_2::DOMDocument const * sophis::xml::util::DOMDocumentWrapper::document(void) const
          public: class XERCES_CPP_NAMESPACE::DOMDocument * sophis::xml::util::DOMDocumentWrapper::orphan(void)
          public: class xercesc_3_2::DOMDocument * sophis::xml::util::DOMDocumentWrapper::orphan(void)
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::util::DOMDocumentWrapper::~DOMDocumentWrapper(void)
#endif

          // VFTable. Offset=32, Size=4, Start=0
          // Owner: SophisXML.dll
          // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
          public: virtual sophis::xml::util::DOMDocumentWrapper::~DOMDocumentWrapper(void); // 0
          public: virtual void unknown_vf_32_1(void); // 1
          public: virtual void unknown_vf_32_2(void); // 2
          public: virtual void unknown_vf_32_3(void); // 3
#endif
          // VFTable with 32 offset end

        public:
        };

        class/*or struct*/ ImplementationImpl : public XMemory, public DOMImplementation, public DOMImplementationSource
        {
          // VFTable. Offset=0, Size=11, Start=0
          // Corresponding base: xercesc_3_2::DOMImplementation
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          public: virtual void unknown_vf_0_1(void); // 1
          public: virtual void unknown_vf_0_2(void); // 2
          public: virtual void unknown_vf_0_3(void); // 3
          public: virtual void unknown_vf_0_4(void); // 4
          public: virtual void unknown_vf_0_5(void); // 5
          public: virtual void unknown_vf_0_6(void); // 6
          public: virtual void unknown_vf_0_7(void); // 7
          public: virtual void unknown_vf_0_8(void); // 8
          public: virtual void unknown_vf_0_9(void); // 9
          public: virtual void unknown_vf_0_10(void); // 10
          // VFTable with 0 offset end

          // VFTable. Offset=8, Size=3, Start=3
          // Corresponding base: xercesc_3_2::DOMImplementationSource
          // Owner: SophisXML.dll
          // VFTable with 8 offset end

        public:
        };

        class/*or struct*/ ParsingErrorHandler : public DOMErrorHandler
        {
          // Functions:
          public: sophis::xml::util::ParsingErrorHandler::ParsingErrorHandler(void)
          public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophis::xml::util::ParsingErrorHandler::getDomError(void) const
          public: bool sophis::xml::util::ParsingErrorHandler::hasDomError(void) const
          // Variables:
          private: static char const *sophis::xml::util::ParsingErrorHandler::__CLASS__
#if 0 // All found virtual functions names:
          public: virtual sophis::xml::util::ParsingErrorHandler::~ParsingErrorHandler(void)
          public: virtual bool sophis::xml::util::ParsingErrorHandler::handleError(class xercesc_3_2::DOMError const &)
#endif

          // VFTable. Offset=0, Size=2, Start=0
          // Corresponding base: xercesc_3_2::DOMErrorHandler
          // Owner: SophisXML.dll
          // Added virtual functions:
          public: virtual sophis::xml::util::ParsingErrorHandler::~ParsingErrorHandler(void); // 0
          public: virtual bool sophis::xml::util::ParsingErrorHandler::handleError(class xercesc_3_2::DOMError const &); // 1
          // VFTable with 0 offset end

        public:
        };

        class XMLUtil
        {
          // Functions:
          public: class sophis::xml::util::XMLUtil & sophis::xml::util::XMLUtil::operator=(class sophis::xml::util::XMLUtil &&)
          public: class sophis::xml::util::XMLUtil & sophis::xml::util::XMLUtil::operator=(class sophis::xml::util::XMLUtil const &)
          // Static functions:
          public: static void sophis::xml::util::XMLUtil::checkInit(void)
          public: static class sophisTools::base::RefCountHandle<class sophis::tools::util::ByteArray> sophis::xml::util::XMLUtil::decode64(char const *)
          public: static class sophisTools::base::RefCountHandle<class sophis::tools::util::ByteArray> sophis::xml::util::XMLUtil::decode64(char16_t const *)
          public: static void sophis::xml::util::XMLUtil::decode64(char const *, class sophis::tools::util::ByteArray &)
          public: static void sophis::xml::util::XMLUtil::decode64(char16_t const *, class sophis::tools::util::ByteArray &)
          public: static void sophis::xml::util::XMLUtil::dispose(void)
          public: static char16_t * sophis::xml::util::XMLUtil::encode64(class sophis::tools::util::ByteArray const &)
          public: static void sophis::xml::util::XMLUtil::encode64(class sophis::tools::util::ByteArray const &, char *&, unsigned __int64 &)
          public: static void sophis::xml::util::XMLUtil::init(void)
          public: static bool sophis::xml::util::XMLUtil::isInitialized(void)
          protected: static bool sophis::xml::util::XMLUtil::isValidNCName(char16_t, bool)
          public: static bool sophis::xml::util::XMLUtil::isValidNCName(char const *const)
          public: static bool sophis::xml::util::XMLUtil::isValidNCName(char16_t const *const, unsigned __int64)
          protected: static bool sophis::xml::util::XMLUtil::isValidName(char16_t, bool)
          public: static bool sophis::xml::util::XMLUtil::isValidName(char const *const)
          public: static bool sophis::xml::util::XMLUtil::isValidName(char16_t const *const, unsigned __int64)
          public: static bool sophis::xml::util::XMLUtil::isValidQName(char const *const)
          public: static bool sophis::xml::util::XMLUtil::isValidQName(char16_t const *const, unsigned __int64)
          public: static void sophis::xml::util::XMLUtil::joinGrammarLoading(void)
          public: static void sophis::xml::util::XMLUtil::loadGrammars(class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::GrammarPool>)
          public: static void sophis::xml::util::XMLUtil::loadGrammars(class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::GrammarPool>, class std::list<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>> const &)
          public: static void sophis::xml::util::XMLUtil::loadGrammars(void)
          public: static void sophis::xml::util::XMLUtil::toValidNCName(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, char)
          protected: static void sophis::xml::util::XMLUtil::toValidName(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, char, bool (__cdecl *)(char16_t, bool))
          public: static void sophis::xml::util::XMLUtil::toValidName(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, char)
          // Variables:
          public: static char const *const sophis::xml::util::XMLUtil::ATTVAL_ANYTYPE
          public: static char16_t const *const sophis::xml::util::XMLUtil::HTTP
          public: static char16_t const *const sophis::xml::util::XMLUtil::QMQM
          public: static char const *const sophis::xml::util::XMLUtil::URI_SCHEMAFORSCHEMA
          private: static char const *sophis::xml::util::XMLUtil::__CLASS__
          private: static unsigned __int64 sophis::xml::util::XMLUtil::fInitialized
          public: static bool sophis::xml::util::XMLUtil::forceExportXsiType
          public: static bool sophis::xml::util::XMLUtil::ignoreAnonymousTypesDuringExport
          public: static bool sophis::xml::util::XMLUtil::trimXMLValues
        public:
        };

        class XSLTransformUtil
        {
          // Functions:
          public: class sophis::xml::util::XSLTransformUtil & sophis::xml::util::XSLTransformUtil::operator=(class sophis::xml::util::XSLTransformUtil &&)
          public: class sophis::xml::util::XSLTransformUtil & sophis::xml::util::XSLTransformUtil::operator=(class sophis::xml::util::XSLTransformUtil const &)
          // Static functions:
          public: static void sophis::xml::util::XSLTransformUtil::dispose(void)
          public: static void sophis::xml::util::XSLTransformUtil::doDispose(void)
          public: static void sophis::xml::util::XSLTransformUtil::doInit(void)
          public: static void sophis::xml::util::XSLTransformUtil::init(void)
          public: static bool sophis::xml::util::XSLTransformUtil::isInitialized(void)
          public: static void sophis::xml::util::XSLTransformUtil::transform(class sophis::xml::dataModel::XMLDataExporter &, class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
          public: static void sophis::xml::util::XSLTransformUtil::transform(class sophis::xml::dataModel::XMLDataImporter &, class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
          public: static void sophis::xml::util::XSLTransformUtil::transform(char const *, class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
          public: static void sophis::xml::util::XSLTransformUtil::transform(class sophisTools::base::RefCountHandle<class sophis::xml::util::DOMDocumentWrapper>, class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
          public: static void sophis::xml::util::XSLTransformUtil::transform(class sophisTools::base::RefCountHandle<class sophisTools::io::File>, class sophisTools::base::RefCountHandle<class sophisTools::io::File>, class sophisTools::base::RefCountHandle<class sophisTools::io::File>)
          public: static void sophis::xml::util::XSLTransformUtil::transform(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
          // Variables:
          private: static char const *sophis::xml::util::XSLTransformUtil::__CLASS__
          private: static bool sophis::xml::util::XSLTransformUtil::fInitialized
        public:
        };

        class XString
        {
        public:
        };

        class XStringX
        {
        public:
        };

        class XWString
        {
        public:
        };


        // Functions:
        class std::basic_ostream<char, struct std::char_traits<char>> & sophis::xml::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::xml::util::XString const &)
        class std::basic_ostream<char, struct std::char_traits<char>> & sophis::xml::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::xml::util::XStringX const &)
        class std::basic_ostream<char, struct std::char_traits<char>> & sophis::xml::util::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class sophis::xml::util::XWString const &)
        class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophis::xml::util::EscapeXmlString(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, enum sophis::xml::util::EscapeMode)
      public:
      };


    };


  };

  class/*or struct*/ sophisTools
  {
  public:
    // Nested containers:
    class CSRDay
    {
      // Functions:
      public: CSRDay(int, int, int)
      public: CSRDay(long)
      public: bool operator!=(class sophisTools::CSRDay const &) const
      public: long operator long(void) const
      // Static functions:
      public: static long GetSystemDate(void)
      public: static long GetSystemTime(void)
    public:
    };

    class FlyWeightString
    {
      // Functions:
      public: FlyWeightString(class sophisTools::FlyWeightString const &)
      public: FlyWeightString(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
      public: FlyWeightString(void)
      public: ~FlyWeightString(void)
      public: class sophisTools::FlyWeightString & operator=(class sophisTools::FlyWeightString const &)
      public: class sophisTools::FlyWeightString & operator=(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
      public: bool operator==(class sophisTools::FlyWeightString const &) const
      public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const & operator class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &(void) const
      public: bool operator<(class sophisTools::FlyWeightString const &) const
      public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const & get(void) const
    public:
    };

    namespace/*or class/struct?*/ base
    {
      // Nested containers:
      class ClassCastException
      {
        // Functions:
        public: sophisTools::base::ClassCastException::ClassCastException(class sophisTools::base::ClassCastException const &)
        public: sophisTools::base::ClassCastException::ClassCastException(char const *, char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::ClassCastException::~ClassCastException(void)
#endif

      public:
      };

      class ExceptionBase
      {
        // Functions:
        protected: sophisTools::base::ExceptionBase::ExceptionBase(char const *, char const *, long)
        protected: sophisTools::base::ExceptionBase::ExceptionBase(char const *, char const *, long, bool, bool)
        public: sophisTools::base::ExceptionBase::ExceptionBase(class sophisTools::base::ExceptionBase const &)
        public: class sophisTools::base::ExceptionBase & sophisTools::base::ExceptionBase::operator=(class sophisTools::base::ExceptionBase const &)
        public: char const * sophisTools::base::ExceptionBase::operator char const *(void) const
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::base::ExceptionBase::getError(void) const
        public: char const * sophisTools::base::ExceptionBase::getName(void) const
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::ExceptionBase::~ExceptionBase(void)
#endif

      public:
      };

      class GeneralException : public ExceptionBase
      {
        // Functions:
        public: sophisTools::base::GeneralException::GeneralException(class sophisTools::base::GeneralException const &)
        public: sophisTools::base::GeneralException::GeneralException(char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::GeneralException::~GeneralException(void)
#endif

      public:
      };

      class InvalidArgument
      {
        // Functions:
        public: sophisTools::base::InvalidArgument::InvalidArgument(class sophisTools::base::InvalidArgument const &)
        public: sophisTools::base::InvalidArgument::InvalidArgument(char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::InvalidArgument::~InvalidArgument(void)
#endif

      public:
      };

      class InvalidInvocationOrder
      {
        // Functions:
        public: sophisTools::base::InvalidInvocationOrder::InvalidInvocationOrder(class sophisTools::base::InvalidInvocationOrder const &)
        public: sophisTools::base::InvalidInvocationOrder::InvalidInvocationOrder(char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::InvalidInvocationOrder::~InvalidInvocationOrder(void)
#endif

      public:
      };

      class InvalidInvocationState
      {
        // Functions:
        public: sophisTools::base::InvalidInvocationState::InvalidInvocationState(class sophisTools::base::InvalidInvocationState const &)
        public: sophisTools::base::InvalidInvocationState::InvalidInvocationState(char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::InvalidInvocationState::~InvalidInvocationState(void)
#endif

      public:
      };

      class InvalidParameter
      {
        // Functions:
        public: sophisTools::base::InvalidParameter::InvalidParameter(class sophisTools::base::InvalidParameter const &)
        public: sophisTools::base::InvalidParameter::InvalidParameter(char const *, char const *, char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::InvalidParameter::~InvalidParameter(void)
#endif

      public:
      };

      class/*or struct*/ LocaleUtil
      {
        // Static functions:
        public: static void sophisTools::base::LocaleUtil::dispose(void)
        public: static void sophisTools::base::LocaleUtil::init(void)
      public:
      };

      class NamedInvalidArgument
      {
        // Functions:
        public: sophisTools::base::NamedInvalidArgument::NamedInvalidArgument(class sophisTools::base::NamedInvalidArgument const &)
        public: sophisTools::base::NamedInvalidArgument::NamedInvalidArgument(char const *, char const *, char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::NamedInvalidArgument::~NamedInvalidArgument(void)
#endif

      public:
      };

      class NoLicenseException
      {
        // Functions:
        public: sophisTools::base::NoLicenseException::NoLicenseException(class sophisTools::base::NoLicenseException const &)
        public: sophisTools::base::NoLicenseException::NoLicenseException(char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::NoLicenseException::~NoLicenseException(void)
#endif

      public:
      };

      class NotImplemented
      {
        // Functions:
        public: sophisTools::base::NotImplemented::NotImplemented(class sophisTools::base::NotImplemented const &)
        public: sophisTools::base::NotImplemented::NotImplemented(char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::NotImplemented::~NotImplemented(void)
#endif

      public:
      };

      class NullPointerException
      {
        // Functions:
        public: sophisTools::base::NullPointerException::NullPointerException(class sophisTools::base::NullPointerException const &)
        public: sophisTools::base::NullPointerException::NullPointerException(char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::NullPointerException::~NullPointerException(void)
#endif

      public:
      };

      class RefCount
      {
        // Functions:
        public: sophisTools::base::RefCount::RefCount(class sophisTools::base::RefCount const &)
        public: sophisTools::base::RefCount::RefCount(void)
        public: class sophisTools::base::RefCount & sophisTools::base::RefCount::operator=(class sophisTools::base::RefCount const &)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::RefCount::~RefCount(void)
#endif

      public:
      };

      template<typename T1      >
      class RefCountHandle
      {
      public:
      };
#if 0 // Instances:
// <class sophis::market_data::dataModel::YieldCurveHistoric>
#if 0
      template<>
      class RefCountHandle<class sophis::market_data::dataModel::YieldCurveHistoric>
      {
      public:
      };
#endif
// <class sophis::misc::LocalSession>
#if 0
      template<>
      class RefCountHandle<class sophis::misc::LocalSession>
      {
      public:
      };
#endif
// <class sophis::misc::dataModel::FpmlEntityChecker>
#if 0
      template<>
      class RefCountHandle<class sophis::misc::dataModel::FpmlEntityChecker>
      {
      public:
      };
#endif
// <class sophis::misc::dataModel::FpmlEntityHandler>
#if 0
      template<>
      class RefCountHandle<class sophis::misc::dataModel::FpmlEntityHandler>
      {
      public:
      };
#endif
// <class sophis::misc::fpml::entity::InstrumentEntityHandler>
#if 0
      template<>
      class RefCountHandle<class sophis::misc::fpml::entity::InstrumentEntityHandler>
      {
      public:
      };
#endif
// <class sophis::tools::dataModel::DataTypeRepository>
#if 0
      template<>
      class RefCountHandle<class sophis::tools::dataModel::DataTypeRepository>
      {
      public:
      };
#endif
// <class sophis::tools::dataModel::ParentStack>
#if 0
      template<>
      class RefCountHandle<class sophis::tools::dataModel::ParentStack>
      {
      public:
      };
#endif
// <class sophis::tools::dataModel::Transformer>
#if 0
      template<>
      class RefCountHandle<class sophis::tools::dataModel::Transformer>
      {
      public:
      };
#endif
// <class sophis::tools::util::ByteArray>
#if 0
      template<>
      class RefCountHandle<class sophis::tools::util::ByteArray>
      {
      public:
      };
#endif
// <class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>
#if 0
      template<>
      class RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>
      {
      public:
      };
#endif
// <class sophis::tools::util::NotificationProvider<struct sophis::tools::util::Worker::JobTerminatedEvent>>
#if 0
      template<>
      class RefCountHandle<class sophis::tools::util::NotificationProvider<struct sophis::tools::util::Worker::JobTerminatedEvent>>
      {
      public:
      };
#endif
// <class sophis::tools::util::StringBoolMap>
#if 0
      template<>
      class RefCountHandle<class sophis::tools::util::StringBoolMap>
      {
      public:
      };
#endif
// <class sophis::tools::util::StringPairList>
#if 0
      template<>
      class RefCountHandle<class sophis::tools::util::StringPairList>
      {
      public:
      };
#endif
// <class sophis::tools::util::Worker>
#if 0
      template<>
      class RefCountHandle<class sophis::tools::util::Worker>
      {
      public:
      };
#endif
// <class sophis::tools::util::WorkerAllocator>
#if 0
      template<>
      class RefCountHandle<class sophis::tools::util::WorkerAllocator>
      {
      public:
      };
#endif
// <class sophis::tools::util::WorkerList>
#if 0
      template<>
      class RefCountHandle<class sophis::tools::util::WorkerList>
      {
      public:
      };
#endif
// <class sophis::tools::util::WorkerVisitor>
#if 0
      template<>
      class RefCountHandle<class sophis::tools::util::WorkerVisitor>
      {
      public:
      };
#endif
// <class sophis::xml::dataModel::BasicGrammarPoolImpl>
#if 0
      template<>
      class RefCountHandle<class sophis::xml::dataModel::BasicGrammarPoolImpl>
      {
      public:
      };
#endif
// <class sophis::xml::dataModel::DataFactory>
#if 0
      template<>
      class RefCountHandle<class sophis::xml::dataModel::DataFactory>
      {
      public:
      };
#endif
// <class sophis::xml::dataModel::GrammarLoadingGuard>
#if 0
      template<>
      class RefCountHandle<class sophis::xml::dataModel::GrammarLoadingGuard>
      {
      public:
      };
#endif
// <class sophis::xml::dataModel::GrammarPool>
#if 0
      template<>
      class RefCountHandle<class sophis::xml::dataModel::GrammarPool>
      {
      public:
      };
#endif
// <class sophis::xml::util::DOMDocumentWrapper>
#if 0
      template<>
      class RefCountHandle<class sophis::xml::util::DOMDocumentWrapper>
      {
      public:
      };
#endif
// <class sophisTools::base::Runnable>
#if 0
      template<>
      class RefCountHandle<class sophisTools::base::Runnable>
      {
      public:
      };
#endif
// <class sophisTools::base::StringTokenizer>
#if 0
      template<>
      class RefCountHandle<class sophisTools::base::StringTokenizer>
      {
      public:
      };
#endif
// <class sophisTools::comm::CoherencyChannel>
#if 0
      template<>
      class RefCountHandle<class sophisTools::comm::CoherencyChannel>
      {
      public:
      };
#endif
// <class sophisTools::comm::QuoteInfo>
#if 0
      template<>
      class RefCountHandle<class sophisTools::comm::QuoteInfo>
      {
      public:
      };
#endif
// <class sophisTools::comm::SerializablePacket>
#if 0
      template<>
      class/*or struct*/ RefCountHandle<class sophisTools::comm::SerializablePacket>
      {
        // Functions:
        public: sophisTools::base::RefCountHandle<class sophisTools::comm::SerializablePacket>::~RefCountHandle<class sophisTools::comm::SerializablePacket>(void)
      public:
      };
#endif
// <class sophisTools::comm::SerializableRiskEvent>
#if 0
      template<>
      class RefCountHandle<class sophisTools::comm::SerializableRiskEvent>
      {
        // Functions:
        public: sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>(class sophisTools::comm::SerializableRiskEvent *)
        public: sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>(void)
        public: sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>::~RefCountHandle<class sophisTools::comm::SerializableRiskEvent>(void)
        public: class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent> & sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>::operator=(class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent> const &)
        public: bool sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>::operator!(void) const
        public: bool sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>::operator bool(void) const
        public: class sophisTools::comm::SerializableRiskEvent * sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>::operator->(void)
        // Static functions:
        public: static class sophisTools::comm::SerializableRiskEvent * sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>::_duplicate(class sophisTools::comm::SerializableRiskEvent *)
      public:
      };
#endif
// <class sophisTools::comm::SerializableRiskEventQueue>
#if 0
      template<>
      class RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue>
      {
      public:
      };
#endif
// <class sophisTools::io::BufferedInputStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::BufferedInputStream>
      {
      public:
      };
#endif
// <class sophisTools::io::ByteArrayIOStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::ByteArrayIOStream>
      {
        // Functions:
        public: sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayIOStream>::~RefCountHandle<class sophisTools::io::ByteArrayIOStream>(void)
        public: class sophisTools::io::ByteArrayIOStream * sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayIOStream>::operator->(void)
        public: class sophisTools::io::ByteArrayIOStream * sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayIOStream>::in(void) const
      public:
      };
#endif
// <class sophisTools::io::ByteArrayInputStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::ByteArrayInputStream>
      {
      public:
      };
#endif
// <class sophisTools::io::ByteArrayOutputStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::ByteArrayOutputStream>
      {
      public:
      };
#endif
// <class sophisTools::io::ByteArrayRandomAccessIOStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::ByteArrayRandomAccessIOStream>
      {
      public:
      };
#endif
// <class sophisTools::io::File>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::File>
      {
      public:
      };
#endif
// <class sophisTools::io::FilterInputStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::FilterInputStream>
      {
      public:
      };
#endif
// <class sophisTools::io::FilterOutputStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::FilterOutputStream>
      {
      public:
      };
#endif
// <class sophisTools::io::InputStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::InputStream>
      {
      public:
      };
#endif
// <class sophisTools::io::Library>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::Library>
      {
      public:
      };
#endif
// <class sophisTools::io::LibraryList>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::LibraryList>
      {
      public:
      };
#endif
// <class sophisTools::io::LineInputStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::LineInputStream>
      {
      public:
      };
#endif
// <class sophisTools::io::LineOutputStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::LineOutputStream>
      {
      public:
      };
#endif
// <class sophisTools::io::ObjectInputStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::ObjectInputStream>
      {
      public:
      };
#endif
// <class sophisTools::io::ObjectOutputStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::ObjectOutputStream>
      {
      public:
      };
#endif
// <class sophisTools::io::OutputStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::OutputStream>
      {
      public:
      };
#endif
// <class sophisTools::io::RandomAccessInputStream>
#if 0
      template<>
      class RefCountHandle<class sophisTools::io::RandomAccessInputStream>
      {
      public:
      };
#endif
// <class sophisTools::logger::FilterEngine>
#if 0
      template<>
      class RefCountHandle<class sophisTools::logger::FilterEngine>
      {
      public:
      };
#endif
// <class sophisTools::logger::Logger>
#if 0
      template<>
      class RefCountHandle<class sophisTools::logger::Logger>
      {
      public:
      };
#endif
// <class sophisTools::logger::ShiftableLogger>
#if 0
      template<>
      class RefCountHandle<class sophisTools::logger::ShiftableLogger>
      {
      public:
      };
#endif
// <class sophisTools::net::Reactor::EventHandler>
#if 0
      template<>
      class RefCountHandle<class sophisTools::net::Reactor::EventHandler>
      {
      public:
      };
#endif
// <class sophisTools::net::Reactor>
#if 0
      template<>
      class RefCountHandle<class sophisTools::net::Reactor>
      {
      public:
      };
#endif
// <class sphSystem::config::ArgMap>
#if 0
      template<>
      class RefCountHandle<class sphSystem::config::ArgMap>
      {
      public:
      };
#endif
// <class sphSystem::config::InitParameters>
#if 0
      template<>
      class RefCountHandle<class sphSystem::config::InitParameters>
      {
      public:
      };
#endif
// <class sphSystem::config::PropertyReader>
#if 0
      template<>
      class RefCountHandle<class sphSystem::config::PropertyReader>
      {
      public:
      };
#endif
// <class sphSystem::logger::SafeLogger>
#if 0
      template<>
      class RefCountHandle<class sphSystem::logger::SafeLogger>
      {
      public:
      };
#endif
// <class sphSystem::plugin::Plugin>
#if 0
      template<>
      class RefCountHandle<class sphSystem::plugin::Plugin>
      {
      public:
      };
#endif
// <class sphSystem::plugin::PluginManager>
#if 0
      template<>
      class RefCountHandle<class sphSystem::plugin::PluginManager>
      {
      public:
      };
#endif
// <class sphSystem::server::ApplicationTool>
#if 0
      template<>
      class RefCountHandle<class sphSystem::server::ApplicationTool>
      {
      public:
      };
#endif
// <class sphSystem::statistics::AbstractCounter>
#if 0
      template<>
      class RefCountHandle<class sphSystem::statistics::AbstractCounter>
      {
      public:
      };
#endif
// <class sphSystem::statistics::EventCounter>
#if 0
      template<>
      class RefCountHandle<class sphSystem::statistics::EventCounter>
      {
      public:
      };
#endif
// <class sphSystem::statistics::LateQuotationCounter>
#if 0
      template<>
      class RefCountHandle<class sphSystem::statistics::LateQuotationCounter>
      {
      public:
      };
#endif
// <class sphSystem::thread::Runnable>
#if 0
      template<>
      class RefCountHandle<class sphSystem::thread::Runnable>
      {
      public:
      };
#endif
// <class sphSystem::thread::ScheduledAction>
#if 0
      template<>
      class RefCountHandle<class sphSystem::thread::ScheduledAction>
      {
      public:
      };
#endif
// <class sphSystem::thread::ThreadPool>
#if 0
      template<>
      class RefCountHandle<class sphSystem::thread::ThreadPool>
      {
      public:
      };
#endif
// <class sphSystem::thread::WorkerManager>
#if 0
      template<>
      class RefCountHandle<class sphSystem::thread::WorkerManager>
      {
      public:
      };
#endif
// <class sphSystem::util::UIDGenerator>
#if 0
      template<>
      class RefCountHandle<class sphSystem::util::UIDGenerator>
      {
      public:
      };
#endif
// <struct sophis::valuation::dataModel::InstrumentSet>
#if 0
      template<>
      class RefCountHandle<struct sophis::valuation::dataModel::InstrumentSet>
      {
      public:
      };
#endif
#endif


#if 0
      template<>
      class RefCountHandle<class sophis::tools::util::Worker>
      {
      public:
      };
#endif

#if 0
      template<>
      class RefCountHandle<class sophisTools::comm::CoherencyChannel>
      {
      public:
      };
#endif

#if 0
      template<>
      class RefCountHandle<class sophisTools::comm::SerializableRiskEvent>
      {
      public:
      };
#endif

#if 0
      template<>
      class RefCountHandle<class sophisTools::io::OutputStream>
      {
      public:
      };
#endif

#if 0
      template<>
      class RefCountHandle<class sophisTools::logger::Logger>
      {
      public:
      };
#endif

#if 0
      template<>
      class RefCountHandle<class sophisTools::logger::ShiftableLogger>
      {
      public:
      };
#endif

      template<typename T0, typename T1, typename T3      >
      class/*or struct*/ RefCountedMap
      {
      public:
      };
#if 0 // Instances:
// <long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>>
#if 0
      template<>
      class/*or struct*/ RefCountedMap<long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>>
      {
        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisXmlTools.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };
#endif
#endif


      class RunTimeFailure
      {
        // Functions:
        public: sophisTools::base::RunTimeFailure::RunTimeFailure(class sophisTools::base::RunTimeFailure const &)
        public: sophisTools::base::RunTimeFailure::RunTimeFailure(char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::RunTimeFailure::~RunTimeFailure(void)
#endif

      public:
      };

      class Runnable : public RefCount
      {
        // Functions:
        public: sophisTools::base::Runnable::Runnable(void)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::Runnable::~Runnable(void)
#endif

      public:
      };

      class/*or struct*/ SignalUtil
      {
        // Static functions:
        public: static void sophisTools::base::SignalUtil::setInterruptHandler(void (__cdecl *)(long))
      public:
      };

      class StringTokenizer
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::base::StringTokenizer> sophisTools::base::StringTokenizer::create(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, bool)
      public:
      };

      class/*or struct*/ StringUtil
      {
        // Static functions:
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::base::StringUtil::ordinalMark(long)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::base::StringUtil::pluralMark(long)
        public: static bool sophisTools::base::StringUtil::string2bool(char const *)
        public: static void sophisTools::base::StringUtil::trim(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, char)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::base::StringUtil::upperCamel(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::base::StringUtil::upperCamel(char const *)
      public:
      };

      class SystemException
      {
        // Functions:
        public: sophisTools::base::SystemException::SystemException(class sophisTools::base::SystemException const &)
      public:
      };

      class/*or struct*/ UnsafeRefCount
      {
        // Functions:
        public: sophisTools::base::UnsafeRefCount::UnsafeRefCount(void)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::base::UnsafeRefCount::~UnsafeRefCount(void)
        public: virtual void sophisTools::base::UnsafeRefCount::_add_ref(void)
        public: virtual void sophisTools::base::UnsafeRefCount::_remove_ref(void)
        public: virtual long sophisTools::base::UnsafeRefCount::getRef(void) const
#endif

      public:
      };


    };

    namespace/*or class/struct?*/ comm
    {
      // Nested containers:
      class AlreadyConnected
      {
        // Functions:
        public: sophisTools::comm::AlreadyConnected::AlreadyConnected(class sophisTools::comm::AlreadyConnected const &)
        public: sophisTools::comm::AlreadyConnected::AlreadyConnected(void)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::comm::AlreadyConnected::~AlreadyConnected(void)
#endif

      public:
      };

      class ByteArraySerializableArchive : public SerializableArchive
      {
        // Functions:
        protected: sophisTools::comm::ByteArraySerializableArchive::ByteArraySerializableArchive(class sophisTools::io::ObjectInputStream *, class sophisTools::io::ObjectOutputStream *, class sophisTools::io::ByteArrayRandomAccessIOStream *)
        protected: sophisTools::comm::ByteArraySerializableArchive::ByteArraySerializableArchive(class sophisTools::base::RefCountHandle<class sophisTools::io::ObjectInputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::ObjectOutputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayRandomAccessIOStream>)
        public: sophisTools::comm::ByteArraySerializableArchive::ByteArraySerializableArchive(class sophisTools::comm::ByteArraySerializableArchive const &)
        public: class sophisTools::comm::ByteArraySerializableArchive & sophisTools::comm::ByteArraySerializableArchive::operator=(class sophisTools::comm::ByteArraySerializableArchive const &)
        protected: char const * sophisTools::comm::ByteArraySerializableArchive::getBuffer(void) const
        protected: class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayIOStream> sophisTools::comm::ByteArraySerializableArchive::getByteArray(void)
        protected: unsigned __int64 sophisTools::comm::ByteArraySerializableArchive::getReadCount(void) const
        protected: unsigned __int64 sophisTools::comm::ByteArraySerializableArchive::getWriteCount(void) const
#if 0 // All found virtual functions names:
        public: virtual sophisTools::comm::ByteArraySerializableArchive::~ByteArraySerializableArchive(void)
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(char &) const
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(short &) const
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(int &) const
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(long &) const
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(unsigned long &) const
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(float &) const
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(double &) const
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(class sophis::tools::CSRArchive *&) const
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(__int64 &) const
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(unsigned __int64 &) const
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(bool &) const
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(char *) const
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(class sophisTools::io::Serializable *) const
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(char)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(short)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(int)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(long)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(unsigned long)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(float)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(double)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(char const *)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(class sophis::tools::CSRArchive const *)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(class sophisTools::io::Serializable const *)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(__int64)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(unsigned __int64)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(bool)
        public: virtual void sophisTools::comm::ByteArraySerializableArchive::Rewind(void) const
        protected: virtual char const * sophisTools::comm::ByteArraySerializableArchive::getBuffer(void)
        protected: virtual unsigned __int64 sophisTools::comm::ByteArraySerializableArchive::getReadCount(void)
        protected: virtual unsigned __int64 sophisTools::comm::ByteArraySerializableArchive::getSize(void)
        protected: virtual unsigned __int64 sophisTools::comm::ByteArraySerializableArchive::getWriteCount(void)
        public: virtual void sophisTools::comm::ByteArraySerializableArchive::readObject(class sophisTools::base::RefCountHandle<class sophisTools::io::ObjectInputStream>)
        public: virtual void sophisTools::comm::ByteArraySerializableArchive::writeObject(class sophisTools::base::RefCountHandle<class sophisTools::io::ObjectOutputStream>) const
#endif

        // VFTable. Offset=0, Size=34, Start=0
        // Corresponding base: comm::comm::SerializableArchive
        // Added virtual functions:
        public: virtual sophisTools::comm::ByteArraySerializableArchive::~ByteArraySerializableArchive(void); // 0
        public: virtual void sophisTools::comm::ByteArraySerializableArchive::Rewind(void) const; // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual bool sphSystem::comm::BytesArchive::End(void) const; // 3 (comm::comm::BytesArchive)
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(class sophis::tools::CSRArchive const *); // 4
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(char const *); // 5
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(double); // 6
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(float); // 7
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(__int64); // 8
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(unsigned __int64); // 9
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(unsigned long); // 10
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(long); // 11
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(int); // 12
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(short); // 13
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(char); // 14
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(bool); // 15
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(class sophis::tools::CSRArchive *&) const; // 16
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(char *) const; // 17
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(double &) const; // 18
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(float &) const; // 19
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(__int64 &) const; // 20
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(unsigned __int64 &) const; // 21
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(unsigned long &) const; // 22
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(long &) const; // 23
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(int &) const; // 24
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(short &) const; // 25
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(char &) const; // 26
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(bool &) const; // 27
        public: virtual class sophis::tools::CSRArchive & sophisTools::comm::ByteArraySerializableArchive::operator<<(class sophisTools::io::Serializable const *); // 28
        public: virtual class sophis::tools::CSRArchive const & sophisTools::comm::ByteArraySerializableArchive::operator>>(class sophisTools::io::Serializable *) const; // 29
        protected: virtual char const * sophisTools::comm::ByteArraySerializableArchive::getBuffer(void); // 30
        protected: virtual unsigned __int64 sophisTools::comm::ByteArraySerializableArchive::getSize(void); // 31
        protected: virtual unsigned __int64 sophisTools::comm::ByteArraySerializableArchive::getReadCount(void); // 32
        protected: virtual unsigned __int64 sophisTools::comm::ByteArraySerializableArchive::getWriteCount(void); // 33
        // VFTable with 0 offset end

        // VFTable. Offset=8, Size=2, Start=2
        // Corresponding base: io::io::Serializable
        // Overrides:
        public: virtual void sophisTools::comm::ByteArraySerializableArchive::readObject(class sophisTools::base::RefCountHandle<class sophisTools::io::ObjectInputStream>) override; // 0
        public: virtual void sophisTools::comm::ByteArraySerializableArchive::writeObject(class sophisTools::base::RefCountHandle<class sophisTools::io::ObjectOutputStream>) const override; // 1
        // VFTable with 8 offset end

      public:
      };

      class ChannelDisconnected
      {
        // Functions:
        public: sophisTools::comm::ChannelDisconnected::ChannelDisconnected(class sophisTools::comm::ChannelDisconnected const &)
        public: sophisTools::comm::ChannelDisconnected::ChannelDisconnected(void)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::comm::ChannelDisconnected::~ChannelDisconnected(void)
#endif

      public:
      };

      class CoherencyChannel
      {
        // Functions:
        public: sophisTools::comm::CoherencyChannel::CoherencyChannel(void)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::comm::CoherencyChannel::~CoherencyChannel(void)
#endif

      public:
      };

      class Connection
      {
        // Functions:
        public: void sophisTools::comm::Connection::extractFromConnection(char const *)
      public:
      };

      class ConnectionException
      {
        // Functions:
        public: sophisTools::comm::ConnectionException::ConnectionException(class sophisTools::comm::ConnectionException const &)
      public:
      };

      class/*or struct*/ ILateQuoteReporter
      {
        // Functions:
        public: sophisTools::comm::ILateQuoteReporter::ILateQuoteReporter(void)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::comm::ILateQuoteReporter::~ILateQuoteReporter(void)
#endif

      public:
      };

      class/*or struct*/ OpaqueSerializerPrototypeManagerSingleton
      {
        // Static functions:
        public: static void sophisTools::comm::OpaqueSerializerPrototypeManagerSingleton::dispose(void)
        public: static void sophisTools::comm::OpaqueSerializerPrototypeManagerSingleton::init(void)
      public:
      };

      class QuoteInfo
      {
        // Functions:
        public: void sophisTools::comm::QuoteInfo::Print(class std::basic_ostream<char, struct std::char_traits<char>> &)
        // Static functions:
        public: static void sophisTools::comm::QuoteInfo::PrintHeader(class std::basic_ostream<char, struct std::char_traits<char>> &)
      public:
      };

      class/*or struct*/ SerializableArchive : public CSRArchive, public Serializable
      {
        // Warning: Greater base vftable size!
        // VFTable. Offset=0, Size=0, Start=3
        // Corresponding base: tools::tools::CSRArchive
        // VFTable with 0 offset end

      public:
      };

      class SerializablePacket
      {
      public:
      };

      class SerializableRiskEvent
      {
        // Functions:
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::comm::SerializableRiskEvent::toString(void) const
      public:
      };

      class SerializableRiskEventQueue
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue> sophisTools::comm::SerializableRiskEventQueue::create(void)
      public:
      };

      class UnexpectedEvent
      {
        // Functions:
        public: sophisTools::comm::UnexpectedEvent::UnexpectedEvent(class sophisTools::comm::UnexpectedEvent const &)
        public: sophisTools::comm::UnexpectedEvent::UnexpectedEvent(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::comm::UnexpectedEvent::~UnexpectedEvent(void)
#endif

      public:
      };


    };

    namespace/*or class/struct?*/ io
    {
      // Nested containers:
      class BufferedInputStream
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::BufferedInputStream> sophisTools::io::BufferedInputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>)
      public:
      };

      class ByteArrayIOStream
      {
        // Functions:
        public: void sophisTools::io::ByteArrayIOStream::wipe(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayIOStream> sophisTools::io::ByteArrayIOStream::create(void)
      public:
      };

      class ByteArrayInputStream
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayInputStream> sophisTools::io::ByteArrayInputStream::create(char *, unsigned __int64, bool)
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayInputStream> sophisTools::io::ByteArrayInputStream::create(char *const, unsigned __int64)
      public:
      };

      class ByteArrayOutputStream
      {
        // Functions:
        public: char * sophisTools::io::ByteArrayOutputStream::orphanBuffer(void)
        public: void sophisTools::io::ByteArrayOutputStream::readFrom(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>)
        public: void sophisTools::io::ByteArrayOutputStream::wipe(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayOutputStream> sophisTools::io::ByteArrayOutputStream::create(void)
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayOutputStream> sophisTools::io::ByteArrayOutputStream::create(bool)
      public:
      };

      class ByteArrayRandomAccessIOStream
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayRandomAccessIOStream> sophisTools::io::ByteArrayRandomAccessIOStream::create(char const *, unsigned __int64, unsigned __int64)
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayRandomAccessIOStream> sophisTools::io::ByteArrayRandomAccessIOStream::create(void)
      public:
      };

      class File
      {
        // Functions:
        public: void sophisTools::io::File::changeWorkingDirectory(void)
        // Static functions:
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::io::File::baseName(char const *, bool)
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::File> sophisTools::io::File::create(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::File> sophisTools::io::File::create(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::File> sophisTools::io::File::findFileInPathEnvironment(char const *, char const *)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::io::File::parentName(char const *)
        // Variables:
        public: static char const sophisTools::io::File::OS_SEPARATOR
      public:
      };

      class/*or struct*/ FileInputStream
      {
        // Functions:
        public: class sophisTools::base::RefCountHandle<class sophisTools::io::File> sophisTools::io::FileInputStream::getFile(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream> sophisTools::io::FileInputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::File>)
      public:
      };

      class/*or struct*/ FileOutputStream
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream> sophisTools::io::FileOutputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::File>, bool, bool)
      public:
      };

      class FilterInputStream
      {
        // Functions:
        public: void sophisTools::io::FilterInputStream::setUnderlyingInputStream(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>)
      public:
      };

      class FilterOutputStream
      {
        // Functions:
        public: void sophisTools::io::FilterOutputStream::setUnderlyingOutputStream(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
      public:
      };

      class IOException
      {
        // Functions:
        public: sophisTools::io::IOException::IOException(class sophisTools::io::IOException const &)
      public:
      };

      class InputStream
      {
      public:
      };

      class Library
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::Library> sophisTools::io::Library::create(char const *, char)
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::LibraryList> sophisTools::io::Library::getLoadedModules(void)
      public:
      };

      class LibraryList
      {
      public:
      };

      class LineInputStream
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::LineInputStream> sophisTools::io::LineInputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>)
      public:
      };

      class LineOutputStream
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::LineOutputStream> sophisTools::io::LineOutputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
      public:
      };

      class/*or struct*/ NewByteArrayRandomAccessIOStream
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayRandomAccessIOStream> sophisTools::io::NewByteArrayRandomAccessIOStream::create(char const *, unsigned __int64, unsigned __int64, bool)
      public:
      };

      class ObjectInputStream
      {
        // Functions:
        public: sophisTools::io::ObjectInputStream::ObjectInputStream(class sophisTools::io::InputStream *)
        public: void sophisTools::io::ObjectInputStream::`vbase dtor'(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ObjectInputStream> sophisTools::io::ObjectInputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>)
#if 0 // All found virtual functions names:
        public: virtual void sophisTools::io::ObjectInputStream::_add_ref(void)
        public: virtual void sophisTools::io::ObjectInputStream::_remove_ref(void)
        public: virtual long sophisTools::io::ObjectInputStream::getRef(void) const
#endif

        // VFTable. Offset=64, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_64_0(void); // 0
        public: virtual void unknown_vf_64_1(void); // 1
        public: virtual void unknown_vf_64_2(void); // 2
        public: virtual void unknown_vf_64_3(void); // 3
#endif
        // VFTable with 64 offset end

      public:
      };

      class ObjectOutputStream
      {
        // Functions:
        public: sophisTools::io::ObjectOutputStream::ObjectOutputStream(class sophisTools::io::OutputStream *)
        public: void sophisTools::io::ObjectOutputStream::`vbase dtor'(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::ObjectOutputStream> sophisTools::io::ObjectOutputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
#if 0 // All found virtual functions names:
        public: virtual void sophisTools::io::ObjectOutputStream::_add_ref(void)
        public: virtual void sophisTools::io::ObjectOutputStream::_remove_ref(void)
        public: virtual long sophisTools::io::ObjectOutputStream::getRef(void) const
#endif

        // VFTable. Offset=56, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_56_0(void); // 0
        public: virtual void unknown_vf_56_1(void); // 1
        public: virtual void unknown_vf_56_2(void); // 2
        public: virtual void unknown_vf_56_3(void); // 3
#endif
        // VFTable with 56 offset end

      public:
      };

      class OutputStream
      {
      public:
      };

      class/*or struct*/ OutputStreamAdapter
      {
        // Functions:
        public: sophisTools::io::OutputStreamAdapter::OutputStreamAdapter(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
        public: void sophisTools::io::OutputStreamAdapter::`vbase dtor'(void)
      public:
      };

      class/*or struct*/ OutputStreamStdAdapter
      {
        // Functions:
        public: sophisTools::io::OutputStreamStdAdapter::OutputStreamStdAdapter(class std::basic_ostream<char, struct std::char_traits<char>> &)
        public: void sophisTools::io::OutputStreamStdAdapter::`vbase dtor'(void)
#if 0 // All found virtual functions names:
        public: virtual void sophisTools::io::OutputStreamStdAdapter::_add_ref(void)
        public: virtual void sophisTools::io::OutputStreamStdAdapter::_remove_ref(void)
        public: virtual long sophisTools::io::OutputStreamStdAdapter::getRef(void) const
#endif

        // VFTable. Offset=48, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_48_0(void); // 0
        public: virtual void unknown_vf_48_1(void); // 1
        public: virtual void unknown_vf_48_2(void); // 2
        public: virtual void unknown_vf_48_3(void); // 3
#endif
        // VFTable with 48 offset end

      public:
      };

      class/*or struct*/ PipedInputStream
      {
        // Functions:
        public: sophisTools::io::PipedInputStream::PipedInputStream(class sophisTools::base::RefCountHandle<class sophisTools::io::InputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
        public: void sophisTools::io::PipedInputStream::`vbase dtor'(void)
#if 0 // All found virtual functions names:
        public: virtual void sophisTools::io::PipedInputStream::_add_ref(void)
        public: virtual void sophisTools::io::PipedInputStream::_remove_ref(void)
        public: virtual long sophisTools::io::PipedInputStream::getRef(void) const
#endif

        // VFTable. Offset=56, Size=4, Start=0
        // Owner: SophisXML.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_56_0(void); // 0
        public: virtual void unknown_vf_56_1(void); // 1
        public: virtual void unknown_vf_56_2(void); // 2
        public: virtual void unknown_vf_56_3(void); // 3
#endif
        // VFTable with 56 offset end

      public:
      };

      class/*or struct*/ RandomAccessFileInputStream
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream> sophisTools::io::RandomAccessFileInputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::File>)
      public:
      };

      class RandomAccessInputStream
      {
      public:
      };

      class Serializable
      {
        // VFTable. Offset=0, Size=2, Start=0
        // Added virtual functions:
        public: virtual void sophisTools::comm::ByteArraySerializableArchive::readObject(class sophisTools::base::RefCountHandle<class sophisTools::io::ObjectInputStream>); // 0 (comm::comm::ByteArraySerializableArchive)
        public: virtual void sophisTools::comm::ByteArraySerializableArchive::writeObject(class sophisTools::base::RefCountHandle<class sophisTools::io::ObjectOutputStream>) const; // 1 (comm::comm::ByteArraySerializableArchive)
        // VFTable with 0 offset end

      public:
      };

      class SerializationException
      {
        // Functions:
        public: sophisTools::io::SerializationException::SerializationException(class sophisTools::io::SerializationException const &)
        public: sophisTools::io::SerializationException::SerializationException(char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::io::SerializationException::~SerializationException(void)
#endif

      public:
      };

      class/*or struct*/ StreamUtil
      {
        // Static functions:
        public: static char const * sophisTools::io::StreamUtil::getNewLine(void)
      public:
      };

      class/*or struct*/ TeeOutputStream
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream> sophisTools::io::TeeOutputStream::create(class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::OutputStream>)
      public:
      };

      class TimeOutException
      {
        // Functions:
        public: sophisTools::io::TimeOutException::TimeOutException(class sophisTools::io::TimeOutException const &)
        public: sophisTools::io::TimeOutException::TimeOutException(long, char const *)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::io::TimeOutException::~TimeOutException(void)
#endif

      public:
      };


    };

    namespace/*or class/struct?*/ logger
    {
      // Nested containers:
      class FilterEngine : public RefCount
      {
        // Functions:
        public: sophisTools::logger::FilterEngine::FilterEngine(void)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::logger::FilterEngine::~FilterEngine(void)
#endif

      public:
      };

      class Logger
      {
        // Functions:
        public: sophisTools::logger::Logger::Logger(void)
        // Static functions:
        public: static char const * sophisTools::logger::Logger::getLevelName(enum Log::Severity)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::logger::Logger::~Logger(void)
#endif

      public:
      };

      class/*or struct*/ LoggerUtil
      {
        // Static functions:
        public: static void sophisTools::logger::LoggerUtil::Log(enum Log::Severity, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *, char const *, unsigned int)
        public: static void sophisTools::logger::LoggerUtil::Log(enum Log::Severity, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *, char const *, char const *, unsigned int)
        public: static void sophisTools::logger::LoggerUtil::Log(enum Log::Severity, char const *, char const *, char const *, char const *, unsigned int)
        public: static void sophisTools::logger::LoggerUtil::Log(enum Log::Severity, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *, char const *, unsigned int)
        public: static void sophisTools::logger::LoggerUtil::addConstraints(class std::list<struct sophisTools::logger::filterConstraint, class std::allocator<struct sophisTools::logger::filterConstraint>>)
        public: static void sophisTools::logger::LoggerUtil::dispose(void)
        protected: static void sophisTools::logger::LoggerUtil::init(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, enum Log::Severity)
        public: static bool sophisTools::logger::LoggerUtil::isLogWorthIt(enum Log::Severity)
        public: static void sophisTools::logger::LoggerUtil::removeAllConstraints(void)
        public: static void sophisTools::logger::LoggerUtil::setDefaultLogger(class sophisTools::base::RefCountHandle<class sophisTools::logger::Logger>)
        public: static void sophisTools::logger::LoggerUtil::setDefaultVerbosity(enum Log::Severity const &)
        public: static void sophisTools::logger::LoggerUtil::setFilterEngine(class sophisTools::base::RefCountHandle<class sophisTools::logger::FilterEngine>)
        public: static void sophisTools::logger::LoggerUtil::setLogPrivateBytes(bool)
        public: static void sophisTools::logger::LoggerUtil::setLogger(class sophisTools::base::RefCountHandle<class sophisTools::logger::Logger>)
        public: static void sophisTools::logger::LoggerUtil::setMode(bool)
        public: static void sophisTools::logger::LoggerUtil::setProcessName(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static void sophisTools::logger::LoggerUtil::setVerbosity(enum Log::Severity const &, bool)
      public:
      };

      class/*or struct*/ LoggerUtilLog4cxx
      {
        // Static functions:
        public: static bool sophisTools::logger::LoggerUtilLog4cxx::IsLogWorthIt(enum Log::Severity)
        public: static void sophisTools::logger::LoggerUtilLog4cxx::Log(enum Log::Severity, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *)
        public: static void sophisTools::logger::LoggerUtilLog4cxx::Log(enum Log::Severity, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *, char const *)
        public: static void sophisTools::logger::LoggerUtilLog4cxx::Log(enum Log::Severity, char const *, char const *, char const *)
        public: static void sophisTools::logger::LoggerUtilLog4cxx::Log(enum Log::Severity, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *)
      public:
      };

      class PostMortemLogEngine
      {
      public:
        // Enumerations:
        enum ePostMortemState : int {
        };

        // Functions:
        public: enum sophisTools::logger::PostMortemLogEngine::ePostMortemState sophisTools::logger::PostMortemLogEngine::getActivationState(void) const
        public: void sophisTools::logger::PostMortemLogEngine::pushMessage(enum Log::Severity, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *, char const *, unsigned __int64)
        public: void sophisTools::logger::PostMortemLogEngine::pushMessage(enum Log::Severity, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *, char const *, char const *, unsigned __int64)
        public: void sophisTools::logger::PostMortemLogEngine::pushMessage(enum Log::Severity, char const *, char const *, char const *, char const *, unsigned __int64)
        // Static functions:
        public: static class sophisTools::logger::PostMortemLogEngine & sophisTools::logger::PostMortemLogEngine::Instance(void)
        // Variables:
        public: static enum sophisTools::logger::PostMortemLogEngine::ePostMortemState sophisTools::logger::PostMortemLogEngine::bIsPostMortemLogActivated
      public:
      };

      class/*or struct*/ ShiftFileLogger
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::logger::ShiftableLogger> sophisTools::logger::ShiftFileLogger::create(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned __int64, bool, bool, bool)
      public:
      };

      class ShiftableLogger
      {
        // Functions:
        public: sophisTools::logger::ShiftableLogger::ShiftableLogger(void)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::logger::ShiftableLogger::~ShiftableLogger(void)
#endif

      public:
      };

      class/*or struct*/ SophisLoggerConfiguration
      {
        // Static functions:
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::logger::SophisLoggerConfiguration::GetFilePath(void)
        public: static bool sophisTools::logger::SophisLoggerConfiguration::GetOldLogger(void)
      public:
      };

      class/*or struct*/ SophisLoggerImpl
      {
        // Static functions:
        public: static void sophisTools::logger::SophisLoggerImpl::Dispose(void)
      public:
      };

      class/*or struct*/ StderrLogger
      {
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::logger::Logger> sophisTools::logger::StderrLogger::create(bool)
      public:
      };

      struct filterConstraint
      {
        // Functions:
        public: sophisTools::logger::filterConstraint::filterConstraint(struct sophisTools::logger::filterConstraint &&)
        public: sophisTools::logger::filterConstraint::filterConstraint(struct sophisTools::logger::filterConstraint const &)
        public: sophisTools::logger::filterConstraint::filterConstraint(char const *, char const *, bool, enum Log::Severity)
        public: sophisTools::logger::filterConstraint::~filterConstraint(void)
      public:
      };


    };

    namespace/*or class/struct?*/ net
    {
      // Nested containers:
      class/*or struct*/ InetAddress
      {
        // Static functions:
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sophisTools::net::InetAddress::getLocalHostName(void)
      public:
      };

      class/*or struct*/ NetworkUtil
      {
        // Static functions:
        public: static void sophisTools::net::NetworkUtil::dispose(void)
        public: static void sophisTools::net::NetworkUtil::init(void)
      public:
      };

      class Reactor
      {
      public:
        // Nested containers:
        class EventHandler
        {
        public:
        };


        // Functions:
        public: sophisTools::net::Reactor::Reactor(void)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::net::Reactor::~Reactor(void)
#endif

      public:
      };

      class/*or struct*/ SelectReactor
      {
      public:
        // Nested containers:
        struct HandlerInfo
        {
        public:
        };


        // Functions:
        protected: sophisTools::net::SelectReactor::SelectReactor(__int64)
        protected: void sophisTools::net::SelectReactor::evalFdSets(struct fd_set &, struct fd_set &, class std::list<struct sophisTools::net::SelectReactor::HandlerInfo, class std::allocator<struct sophisTools::net::SelectReactor::HandlerInfo>> &)
#if 0 // All found virtual functions names:
        public: virtual sophisTools::net::SelectReactor::~SelectReactor(void)
        public: virtual void sophisTools::net::SelectReactor::_add_ref(void)
        public: virtual void sophisTools::net::SelectReactor::_remove_ref(void)
        public: virtual void sophisTools::net::SelectReactor::dispatch(void)
        public: virtual bool sophisTools::net::SelectReactor::dispatchOneEvent(long)
        public: virtual bool sophisTools::net::SelectReactor::eventReady(void)
        public: virtual long sophisTools::net::SelectReactor::getRef(void) const
        public: virtual void sophisTools::net::SelectReactor::interruptDispatch(void)
        public: virtual void sophisTools::net::SelectReactor::registerHandler(class sophisTools::base::RefCountHandle<class sophisTools::net::Reactor::EventHandler>, long, long)
        protected: virtual void sophisTools::net::SelectReactor::setFdSets(struct fd_set &, struct fd_set &, int &)
        public: virtual void sophisTools::net::SelectReactor::unregisterHandler(class sophisTools::base::RefCountHandle<class sophisTools::net::Reactor::EventHandler>)
#endif

      public:
      };


    };

    namespace/*or class/struct?*/ time
    {
      // Nested containers:
      class Date
      {
        // Functions:
        public: class std::basic_ostream<char, struct std::char_traits<char>> & sophisTools::time::Date::toStream(class std::basic_ostream<char, struct std::char_traits<char>> &) const
        // Static functions:
        public: static class sophisTools::time::Date sophisTools::time::Date::Build(class std::basic_istream<char, struct std::char_traits<char>> &)
      public:
      };

      class DateTime
      {
        // Functions:
        public: sophisTools::time::DateTime::DateTime(void)
        // Static functions:
        public: static class sophisTools::time::DateTime sophisTools::time::DateTime::Build(class std::basic_istream<char, struct std::char_traits<char>> &)
      public:
      };

      class Time24
      {
        // Functions:
        public: bool sophisTools::time::Time24::operator==(class sophisTools::time::Time24 const &) const
        public: class sophisTools::time::Time24 sophisTools::time::Time24::operator-(class sophisTools::time::Time24 const &) const
        public: bool sophisTools::time::Time24::operator<(class sophisTools::time::Time24 const &) const
        public: class std::basic_ostream<char, struct std::char_traits<char>> & sophisTools::time::Time24::toStream(class std::basic_ostream<char, struct std::char_traits<char>> &) const
        // Static functions:
        public: static class sophisTools::time::Time24 sophisTools::time::Time24::Build(class std::basic_istream<char, struct std::char_traits<char>> &)
        public: static class sophisTools::time::Time24 sophisTools::time::Time24::Build(short, short, short)
        // Variables:
        public: static class sophisTools::time::Time24 const sophisTools::time::Time24::MIDNITE_00
        public: static class sophisTools::time::Time24 const sophisTools::time::Time24::ONE_DAY
      public:
      };

      class/*or struct*/ TimeUtil
      {
        // Static functions:
        public: static class sophisTools::time::Date & sophisTools::time::TimeUtil::addDay(class sophisTools::time::Date &, long)
        public: static class sophisTools::time::DateTime sophisTools::time::TimeUtil::from_Time_t(__int64 const &)
        public: static class sophisTools::time::Date sophisTools::time::TimeUtil::now_to_SophisDate(void)
        public: static class sophisTools::time::Time24 sophisTools::time::TimeUtil::now_to_SophisTime_Time24(void)
        public: static unsigned long sophisTools::time::TimeUtil::secondsFromMidnight(class sophisTools::time::Time24 const &)
        public: static unsigned long sophisTools::time::TimeUtil::secondsToMidnight(class sophisTools::time::Time24 const &)
        public: static __int64 sophisTools::time::TimeUtil::to_Time_t(class sophisTools::time::DateTime const &)
      public:
      };


    };


    // Functions:
    class std::basic_ostream<char, struct std::char_traits<char>> & operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class CSRDay const &)
    class std::basic_ostream<char, struct std::char_traits<char>> & operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class FlyWeightString const &)
    int strnicmp(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned __int64)
    void waitForAllSons(void)
  public:
  };

  namespace/*or class/struct?*/ sphSystem
  {
    // Nested containers:
    namespace/*or class/struct?*/ base
    {
      // Nested containers:
      class AppDomainHelper
      {
        // Functions:
        public: class sphSystem::base::AppDomainHelper & sphSystem::base::AppDomainHelper::operator=(class sphSystem::base::AppDomainHelper &&)
        public: class sphSystem::base::AppDomainHelper & sphSystem::base::AppDomainHelper::operator=(class sphSystem::base::AppDomainHelper const &)
        // Variables:
        public: static void (__cdecl *sphSystem::base::AppDomainHelper::MainAppDomainExecuter)(void (__cdecl *)(void *), void *)
      public:
      };

      class/*or struct*/ Benchmark
      {
      public:
        // Nested containers:
        class/*or struct*/ Event
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisSystem.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

        public:
        };

        class IListener
        {
        public:
        };


        // Functions:
        public: sphSystem::base::Benchmark::Benchmark(long, class sphSystem::base::Benchmark::IListener &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::base::Benchmark::~Benchmark(void)
        public: virtual void sphSystem::base::Benchmark::measure(__int64)
#endif

        // VFTable. Offset=0, Size=2, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::base::Benchmark::~Benchmark(void); // 0
        public: virtual void sphSystem::base::Benchmark::measure(__int64); // 1
        // VFTable with 0 offset end

      public:
      };

      class Stepper
      {
        // Functions:
        public: sphSystem::base::Stepper::Stepper(class sphSystem::base::Stepper const &)
        public: sphSystem::base::Stepper::Stepper(long, double)
        public: class sphSystem::base::Stepper & sphSystem::base::Stepper::operator=(class sphSystem::base::Stepper const &)
        public: void sphSystem::base::Stepper::beginStep(void)
        public: void sphSystem::base::Stepper::endStep(void)
        public: double sphSystem::base::Stepper::getFrequency(void) const
        public: void sphSystem::base::Stepper::reset(void)
        public: void sphSystem::base::Stepper::setFrequency(double)
        // Variables:
        private: static char const *sphSystem::base::Stepper::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::base::Stepper::~Stepper(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::base::Stepper::~Stepper(void); // 0
        // VFTable with 0 offset end

      public:
      };


    };

    namespace/*or class/struct?*/ comm
    {
      // Nested containers:
      class BytesArchive : public ByteArraySerializableArchive
      {
        // Functions:
        protected: sphSystem::comm::BytesArchive::BytesArchive(class sophisTools::io::ObjectInputStream *, class sophisTools::io::ObjectOutputStream *, class sophisTools::io::ByteArrayRandomAccessIOStream *)
        protected: sphSystem::comm::BytesArchive::BytesArchive(class sophisTools::base::RefCountHandle<class sophisTools::io::ObjectInputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::ObjectOutputStream>, class sophisTools::base::RefCountHandle<class sophisTools::io::ByteArrayRandomAccessIOStream>)
        public: sphSystem::comm::BytesArchive::BytesArchive(class sphSystem::comm::BytesArchive const &)
        public: class sphSystem::comm::BytesArchive & sphSystem::comm::BytesArchive::operator=(class sphSystem::comm::BytesArchive const &)
        public: void sphSystem::comm::BytesArchive::marshall(class std::vector<unsigned char, class std::allocator<unsigned char>> &, bool) const
        // Static functions:
        public: static class sophis::tools::CSRArchive * sphSystem::comm::BytesArchive::CreateInstance(void)
        public: static class sphSystem::comm::BytesArchive * sphSystem::comm::BytesArchive::create(class std::vector<unsigned char, class std::allocator<unsigned char>> *)
        public: static class sphSystem::comm::BytesArchive * sphSystem::comm::BytesArchive::create(class std::vector<unsigned char, class std::allocator<unsigned char>> *, bool)
        public: static class sphSystem::comm::BytesArchive * sphSystem::comm::BytesArchive::create(void)
        // Variables:
        private: static char const *sphSystem::comm::BytesArchive::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::comm::BytesArchive::~BytesArchive(void)
        public: virtual bool sphSystem::comm::BytesArchive::End(void) const
        public: virtual class std::vector<unsigned char, class std::allocator<unsigned char>> * sphSystem::comm::BytesArchive::marshall(bool)
        public: virtual void sphSystem::comm::BytesArchive::unmarshall(class std::vector<unsigned char, class std::allocator<unsigned char>> *)
#endif

        // VFTable. Offset=0, Size=36, Start=34
        // Corresponding base: comm::comm::ByteArraySerializableArchive
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::comm::BytesArchive::~BytesArchive(void); // 0
        // Overrides:
        public: virtual bool sphSystem::comm::BytesArchive::End(void) const override; // 3
        // Added virtual functions:
        public: virtual class std::vector<unsigned char, class std::allocator<unsigned char>> * sphSystem::comm::BytesArchive::marshall(bool); // 34
        public: virtual void sphSystem::comm::BytesArchive::unmarshall(class std::vector<unsigned char, class std::allocator<unsigned char>> *); // 35
        // VFTable with 0 offset end

        // VFTable. Offset=8, Size=2, Start=2
        // Corresponding base: io::io::Serializable
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::comm::BytesArchive::~BytesArchive(void); // 0
        // VFTable with 8 offset end

      public:
      };

      class ChannelReceiveThread
      {
        // VFTable. Offset=24, Size=11, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_24_0(void); // 0
        public: virtual void unknown_vf_24_1(void); // 1
        public: virtual void unknown_vf_24_2(void); // 2
        public: virtual void unknown_vf_24_3(void); // 3
        public: virtual void unknown_vf_24_4(void); // 4
        public: virtual void unknown_vf_24_5(void); // 5
        public: virtual void unknown_vf_24_6(void); // 6
        public: virtual void unknown_vf_24_7(void); // 7
        public: virtual void unknown_vf_24_8(void); // 8
        public: virtual void unknown_vf_24_9(void); // 9
        public: virtual void unknown_vf_24_10(void); // 10
#endif
        // VFTable with 24 offset end

      public:
      };

      class ChannelSendThread
      {
        // VFTable. Offset=24, Size=11, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_24_0(void); // 0
        public: virtual void unknown_vf_24_1(void); // 1
        public: virtual void unknown_vf_24_2(void); // 2
        public: virtual void unknown_vf_24_3(void); // 3
        public: virtual void unknown_vf_24_4(void); // 4
        public: virtual void unknown_vf_24_5(void); // 5
        public: virtual void unknown_vf_24_6(void); // 6
        public: virtual void unknown_vf_24_7(void); // 7
        public: virtual void unknown_vf_24_8(void); // 8
        public: virtual void unknown_vf_24_9(void); // 9
        public: virtual void unknown_vf_24_10(void); // 10
#endif
        // VFTable with 24 offset end

      public:
      };

      class/*or struct*/ QueuedCoherencyChannel
      {
        // Functions:
        protected: sphSystem::comm::QueuedCoherencyChannel::QueuedCoherencyChannel(class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel>, class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue>, class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue>)
        protected: void sphSystem::comm::QueuedCoherencyChannel::`vbase dtor'(void)
        public: void sphSystem::comm::QueuedCoherencyChannel::push(class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel> sphSystem::comm::QueuedCoherencyChannel::create(class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel>)
        public: static class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel> sphSystem::comm::QueuedCoherencyChannel::create(class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel>, class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue>, class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue>)
        // Variables:
        private: static char const *sphSystem::comm::QueuedCoherencyChannel::__CLASS__
#if 0 // All found virtual functions names:
        protected: virtual sphSystem::comm::QueuedCoherencyChannel::~QueuedCoherencyChannel(void)
        public: virtual void sphSystem::comm::QueuedCoherencyChannel::_add_ref(void)
        public: virtual void sphSystem::comm::QueuedCoherencyChannel::_remove_ref(void)
        public: virtual void sphSystem::comm::QueuedCoherencyChannel::connect(void)
        protected: virtual class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue> sphSystem::comm::QueuedCoherencyChannel::createRcvQueue(void)
        protected: virtual class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue> sphSystem::comm::QueuedCoherencyChannel::createSndQueue(void)
        public: virtual void sphSystem::comm::QueuedCoherencyChannel::disconnect(void)
        public: virtual char const * sphSystem::comm::QueuedCoherencyChannel::getConnectionStr(void)
        public: virtual long sphSystem::comm::QueuedCoherencyChannel::getRef(void) const
        public: virtual bool sphSystem::comm::QueuedCoherencyChannel::isConnected(void)
        protected: virtual void sphSystem::comm::QueuedCoherencyChannel::processIncomingQueue(void)
        protected: virtual void sphSystem::comm::QueuedCoherencyChannel::processOutgoingQueue(void)
        public: virtual unsigned __int64 sphSystem::comm::QueuedCoherencyChannel::ready(void)
        public: virtual class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent> sphSystem::comm::QueuedCoherencyChannel::receiveEvent(__int64)
        public: virtual void sphSystem::comm::QueuedCoherencyChannel::receiveEvent(class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>, __int64)
        public: virtual void sphSystem::comm::QueuedCoherencyChannel::sendEvent(class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>)
        public: virtual void sphSystem::comm::QueuedCoherencyChannel::setRiskUserName(char const *)
        protected: virtual void sphSystem::comm::QueuedCoherencyChannel::start(void)
#endif

        // VFTable. Offset=0, Size=5, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        protected: virtual void sphSystem::comm::QueuedCoherencyChannel::start(void); // 0
        protected: virtual void sphSystem::comm::QueuedCoherencyChannel::processIncomingQueue(void); // 1
        protected: virtual void sphSystem::comm::QueuedCoherencyChannel::processOutgoingQueue(void); // 2
        protected: virtual class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue> sphSystem::comm::QueuedCoherencyChannel::createSndQueue(void); // 3
        protected: virtual class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue> sphSystem::comm::QueuedCoherencyChannel::createRcvQueue(void); // 4
        // VFTable with 0 offset end

        // VFTable. Offset=280, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        protected: virtual sphSystem::comm::QueuedCoherencyChannel::~QueuedCoherencyChannel(void); // 0
        public: virtual void unknown_vf_280_1(void); // 1
        public: virtual void unknown_vf_280_2(void); // 2
        public: virtual void unknown_vf_280_3(void); // 3
#endif
        // VFTable with 280 offset end

        // VFTable. Offset=296, Size=9, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        protected: virtual sphSystem::comm::QueuedCoherencyChannel::~QueuedCoherencyChannel(void); // 0
        public: virtual void unknown_vf_296_1(void); // 1
        public: virtual void unknown_vf_296_2(void); // 2
        public: virtual void unknown_vf_296_3(void); // 3
        public: virtual void unknown_vf_296_4(void); // 4
        public: virtual void unknown_vf_296_5(void); // 5
        public: virtual void unknown_vf_296_6(void); // 6
        public: virtual void unknown_vf_296_7(void); // 7
        public: virtual void unknown_vf_296_8(void); // 8
#endif
        // VFTable with 296 offset end

      public:
      };

      class/*or struct*/ SafeCoherencyChannel
      {
        // Functions:
        protected: sphSystem::comm::SafeCoherencyChannel::SafeCoherencyChannel(class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel>)
        public: void sphSystem::comm::SafeCoherencyChannel::`vbase dtor'(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel> sphSystem::comm::SafeCoherencyChannel::create(class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel>)
        // Variables:
        private: static char const *sphSystem::comm::SafeCoherencyChannel::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::comm::SafeCoherencyChannel::~SafeCoherencyChannel(void)
        public: virtual void sphSystem::comm::SafeCoherencyChannel::_add_ref(void)
        public: virtual void sphSystem::comm::SafeCoherencyChannel::_remove_ref(void)
        public: virtual void sphSystem::comm::SafeCoherencyChannel::connect(void)
        public: virtual void sphSystem::comm::SafeCoherencyChannel::disconnect(void)
        public: virtual char const * sphSystem::comm::SafeCoherencyChannel::getConnectionStr(void)
        public: virtual long sphSystem::comm::SafeCoherencyChannel::getRef(void) const
        public: virtual bool sphSystem::comm::SafeCoherencyChannel::isConnected(void)
        public: virtual unsigned __int64 sphSystem::comm::SafeCoherencyChannel::ready(void)
        public: virtual class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent> sphSystem::comm::SafeCoherencyChannel::receiveEvent(__int64)
        public: virtual void sphSystem::comm::SafeCoherencyChannel::receiveEvent(class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>, __int64)
        public: virtual void sphSystem::comm::SafeCoherencyChannel::sendEvent(class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>)
        public: virtual void sphSystem::comm::SafeCoherencyChannel::setRiskUserName(char const *)
#endif

        // VFTable. Offset=48, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::comm::SafeCoherencyChannel::~SafeCoherencyChannel(void); // 0
        public: virtual void unknown_vf_48_1(void); // 1
        public: virtual void unknown_vf_48_2(void); // 2
        public: virtual void unknown_vf_48_3(void); // 3
#endif
        // VFTable with 48 offset end

        // VFTable. Offset=64, Size=9, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::comm::SafeCoherencyChannel::~SafeCoherencyChannel(void); // 0
        public: virtual void unknown_vf_64_1(void); // 1
        public: virtual void unknown_vf_64_2(void); // 2
        public: virtual void unknown_vf_64_3(void); // 3
        public: virtual void unknown_vf_64_4(void); // 4
        public: virtual void unknown_vf_64_5(void); // 5
        public: virtual void unknown_vf_64_6(void); // 6
        public: virtual void unknown_vf_64_7(void); // 7
        public: virtual void unknown_vf_64_8(void); // 8
#endif
        // VFTable with 64 offset end

      public:
      };

      class SimpleChannelReceiveThread
      {
        // VFTable. Offset=24, Size=11, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_24_0(void); // 0
        public: virtual void unknown_vf_24_1(void); // 1
        public: virtual void unknown_vf_24_2(void); // 2
        public: virtual void unknown_vf_24_3(void); // 3
        public: virtual void unknown_vf_24_4(void); // 4
        public: virtual void unknown_vf_24_5(void); // 5
        public: virtual void unknown_vf_24_6(void); // 6
        public: virtual void unknown_vf_24_7(void); // 7
        public: virtual void unknown_vf_24_8(void); // 8
        public: virtual void unknown_vf_24_9(void); // 9
        public: virtual void unknown_vf_24_10(void); // 10
#endif
        // VFTable with 24 offset end

      public:
      };

      class SimpleChannelSendThread
      {
        // VFTable. Offset=24, Size=11, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_24_0(void); // 0
        public: virtual void unknown_vf_24_1(void); // 1
        public: virtual void unknown_vf_24_2(void); // 2
        public: virtual void unknown_vf_24_3(void); // 3
        public: virtual void unknown_vf_24_4(void); // 4
        public: virtual void unknown_vf_24_5(void); // 5
        public: virtual void unknown_vf_24_6(void); // 6
        public: virtual void unknown_vf_24_7(void); // 7
        public: virtual void unknown_vf_24_8(void); // 8
        public: virtual void unknown_vf_24_9(void); // 9
        public: virtual void unknown_vf_24_10(void); // 10
#endif
        // VFTable with 24 offset end

      public:
      };

      class/*or struct*/ SimpleQueuedCoherencyChannel
      {
        // Functions:
        protected: sphSystem::comm::SimpleQueuedCoherencyChannel::SimpleQueuedCoherencyChannel(class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel>, class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue>, class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue>)
        protected: void sphSystem::comm::SimpleQueuedCoherencyChannel::`vbase dtor'(void)
        public: void sphSystem::comm::SimpleQueuedCoherencyChannel::push(class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel> sphSystem::comm::SimpleQueuedCoherencyChannel::create(class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel>)
        public: static class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel> sphSystem::comm::SimpleQueuedCoherencyChannel::create(class sophisTools::base::RefCountHandle<class sophisTools::comm::CoherencyChannel>, class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue>, class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue>)
        // Variables:
        private: static char const *sphSystem::comm::SimpleQueuedCoherencyChannel::__CLASS__
#if 0 // All found virtual functions names:
        protected: virtual sphSystem::comm::SimpleQueuedCoherencyChannel::~SimpleQueuedCoherencyChannel(void)
        public: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::_add_ref(void)
        public: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::_remove_ref(void)
        public: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::connect(void)
        protected: virtual class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue> sphSystem::comm::SimpleQueuedCoherencyChannel::createRcvQueue(void)
        protected: virtual class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue> sphSystem::comm::SimpleQueuedCoherencyChannel::createSndQueue(void)
        public: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::disconnect(void)
        public: virtual char const * sphSystem::comm::SimpleQueuedCoherencyChannel::getConnectionStr(void)
        public: virtual long sphSystem::comm::SimpleQueuedCoherencyChannel::getRef(void) const
        public: virtual bool sphSystem::comm::SimpleQueuedCoherencyChannel::isConnected(void)
        protected: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::processIncomingQueue(void)
        protected: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::processOutgoingQueue(void)
        public: virtual unsigned __int64 sphSystem::comm::SimpleQueuedCoherencyChannel::ready(void)
        public: virtual class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent> sphSystem::comm::SimpleQueuedCoherencyChannel::receiveEvent(__int64)
        public: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::receiveEvent(class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>, __int64)
        public: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::sendEvent(class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEvent>)
        public: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::setRiskUserName(char const *)
        protected: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::start(void)
#endif

        // VFTable. Offset=0, Size=5, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        protected: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::start(void); // 0
        protected: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::processIncomingQueue(void); // 1
        protected: virtual void sphSystem::comm::SimpleQueuedCoherencyChannel::processOutgoingQueue(void); // 2
        protected: virtual class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue> sphSystem::comm::SimpleQueuedCoherencyChannel::createSndQueue(void); // 3
        protected: virtual class sophisTools::base::RefCountHandle<class sophisTools::comm::SerializableRiskEventQueue> sphSystem::comm::SimpleQueuedCoherencyChannel::createRcvQueue(void); // 4
        // VFTable with 0 offset end

        // VFTable. Offset=216, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        protected: virtual sphSystem::comm::SimpleQueuedCoherencyChannel::~SimpleQueuedCoherencyChannel(void); // 0
        public: virtual void unknown_vf_216_1(void); // 1
        public: virtual void unknown_vf_216_2(void); // 2
        public: virtual void unknown_vf_216_3(void); // 3
#endif
        // VFTable with 216 offset end

        // VFTable. Offset=232, Size=9, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        protected: virtual sphSystem::comm::SimpleQueuedCoherencyChannel::~SimpleQueuedCoherencyChannel(void); // 0
        public: virtual void unknown_vf_232_1(void); // 1
        public: virtual void unknown_vf_232_2(void); // 2
        public: virtual void unknown_vf_232_3(void); // 3
        public: virtual void unknown_vf_232_4(void); // 4
        public: virtual void unknown_vf_232_5(void); // 5
        public: virtual void unknown_vf_232_6(void); // 6
        public: virtual void unknown_vf_232_7(void); // 7
        public: virtual void unknown_vf_232_8(void); // 8
#endif
        // VFTable with 232 offset end

      public:
      };


    };

    namespace/*or class/struct?*/ config
    {
      // Nested containers:
      class AdminUtil
      {
        // Functions:
        public: class sphSystem::config::AdminUtil & sphSystem::config::AdminUtil::operator=(class sphSystem::config::AdminUtil &&)
        public: class sphSystem::config::AdminUtil & sphSystem::config::AdminUtil::operator=(class sphSystem::config::AdminUtil const &)
        // Static functions:
        public: static void sphSystem::config::AdminUtil::autoShutDownTimeOut(__int64 const &)
        public: static __int64 sphSystem::config::AdminUtil::autoShutDownTimeOut(void)
        public: static class sophisTools::time::Time24 const * sphSystem::config::AdminUtil::dailyAutoShutDown(void)
        public: static void sphSystem::config::AdminUtil::dailyAutoShutDown(class sophisTools::time::Time24 const &)
        public: static void sphSystem::config::AdminUtil::dispose(void)
        public: static void sphSystem::config::AdminUtil::exitWatcher(bool)
        public: static bool sphSystem::config::AdminUtil::exitWatcher(void)
        public: static void sphSystem::config::AdminUtil::init(void)
        public: static void sphSystem::config::AdminUtil::preinit(void)
        public: static void sphSystem::config::AdminUtil::statistics(bool const &)
        public: static bool sphSystem::config::AdminUtil::statistics(void)
        // Variables:
        private: static char const **sphSystem::config::AdminUtil::__ALLOWED_OPTIONS__
        private: static char const *sphSystem::config::AdminUtil::__PREFIX__
        private: static __int64 sphSystem::config::AdminUtil::fAutoShutDownTimeOut
        private: static class sophisTools::time::Time24 *sphSystem::config::AdminUtil::fDailyAutoShutDown
        private: static bool sphSystem::config::AdminUtil::fExitWatcher
        private: static bool sphSystem::config::AdminUtil::fStatistics
      public:
      };

      class ArgMap
      {
        // Functions:
        public: sphSystem::config::ArgMap::ArgMap(class sphSystem::config::ArgMap const &)
        public: sphSystem::config::ArgMap::ArgMap(class sphSystem::config::PropertySet const &)
        public: sphSystem::config::ArgMap::ArgMap(int, char **)
        public: sphSystem::config::ArgMap::ArgMap(char const *)
        public: sphSystem::config::ArgMap::ArgMap(void)
        public: class sphSystem::config::ArgMap & sphSystem::config::ArgMap::operator=(class sphSystem::config::ArgMap const &)
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & sphSystem::config::ArgMap::operator[](class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: class std::_Tree_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>> sphSystem::config::ArgMap::begin(void)
        public: class std::_Tree_const_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>> sphSystem::config::ArgMap::begin(void) const
        public: void sphSystem::config::ArgMap::dispose(void)
        public: class std::_Tree_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>> sphSystem::config::ArgMap::end(void)
        public: class std::_Tree_const_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>> sphSystem::config::ArgMap::end(void) const
        public: void sphSystem::config::ArgMap::erase(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: class std::_Tree_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>> sphSystem::config::ArgMap::find(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: class std::_Tree_const_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>> sphSystem::config::ArgMap::find(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &) const
        public: void sphSystem::config::ArgMap::getArgs(long &, char **&)
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ArgMap::getArgsAsString(void)
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ArgMap::getArgsAsStringWithoutLog(void)
        protected: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ArgMap::getValue(class std::vector<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, unsigned __int64 &)
        protected: void sphSystem::config::ArgMap::init(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class sphSystem::config::PropertySet const &)
        protected: void sphSystem::config::ArgMap::init(class std::vector<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>)
        public: struct std::pair<class std::_Tree_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>, bool> sphSystem::config::ArgMap::insert(struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>> const &)
        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class/*or struct*/ CommandLine
      {
        // Functions:
        public: sphSystem::config::CommandLine::CommandLine(void)
        public: void sphSystem::config::CommandLine::`vbase dtor'(void)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::CommandLine::~CommandLine(void)
        public: virtual void sphSystem::config::CommandLine::deleteEntry(char const *, char const *)
        protected: virtual void sphSystem::config::CommandLine::doFlush(void)
        public: virtual class sphSystem::config::PropertySet sphSystem::config::CommandLine::getAllProperties(void) const
        public: virtual class sophisTools::base::RefCountHandle<class sphSystem::config::ArgMap> sphSystem::config::CommandLine::getAllPropertiesAsArgs(void) const
        public: virtual void sphSystem::config::CommandLine::getEntryValue(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
        public: virtual class sphSystem::config::PropertySet sphSystem::config::CommandLine::getSection(char const *)
        public: virtual bool sphSystem::config::CommandLine::isEntryDefined(char const *, char const *)
        public: virtual void sphSystem::config::CommandLine::setEntryValue(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
#endif

        // VFTable. Offset=0, Size=12, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual class sphSystem::config::PropertySet sphSystem::config::CommandLine::getAllProperties(void) const; // 0
        public: virtual class sphSystem::config::PropertySet sphSystem::config::CommandLine::getSection(char const *); // 1
        public: virtual void sphSystem::config::CommandLine::getEntryValue(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &); // 2
        public: virtual void sphSystem::config::CommandLine::setEntryValue(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &); // 3
        public: virtual void sphSystem::config::CommandLine::deleteEntry(char const *, char const *); // 4
        public: virtual class sophisTools::base::RefCountHandle<class sphSystem::config::ArgMap> sphSystem::config::CommandLine::getAllPropertiesAsArgs(void) const; // 5
        public: virtual bool sphSystem::config::CommandLine::isEntryDefined(char const *, char const *); // 6
        public: virtual void unknown_vf_0_7(void); // 7
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual void unknown_vf_0_9(void); // 9
        public: virtual void unknown_vf_0_10(void); // 10
        protected: virtual void sphSystem::config::CommandLine::doFlush(void); // 11
        // VFTable with 0 offset end

        // VFTable. Offset=32, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::config::CommandLine::~CommandLine(void); // 0
        public: virtual void unknown_vf_32_1(void); // 1
        public: virtual void unknown_vf_32_2(void); // 2
        public: virtual void unknown_vf_32_3(void); // 3
#endif
        // VFTable with 32 offset end

      public:
      };

      class/*or struct*/ CommandLineHelper
      {
        // Static functions:
        public: static void sphSystem::config::CommandLineHelper::addOption(char const *, char const *, char const *)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::CommandLineHelper::basename(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static void sphSystem::config::CommandLineHelper::deleteOption(char const *, char const *)
        public: static void sphSystem::config::CommandLineHelper::dispose(void)
        public: static class sophisTools::base::RefCountHandle<class sphSystem::config::ArgMap> sphSystem::config::CommandLineHelper::getArgs(void)
        public: static void sphSystem::config::CommandLineHelper::getArgs(long &, char **&)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::CommandLineHelper::getArgsAsString(void)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::CommandLineHelper::getArgsAsStringWithoutLog(void)
        public: static void sphSystem::config::CommandLineHelper::getEntryValue(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
        public: static class sophisTools::base::RefCountHandle<class sophisTools::io::File> sphSystem::config::CommandLineHelper::getExecutable(void)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::CommandLineHelper::getFullProcessName(void)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::CommandLineHelper::getFullProcessPath(void)
        public: static char const * sphSystem::config::CommandLineHelper::getProcessName(void)
        public: static void sphSystem::config::CommandLineHelper::init(int, char **)
        public: static bool sphSystem::config::CommandLineHelper::isDeprecated(void)
        public: static bool sphSystem::config::CommandLineHelper::isEntryDefined(char const *, char const *)
        public: static class sphSystem::config::PropertySet sphSystem::config::CommandLineHelper::parse(char const *)
        public: static void sphSystem::config::CommandLineHelper::setDeprecated(void)
        // Variables:
        private: static char const *sphSystem::config::CommandLineHelper::__CLASS__
        protected: static class sophisTools::base::RefCountHandle<class sphSystem::config::ArgMap> sphSystem::config::CommandLineHelper::fArgs
        protected: static class sphSystem::config::PropertySet sphSystem::config::CommandLineHelper::fArgsCache
        protected: static class sophisTools::base::RefCountHandle<class sophisTools::io::File> sphSystem::config::CommandLineHelper::fExecutable
        protected: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::CommandLineHelper::fProcessName
        private: static bool sphSystem::config::CommandLineHelper::fisDeprecated
      public:
      };

      class ConfigUtil
      {
        // Functions:
        public: class sphSystem::config::ConfigUtil & sphSystem::config::ConfigUtil::operator=(class sphSystem::config::ConfigUtil &&)
        public: class sphSystem::config::ConfigUtil & sphSystem::config::ConfigUtil::operator=(class sphSystem::config::ConfigUtil const &)
        // Static functions:
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::buildStandardNamingPath(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::buildStandardNamingPath(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static void sphSystem::config::ConfigUtil::deleteEntryEveryWhere(char const *, char const *)
        public: static void sphSystem::config::ConfigUtil::dispose(void)
        public: static bool sphSystem::config::ConfigUtil::doesBelongToAGroup(void)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::getAccessPointName(void)
        public: static class sophisTools::base::RefCountHandle<class sphSystem::config::ArgMap> sphSystem::config::ConfigUtil::getAllAsArgs(void)
        public: static class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters> sphSystem::config::ConfigUtil::getCommandLine(void)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::getConfigName(void)
        public: static void sphSystem::config::ConfigUtil::getConnectionEntry(char const *, class sophisTools::comm::Connection &)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::getDBDirectory(void)
        public: static char const * sphSystem::config::ConfigUtil::getDomainName(void)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, short &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, short &, short const &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, long &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, long &, long const &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, unsigned long &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, unsigned long &, unsigned long const &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, double &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, double &, double const &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, class sophisTools::time::Date &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, class sophisTools::time::Date &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, class sophisTools::time::Time24 &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, class sophisTools::time::Time24 &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, bool &)
        public: static void sphSystem::config::ConfigUtil::getEntryValue(char const *, char const *, bool &, bool const &)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::getEnvironementDirectory(void)
        public: static class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters> sphSystem::config::ConfigUtil::getGlobalParameters(void)
        public: static class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters> sphSystem::config::ConfigUtil::getLocalParameters(void)
        public: static class sphSystem::config::PropertySet sphSystem::config::ConfigUtil::getSection(char const *)
        public: static class sphSystem::config::SetOfPropertySet sphSystem::config::ConfigUtil::getSequence(char const *, char const *)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::getServerApplication(void)
        public: static char const * sphSystem::config::ConfigUtil::getServerCluster(void)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::getServerGroup(void)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::getServerInstance(void)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::getServerName(void)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::getServerNameOnly(void)
        public: static void sphSystem::config::ConfigUtil::init(class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters>, class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters>)
        public: static bool sphSystem::config::ConfigUtil::isEntryDefined(char const *, char const *)
        public: static void sphSystem::config::ConfigUtil::preinit(void)
        public: static void sphSystem::config::ConfigUtil::setConnectionEntry(char const *, class sophisTools::comm::Connection const &)
        public: static void sphSystem::config::ConfigUtil::setEntryValue(char const *, char const *, char const *)
        // Variables:
        private: static char const **sphSystem::config::ConfigUtil::__ALLOWED_OPTIONS__
        private: static char const *sphSystem::config::ConfigUtil::__CLASS__
        private: static char const *sphSystem::config::ConfigUtil::__PREFIX__
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fApplicationName
        private: static class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters> sphSystem::config::ConfigUtil::fCommandLine
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fDBDirectory
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fDomainName
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fEnvironementDirectory
        private: static class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters> sphSystem::config::ConfigUtil::fGlobal
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fGlobalIniDir
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fGlobalIniFile
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fGroupName
        private: static class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters> sphSystem::config::ConfigUtil::fLocal
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fLocalIniDir
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fLocalIniFile
        private: static class boost::recursive_mutex sphSystem::config::ConfigUtil::fMutex
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fServerCLuster
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fServerFullName
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fServerInstance
        private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::config::ConfigUtil::fServerName
        private: static bool sphSystem::config::ConfigUtil::fUseConfigurationServer
        private: static bool sphSystem::config::ConfigUtil::fWriteDefault
      public:
      };

      class IniFile
      {
        // Functions:
        public: sphSystem::config::IniFile::IniFile(char const *, bool)
        public: void sphSystem::config::IniFile::`vbase dtor'(void)
        public: void sphSystem::config::IniFile::load(void)
        public: void sphSystem::config::IniFile::reload(void)
        // Variables:
        private: static char const *sphSystem::config::IniFile::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::IniFile::~IniFile(void)
        public: virtual void sphSystem::config::IniFile::doFlush(void)
        public: virtual void sphSystem::config::IniFile::readFromStream(class sophisTools::base::RefCountHandle<class sophisTools::io::LineInputStream>)
        protected: virtual void sphSystem::config::IniFile::write(class sophisTools::base::RefCountHandle<class sophisTools::io::LineOutputStream>, class sphSystem::config::PropertySet const &)
        protected: virtual void sphSystem::config::IniFile::write(class sophisTools::base::RefCountHandle<class sophisTools::io::LineOutputStream>, char const *, long, class sphSystem::config::PropertySet const &)
        public: virtual void sphSystem::config::IniFile::writeFromStream(class sophisTools::base::RefCountHandle<class sophisTools::io::LineOutputStream>)
#endif

        // VFTable. Offset=0, Size=16, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::config::IniFile::~IniFile(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void); // 4
        public: virtual void unknown_vf_0_5(void); // 5
        public: virtual void unknown_vf_0_6(void); // 6
        public: virtual void unknown_vf_0_7(void); // 7
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual void unknown_vf_0_9(void); // 9
        public: virtual void unknown_vf_0_10(void); // 10
        public: virtual void sphSystem::config::IniFile::doFlush(void); // 11
        public: virtual void sphSystem::config::IniFile::readFromStream(class sophisTools::base::RefCountHandle<class sophisTools::io::LineInputStream>); // 12
        public: virtual void sphSystem::config::IniFile::writeFromStream(class sophisTools::base::RefCountHandle<class sophisTools::io::LineOutputStream>); // 13
        protected: virtual void sphSystem::config::IniFile::write(class sophisTools::base::RefCountHandle<class sophisTools::io::LineOutputStream>, char const *, long, class sphSystem::config::PropertySet const &); // 14
        protected: virtual void sphSystem::config::IniFile::write(class sophisTools::base::RefCountHandle<class sophisTools::io::LineOutputStream>, class sphSystem::config::PropertySet const &); // 15
        // VFTable with 0 offset end

        // VFTable. Offset=80, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::config::IniFile::~IniFile(void); // 0
        public: virtual void unknown_vf_80_1(void); // 1
        public: virtual void unknown_vf_80_2(void); // 2
        public: virtual void unknown_vf_80_3(void); // 3
#endif
        // VFTable with 80 offset end

      public:
      };

      class IniFileUtil
      {
        // Functions:
        public: class sphSystem::config::IniFileUtil & sphSystem::config::IniFileUtil::operator=(class sphSystem::config::IniFileUtil &&)
        public: class sphSystem::config::IniFileUtil & sphSystem::config::IniFileUtil::operator=(class sphSystem::config::IniFileUtil const &)
        // Static functions:
        public: static class sphSystem::config::IniFile * sphSystem::config::IniFileUtil::create(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, bool)
        public: static class sphSystem::config::IniFile * sphSystem::config::IniFileUtil::create(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, bool)
        public: static class sphSystem::config::IniFile * sphSystem::config::IniFileUtil::create(class sophisTools::base::RefCountHandle<class sophisTools::io::File>, bool)
        // Variables:
        private: static char const *sphSystem::config::IniFileUtil::__CLASS__
      public:
      };

      class InitParameters
      {
        // Functions:
        public: sphSystem::config::InitParameters::InitParameters(void)
        public: void sphSystem::config::InitParameters::getEntryValue(char const *, char const *, long &)
        public: void sphSystem::config::InitParameters::setEntryValue(char const *, char const *, long)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::InitParameters::~InitParameters(void)
        public: virtual void sphSystem::config::InitParameters::flush(void)
        protected: virtual void sphSystem::config::InitParameters::flushed(void)
        public: virtual class sophisTools::base::RefCountHandle<class sphSystem::config::ArgMap> sphSystem::config::InitParameters::getAllPropertiesAsArgs(void) const
        public: virtual bool sphSystem::config::InitParameters::isEntryDefined(char const *, char const *)
        protected: virtual bool sphSystem::config::InitParameters::isModified(void) const
        protected: virtual void sphSystem::config::InitParameters::modified(void)
#endif

        // VFTable. Offset=0, Size=12, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::config::InitParameters::~InitParameters(void) = 0; // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void) = 0; // 2
        public: virtual void unknown_vf_0_3(void) = 0; // 3
        public: virtual void unknown_vf_0_4(void) = 0; // 4
        public: virtual class sophisTools::base::RefCountHandle<class sphSystem::config::ArgMap> sphSystem::config::InitParameters::getAllPropertiesAsArgs(void) const; // 5
        public: virtual bool sphSystem::config::InitParameters::isEntryDefined(char const *, char const *); // 6
        public: virtual void sphSystem::config::InitParameters::flush(void); // 7
        protected: virtual bool sphSystem::config::InitParameters::isModified(void) const; // 8
        protected: virtual void sphSystem::config::InitParameters::modified(void); // 9
        protected: virtual void sphSystem::config::InitParameters::flushed(void); // 10
        public: virtual void unknown_vf_0_11(void) = 0; // 11
        // VFTable with 0 offset end

        // VFTable. Offset=32, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::config::InitParameters::~InitParameters(void); // 0
        public: virtual void unknown_vf_32_1(void); // 1
        public: virtual void unknown_vf_32_2(void); // 2
        public: virtual void unknown_vf_32_3(void); // 3
#endif
        // VFTable with 32 offset end

      public:
      };

      class InitParametersException : public ExceptionBase
      {
        // Functions:
        protected: sphSystem::config::InitParametersException::InitParametersException(char const *, char const *)
        public: sphSystem::config::InitParametersException::InitParametersException(class sphSystem::config::InitParametersException &&)
        public: sphSystem::config::InitParametersException::InitParametersException(class sphSystem::config::InitParametersException const &)
        public: class sphSystem::config::InitParametersException & sphSystem::config::InitParametersException::operator=(class sphSystem::config::InitParametersException &&)
        public: class sphSystem::config::InitParametersException & sphSystem::config::InitParametersException::operator=(class sphSystem::config::InitParametersException const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::InitParametersException::~InitParametersException(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: base::base::ExceptionBase
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::config::InitParametersException::~InitParametersException(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class InvalidEntry : public InitParametersException
      {
        // Functions:
        public: sphSystem::config::InvalidEntry::InvalidEntry(class sphSystem::config::InvalidEntry &&)
        public: sphSystem::config::InvalidEntry::InvalidEntry(class sphSystem::config::InvalidEntry const &)
        public: sphSystem::config::InvalidEntry::InvalidEntry(char const *)
        public: class sphSystem::config::InvalidEntry & sphSystem::config::InvalidEntry::operator=(class sphSystem::config::InvalidEntry &&)
        public: class sphSystem::config::InvalidEntry & sphSystem::config::InvalidEntry::operator=(class sphSystem::config::InvalidEntry const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::InvalidEntry::~InvalidEntry(void)
#endif

        // VFTable. Offset=0, Size=1, Start=1
        // Corresponding base: config::config::InitParametersException
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::config::InvalidEntry::~InvalidEntry(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class InvalidFileException : public ExceptionBase
      {
        // Functions:
        public: sphSystem::config::InvalidFileException::InvalidFileException(class sphSystem::config::InvalidFileException &&)
        public: sphSystem::config::InvalidFileException::InvalidFileException(class sphSystem::config::InvalidFileException const &)
        public: sphSystem::config::InvalidFileException::InvalidFileException(char const *, long)
        public: class sphSystem::config::InvalidFileException & sphSystem::config::InvalidFileException::operator=(class sphSystem::config::InvalidFileException &&)
        public: class sphSystem::config::InvalidFileException & sphSystem::config::InvalidFileException::operator=(class sphSystem::config::InvalidFileException const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::InvalidFileException::~InvalidFileException(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: base::base::ExceptionBase
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::config::InvalidFileException::~InvalidFileException(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class InvalidPropertySetException : public ExceptionBase
      {
        // Functions:
        public: sphSystem::config::InvalidPropertySetException::InvalidPropertySetException(class sphSystem::config::InvalidPropertySetException &&)
        public: sphSystem::config::InvalidPropertySetException::InvalidPropertySetException(class sphSystem::config::InvalidPropertySetException const &)
        public: sphSystem::config::InvalidPropertySetException::InvalidPropertySetException(char const *)
        public: class sphSystem::config::InvalidPropertySetException & sphSystem::config::InvalidPropertySetException::operator=(class sphSystem::config::InvalidPropertySetException &&)
        public: class sphSystem::config::InvalidPropertySetException & sphSystem::config::InvalidPropertySetException::operator=(class sphSystem::config::InvalidPropertySetException const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::InvalidPropertySetException::~InvalidPropertySetException(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: base::base::ExceptionBase
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::config::InvalidPropertySetException::~InvalidPropertySetException(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class InvalidTypeCodeException : public ExceptionBase
      {
        // Functions:
        public: sphSystem::config::InvalidTypeCodeException::InvalidTypeCodeException(class sphSystem::config::InvalidTypeCodeException &&)
        public: sphSystem::config::InvalidTypeCodeException::InvalidTypeCodeException(class sphSystem::config::InvalidTypeCodeException const &)
        public: sphSystem::config::InvalidTypeCodeException::InvalidTypeCodeException(char const *)
        public: class sphSystem::config::InvalidTypeCodeException & sphSystem::config::InvalidTypeCodeException::operator=(class sphSystem::config::InvalidTypeCodeException &&)
        public: class sphSystem::config::InvalidTypeCodeException & sphSystem::config::InvalidTypeCodeException::operator=(class sphSystem::config::InvalidTypeCodeException const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::InvalidTypeCodeException::~InvalidTypeCodeException(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: base::base::ExceptionBase
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::config::InvalidTypeCodeException::~InvalidTypeCodeException(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ LocalInitParameters
      {
        // Functions:
        public: sphSystem::config::LocalInitParameters::LocalInitParameters(class sphSystem::config::PropertySet const &)
        public: sphSystem::config::LocalInitParameters::LocalInitParameters(void)
        public: void sphSystem::config::LocalInitParameters::`vbase dtor'(void)
        protected: void sphSystem::config::LocalInitParameters::setProperties(class sphSystem::config::PropertySet const &)
        // Variables:
        private: static char const *sphSystem::config::LocalInitParameters::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::LocalInitParameters::~LocalInitParameters(void)
        public: virtual void sphSystem::config::LocalInitParameters::deleteEntry(char const *, char const *)
        protected: virtual void sphSystem::config::LocalInitParameters::doFlush(void)
        public: virtual class sphSystem::config::PropertySet sphSystem::config::LocalInitParameters::getAllProperties(void) const
        public: virtual void sphSystem::config::LocalInitParameters::getEntryValue(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
        public: virtual class sphSystem::config::PropertySet sphSystem::config::LocalInitParameters::getSection(char const *)
        public: virtual bool sphSystem::config::LocalInitParameters::isEntryDefined(char const *, char const *)
        public: virtual void sphSystem::config::LocalInitParameters::setEntryValue(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
#endif

        // VFTable. Offset=0, Size=12, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual class sphSystem::config::PropertySet sphSystem::config::LocalInitParameters::getAllProperties(void) const; // 0
        public: virtual class sphSystem::config::PropertySet sphSystem::config::LocalInitParameters::getSection(char const *); // 1
        public: virtual void sphSystem::config::LocalInitParameters::getEntryValue(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &); // 2
        public: virtual void sphSystem::config::LocalInitParameters::setEntryValue(char const *, char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &); // 3
        public: virtual void sphSystem::config::LocalInitParameters::deleteEntry(char const *, char const *); // 4
        public: virtual void unknown_vf_0_5(void); // 5
        public: virtual bool sphSystem::config::LocalInitParameters::isEntryDefined(char const *, char const *); // 6
        public: virtual void unknown_vf_0_7(void); // 7
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual void unknown_vf_0_9(void); // 9
        public: virtual void unknown_vf_0_10(void); // 10
        protected: virtual void sphSystem::config::LocalInitParameters::doFlush(void); // 11
        // VFTable with 0 offset end

        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::config::LocalInitParameters::~LocalInitParameters(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class NoSuchEntry : public InitParametersException
      {
        // Functions:
        protected: sphSystem::config::NoSuchEntry::NoSuchEntry(char const *, char const *)
        public: sphSystem::config::NoSuchEntry::NoSuchEntry(class sphSystem::config::NoSuchEntry &&)
        public: sphSystem::config::NoSuchEntry::NoSuchEntry(class sphSystem::config::NoSuchEntry const &)
        public: sphSystem::config::NoSuchEntry::NoSuchEntry(char const *)
        public: class sphSystem::config::NoSuchEntry & sphSystem::config::NoSuchEntry::operator=(class sphSystem::config::NoSuchEntry &&)
        public: class sphSystem::config::NoSuchEntry & sphSystem::config::NoSuchEntry::operator=(class sphSystem::config::NoSuchEntry const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::NoSuchEntry::~NoSuchEntry(void)
#endif

        // VFTable. Offset=0, Size=1, Start=1
        // Corresponding base: config::config::InitParametersException
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::config::NoSuchEntry::~NoSuchEntry(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class NoSuchSection : public InitParametersException
      {
        // Functions:
        protected: sphSystem::config::NoSuchSection::NoSuchSection(char const *, char const *)
        public: sphSystem::config::NoSuchSection::NoSuchSection(class sphSystem::config::NoSuchSection &&)
        public: sphSystem::config::NoSuchSection::NoSuchSection(class sphSystem::config::NoSuchSection const &)
        public: sphSystem::config::NoSuchSection::NoSuchSection(char const *)
        public: class sphSystem::config::NoSuchSection & sphSystem::config::NoSuchSection::operator=(class sphSystem::config::NoSuchSection &&)
        public: class sphSystem::config::NoSuchSection & sphSystem::config::NoSuchSection::operator=(class sphSystem::config::NoSuchSection const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::NoSuchSection::~NoSuchSection(void)
#endif

        // VFTable. Offset=0, Size=1, Start=1
        // Corresponding base: config::config::InitParametersException
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::config::NoSuchSection::~NoSuchSection(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class NoSuchSequence : public InitParametersException
      {
        // Functions:
        public: sphSystem::config::NoSuchSequence::NoSuchSequence(class sphSystem::config::NoSuchSequence &&)
        public: sphSystem::config::NoSuchSequence::NoSuchSequence(class sphSystem::config::NoSuchSequence const &)
        public: sphSystem::config::NoSuchSequence::NoSuchSequence(char const *)
        public: class sphSystem::config::NoSuchSequence & sphSystem::config::NoSuchSequence::operator=(class sphSystem::config::NoSuchSequence &&)
        public: class sphSystem::config::NoSuchSequence & sphSystem::config::NoSuchSequence::operator=(class sphSystem::config::NoSuchSequence const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::NoSuchSequence::~NoSuchSequence(void)
#endif

        // VFTable. Offset=0, Size=1, Start=1
        // Corresponding base: config::config::InitParametersException
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::config::NoSuchSequence::~NoSuchSequence(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class Property
      {
      public:
        // Enumerations:
        enum ValueKind : int {
        };

        // Functions:
        public: sphSystem::config::Property::Property(class sphSystem::config::Property const &)
        public: sphSystem::config::Property::Property(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: sphSystem::config::Property::~Property(void)
        public: void sphSystem::config::Property::copyValue(class sphSystem::config::Property const &)
        public: enum sphSystem::config::Property::ValueKind sphSystem::config::Property::getKind(void) const
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const & sphSystem::config::Property::getName(void) const
        public: bool sphSystem::config::Property::getValue(char &) const
        public: bool sphSystem::config::Property::getValue(unsigned char &) const
        public: bool sphSystem::config::Property::getValue(short &) const
        public: bool sphSystem::config::Property::getValue(unsigned short &) const
        public: bool sphSystem::config::Property::getValue(long &) const
        public: bool sphSystem::config::Property::getValue(unsigned long &) const
        public: bool sphSystem::config::Property::getValue(float &) const
        public: bool sphSystem::config::Property::getValue(double &) const
        public: bool sphSystem::config::Property::getValue(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &) const
        public: bool sphSystem::config::Property::getValue(class sphSystem::config::PropertySet &) const
        public: bool sphSystem::config::Property::getValue(class sphSystem::config::SetOfPropertySet &) const
        public: bool sphSystem::config::Property::getValue(__int64 &) const
        public: bool sphSystem::config::Property::getValue(unsigned __int64 &) const
        public: bool sphSystem::config::Property::getValue(bool &) const
        public: void sphSystem::config::Property::setValue(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: void sphSystem::config::Property::setValue(class sphSystem::config::PropertySet const &)
        public: void sphSystem::config::Property::setValue(class sphSystem::config::SetOfPropertySet const &)
        public: void sphSystem::config::Property::setValue(__int64 const &)
        public: void sphSystem::config::Property::setValue(unsigned __int64 const &)
        public: void sphSystem::config::Property::setValue(char)
        public: void sphSystem::config::Property::setValue(unsigned char)
        public: void sphSystem::config::Property::setValue(short)
        public: void sphSystem::config::Property::setValue(unsigned short)
        public: void sphSystem::config::Property::setValue(long)
        public: void sphSystem::config::Property::setValue(unsigned long)
        public: void sphSystem::config::Property::setValue(float)
        public: void sphSystem::config::Property::setValue(double)
        public: void sphSystem::config::Property::setValue(bool)
      public:
      };

      class PropertyReader
      {
        // Functions:
        protected: sphSystem::config::PropertyReader::PropertyReader(class sphSystem::config::PropertySet const &)
        public: void sphSystem::config::PropertyReader::`vbase dtor'(void)
        public: bool sphSystem::config::PropertyReader::getBool(char const *)
        public: class sophisTools::CSRDay sphSystem::config::PropertyReader::getDate(char const *)
        public: __int64 sphSystem::config::PropertyReader::getDateTime(char const *)
        public: double sphSystem::config::PropertyReader::getDouble(char const *)
        public: float sphSystem::config::PropertyReader::getFloat(char const *)
        public: long sphSystem::config::PropertyReader::getLong(char const *)
        public: unsigned long sphSystem::config::PropertyReader::getPropertiesCount(void)
        public: class sphSystem::config::Property const * sphSystem::config::PropertyReader::getProperty(char const *)
        public: class sphSystem::config::PropertySet const & sphSystem::config::PropertyReader::getPropertySet(char const *)
        public: char const * sphSystem::config::PropertyReader::getString(char const *)
        public: unsigned long sphSystem::config::PropertyReader::getTime(char const *)
        public: long sphSystem::config::PropertyReader::getULong(char const *)
        public: bool sphSystem::config::PropertyReader::isPropertyDefined(char const *)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sphSystem::config::PropertyReader> sphSystem::config::PropertyReader::create(class sphSystem::config::PropertySet const &)
        // Variables:
        private: static char const *sphSystem::config::PropertyReader::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::config::PropertyReader::~PropertyReader(void)
        public: virtual void sphSystem::config::PropertyReader::propertiesChanged(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::config::PropertyReader::propertiesChanged(void); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::config::PropertyReader::~PropertyReader(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class PropertySet
      {
        // Functions:
        public: sphSystem::config::PropertySet::PropertySet(class sphSystem::config::PropertySet const &)
        public: sphSystem::config::PropertySet::PropertySet(void)
        public: sphSystem::config::PropertySet::~PropertySet(void)
        public: class sphSystem::config::PropertySet & sphSystem::config::PropertySet::operator=(class sphSystem::config::PropertySet const &)
        public: class sphSystem::config::Property * sphSystem::config::PropertySet::operator[](unsigned __int64)
        public: class sphSystem::config::Property const * sphSystem::config::PropertySet::operator[](unsigned __int64) const
        public: bool sphSystem::config::PropertySet::addProperty(class sphSystem::config::Property const &, bool)
        public: void sphSystem::config::PropertySet::dump(class std::basic_ostream<char, struct std::char_traits<char>> &) const
        public: class sphSystem::config::Property * sphSystem::config::PropertySet::getProperty(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: class sphSystem::config::Property const * sphSystem::config::PropertySet::getProperty(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &) const
        public: unsigned __int64 sphSystem::config::PropertySet::getSize(void) const
        public: bool sphSystem::config::PropertySet::isDefined(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &) const
        public: void sphSystem::config::PropertySet::merge(class sphSystem::config::PropertySet const &)
        public: void sphSystem::config::PropertySet::merge(class sphSystem::config::PropertySet const &, bool)
        public: void sphSystem::config::PropertySet::removeProperty(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
      public:
      };

      class SetOfPropertySet
      {
        // Functions:
        public: sphSystem::config::SetOfPropertySet::SetOfPropertySet(class sphSystem::config::SetOfPropertySet const &)
        public: sphSystem::config::SetOfPropertySet::SetOfPropertySet(void)
        public: sphSystem::config::SetOfPropertySet::~SetOfPropertySet(void)
        public: class sphSystem::config::SetOfPropertySet & sphSystem::config::SetOfPropertySet::operator=(class sphSystem::config::SetOfPropertySet const &)
        public: class sphSystem::config::PropertySet * sphSystem::config::SetOfPropertySet::operator[](unsigned __int64)
        public: class sphSystem::config::PropertySet const * sphSystem::config::SetOfPropertySet::operator[](unsigned __int64) const
        public: unsigned __int64 sphSystem::config::SetOfPropertySet::getSize(void) const
        public: void sphSystem::config::SetOfPropertySet::resize(unsigned __int64)
      public:
      };


    };

    namespace/*or class/struct?*/ dataModel
    {
      // Nested containers:
      class/*or struct*/ BasicTransformer
      {
        // Functions:
        public: sphSystem::dataModel::BasicTransformer::BasicTransformer(void)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::dataModel::BasicTransformer::~BasicTransformer(void)
        public: virtual void sphSystem::dataModel::BasicTransformer::getEntryValue(char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: virtual bool sphSystem::dataModel::BasicTransformer::hasEntry(char const *)
#endif

        // VFTable. Offset=0, Size=8, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::dataModel::BasicTransformer::~BasicTransformer(void) = 0; // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void) = 0; // 2
        public: virtual void unknown_vf_0_3(void) = 0; // 3
        public: virtual void unknown_vf_0_4(void) = 0; // 4
        public: virtual void unknown_vf_0_5(void) = 0; // 5
        public: virtual void sphSystem::dataModel::BasicTransformer::getEntryValue(char const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &); // 6
        public: virtual bool sphSystem::dataModel::BasicTransformer::hasEntry(char const *); // 7
        // VFTable with 0 offset end

        // VFTable. Offset=32, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::dataModel::BasicTransformer::~BasicTransformer(void); // 0
        public: virtual void unknown_vf_32_1(void); // 1
        public: virtual void unknown_vf_32_2(void); // 2
        public: virtual void unknown_vf_32_3(void); // 3
#endif
        // VFTable with 32 offset end

      public:
      };

      class Context
      {
        // Functions:
        public: sphSystem::dataModel::Context::Context(class sphSystem::dataModel::Context const &)
        public: sphSystem::dataModel::Context::Context(void)
        public: class sphSystem::dataModel::Context & sphSystem::dataModel::Context::operator=(class sphSystem::dataModel::Context const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::dataModel::Context::~Context(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::dataModel::Context::~Context(void); // 0
        // VFTable with 0 offset end

      public:
      };

      template<typename T1      >
      class/*or struct*/ GenericContext
      {
      public:
      };
#if 0 // Instances:
// <class sophis::tools::util::UIDGenerator>
#if 0
      template<>
      class/*or struct*/ GenericContext<class sophis::tools::util::UIDGenerator> : public Context
      {
        // Functions:
        public: sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator>::GenericContext<class sophis::tools::util::UIDGenerator>(class sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator> const &)
        public: sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator>::GenericContext<class sophis::tools::util::UIDGenerator>(void)
        public: class sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator> & sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator>::operator=(class sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator> &&)
        public: class sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator> & sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator>::operator=(class sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator> const &)
        public: class sophis::tools::util::UIDGenerator * sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator>::get(void)
        public: void sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator>::pop(void)
        public: void sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator>::push(class sophis::tools::util::UIDGenerator &)
        public: void sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator>::push(class sophis::tools::util::UIDGenerator const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator>::~GenericContext<class sophis::tools::util::UIDGenerator>(void)
#endif

        // VFTable. Offset=0, Size=1, Start=1
        // Corresponding base: dataModel::dataModel::Context
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::dataModel::GenericContext<class sophis::tools::util::UIDGenerator>::~GenericContext<class sophis::tools::util::UIDGenerator>(void); // 0
        // VFTable with 0 offset end

      public:
      };
#endif
#endif


#if 0
      template<>
      class GenericContext<class sophis::tools::util::UIDGenerator>
      {
      public:
      };
#endif

      class StorageContext
      {
        // Functions:
        public: sphSystem::dataModel::StorageContext::StorageContext(class sphSystem::dataModel::StorageContext const &)
        public: sphSystem::dataModel::StorageContext::StorageContext(void)
        public: class sphSystem::dataModel::StorageContext & sphSystem::dataModel::StorageContext::operator=(class sphSystem::dataModel::StorageContext const &)
        // Static functions:
        public: static class sphSystem::dataModel::StorageContext & sphSystem::dataModel::StorageContext::getInstance(void)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::dataModel::StorageContext::~StorageContext(void)
#endif

        // VFTable. Offset=0, Size=5, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::dataModel::StorageContext::~StorageContext(void); // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void) = 0; // 2
        public: virtual void unknown_vf_0_3(void) = 0; // 3
        public: virtual void unknown_vf_0_4(void) = 0; // 4
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ StorageContextImpl : public StorageContext
      {
        // VFTable. Offset=0, Size=5, Start=5
        // Corresponding base: dataModel::dataModel::StorageContext
        // Owner: SophisSystem.dll
        // VFTable with 0 offset end

      public:
      };

      class UIDGeneratorContext : public GenericContext<class sophis::tools::util::UIDGenerator>
      {
        // Functions:
        public: sphSystem::dataModel::UIDGeneratorContext::UIDGeneratorContext(class sphSystem::dataModel::UIDGeneratorContext &&)
        public: sphSystem::dataModel::UIDGeneratorContext::UIDGeneratorContext(class sphSystem::dataModel::UIDGeneratorContext const &)
        public: sphSystem::dataModel::UIDGeneratorContext::UIDGeneratorContext(void)
        public: class sphSystem::dataModel::UIDGeneratorContext & sphSystem::dataModel::UIDGeneratorContext::operator=(class sphSystem::dataModel::UIDGeneratorContext &&)
        public: class sphSystem::dataModel::UIDGeneratorContext & sphSystem::dataModel::UIDGeneratorContext::operator=(class sphSystem::dataModel::UIDGeneratorContext const &)
        // Static functions:
        public: static class sphSystem::dataModel::Context * sphSystem::dataModel::UIDGeneratorContext::create(void)
        public: static class sphSystem::dataModel::UIDGeneratorContext & sphSystem::dataModel::UIDGeneratorContext::getInstance(void)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::dataModel::UIDGeneratorContext::~UIDGeneratorContext(void)
#endif

        // VFTable. Offset=0, Size=1, Start=1
        // Corresponding base: GenericContext::GenericContext::GenericContext::GenericContext<class sophis::tools::util::UIDGenerator>
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::dataModel::UIDGeneratorContext::~UIDGeneratorContext(void); // 0
        // VFTable with 0 offset end

      public:
      };


    };

    namespace/*or class/struct?*/ logger
    {
      // Nested containers:
      class AutoShiftWorkerThread
      {
        // VFTable. Offset=24, Size=12, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_24_0(void); // 0
        public: virtual void unknown_vf_24_1(void); // 1
        public: virtual void unknown_vf_24_2(void); // 2
        public: virtual void unknown_vf_24_3(void); // 3
        public: virtual void unknown_vf_24_4(void); // 4
        public: virtual void unknown_vf_24_5(void); // 5
        public: virtual void unknown_vf_24_6(void); // 6
        public: virtual void unknown_vf_24_7(void); // 7
        public: virtual void unknown_vf_24_8(void); // 8
        public: virtual void unknown_vf_24_9(void); // 9
        public: virtual void unknown_vf_24_10(void); // 10
        public: virtual void unknown_vf_24_11(void); // 11
#endif
        // VFTable with 24 offset end

      public:
      };

      class/*or struct*/ AutoShiftableLogger
      {
        // Functions:
        protected: sphSystem::logger::AutoShiftableLogger::AutoShiftableLogger(class sophisTools::time::Time24 const &, class sophisTools::base::RefCountHandle<class sophisTools::logger::ShiftableLogger>, class sophisTools::base::RefCountHandle<class sphSystem::logger::SafeLogger>)
        public: void sphSystem::logger::AutoShiftableLogger::`vbase dtor'(void)
        protected: void sphSystem::logger::AutoShiftableLogger::createAndStartThread(void)
        public: void sphSystem::logger::AutoShiftableLogger::stop(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::logger::ShiftableLogger> sphSystem::logger::AutoShiftableLogger::create(class sophisTools::time::Time24 const &, class sophisTools::base::RefCountHandle<class sophisTools::logger::ShiftableLogger>, bool, bool)
        // Variables:
        private: static char const *sphSystem::logger::AutoShiftableLogger::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::logger::AutoShiftableLogger::~AutoShiftableLogger(void)
#endif

        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::logger::AutoShiftableLogger::~AutoShiftableLogger(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

        // VFTable. Offset=56, Size=2, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::logger::AutoShiftableLogger::~AutoShiftableLogger(void); // 0
        public: virtual void unknown_vf_56_1(void); // 1
#endif
        // VFTable with 56 offset end

        // VFTable. Offset=80, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::logger::AutoShiftableLogger::~AutoShiftableLogger(void); // 0
#endif
        // VFTable with 80 offset end

      public:
      };

      class/*or struct*/ FilterEngineImpl
      {
      public:
        // Nested containers:
        struct ConstraintValue
        {
        public:
        };


        // Functions:
        protected: sphSystem::logger::FilterEngineImpl::FilterEngineImpl(void)
        public: void sphSystem::logger::FilterEngineImpl::`vbase dtor'(void)
        private: bool sphSystem::logger::FilterEngineImpl::matchLevelAndThreadName(struct sphSystem::logger::FilterEngineImpl::ConstraintValue const &, enum Log::Severity const &)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::logger::FilterEngine> sphSystem::logger::FilterEngineImpl::create(void)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::logger::FilterEngineImpl::~FilterEngineImpl(void)
        public: virtual void sphSystem::logger::FilterEngineImpl::_add_ref(void)
        public: virtual void sphSystem::logger::FilterEngineImpl::_remove_ref(void)
        public: virtual void sphSystem::logger::FilterEngineImpl::addConstraints(class std::list<struct sophisTools::logger::filterConstraint, class std::allocator<struct sophisTools::logger::filterConstraint>>)
        public: virtual class std::list<struct sophisTools::logger::filterConstraint, class std::allocator<struct sophisTools::logger::filterConstraint>> sphSystem::logger::FilterEngineImpl::getAllConstraints(void)
        public: virtual bool sphSystem::logger::FilterEngineImpl::getMode(void)
        public: virtual long sphSystem::logger::FilterEngineImpl::getRef(void) const
        public: virtual bool sphSystem::logger::FilterEngineImpl::isMatched(char const *, char const *, enum Log::Severity)
        public: virtual void sphSystem::logger::FilterEngineImpl::removeAllConstraints(void)
        public: virtual void sphSystem::logger::FilterEngineImpl::setMode(bool)
#endif

        // VFTable. Offset=0, Size=10, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::logger::FilterEngineImpl::_add_ref(void); // 0
        public: virtual void sphSystem::logger::FilterEngineImpl::_remove_ref(void); // 1
        public: virtual long sphSystem::logger::FilterEngineImpl::getRef(void) const; // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void sphSystem::logger::FilterEngineImpl::addConstraints(class std::list<struct sophisTools::logger::filterConstraint, class std::allocator<struct sophisTools::logger::filterConstraint>>); // 4
        public: virtual void sphSystem::logger::FilterEngineImpl::removeAllConstraints(void); // 5
        public: virtual void sphSystem::logger::FilterEngineImpl::setMode(bool); // 6
        public: virtual bool sphSystem::logger::FilterEngineImpl::isMatched(char const *, char const *, enum Log::Severity); // 7
        public: virtual class std::list<struct sophisTools::logger::filterConstraint, class std::allocator<struct sophisTools::logger::filterConstraint>> sphSystem::logger::FilterEngineImpl::getAllConstraints(void); // 8
        public: virtual bool sphSystem::logger::FilterEngineImpl::getMode(void); // 9
        // VFTable with 0 offset end

        // VFTable. Offset=128, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::logger::FilterEngineImpl::~FilterEngineImpl(void); // 0
        public: virtual void unknown_vf_128_1(void); // 1
        public: virtual void unknown_vf_128_2(void); // 2
        public: virtual void unknown_vf_128_3(void); // 3
#endif
        // VFTable with 128 offset end

      public:
      };

      class LoggedException : public ExceptionBase
      {
        // Functions:
        public: sphSystem::logger::LoggedException::LoggedException(class sphSystem::logger::LoggedException const &)
        public: sphSystem::logger::LoggedException::LoggedException(char const *)
        public: class sphSystem::logger::LoggedException & sphSystem::logger::LoggedException::operator=(class sphSystem::logger::LoggedException const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::logger::LoggedException::~LoggedException(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: base::base::ExceptionBase
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::logger::LoggedException::~LoggedException(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class LoggerBase
      {
        // Functions:
        public: class sphSystem::logger::LoggerBase & sphSystem::logger::LoggerBase::operator=(class sphSystem::logger::LoggerBase &&)
        public: class sphSystem::logger::LoggerBase & sphSystem::logger::LoggerBase::operator=(class sphSystem::logger::LoggerBase const &)
        // Static functions:
        public: static bool sphSystem::logger::LoggerBase::GetAutoShift(void)
        public: static void sphSystem::logger::LoggerBase::SetAutoShift(bool)
        public: static enum Log::Severity sphSystem::logger::LoggerBase::consoleSeverity(void)
        public: static void sphSystem::logger::LoggerBase::consoleSeverity(enum Log::Severity)
        public: static void sphSystem::logger::LoggerBase::dispose(void)
        public: static bool sphSystem::logger::LoggerBase::fillFilterEngineFromInitFile(void)
        public: static bool sphSystem::logger::LoggerBase::getBuffered(void)
        public: static bool sphSystem::logger::LoggerBase::getClearFileBefore(void)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::logger::LoggerBase::getLogFileName(void)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::logger::LoggerBase::getLogFilesFilter(void)
        public: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::logger::LoggerBase::getLogPath(void)
        public: static bool sphSystem::logger::LoggerBase::getLoggable(void)
        public: static bool sphSystem::logger::LoggerBase::getSafeLogger(void)
        public: static bool sphSystem::logger::LoggerBase::getThreadIdHexadecimal(void)
        public: static void sphSystem::logger::LoggerBase::init(class sophisTools::base::RefCountHandle<class sophisTools::logger::Logger>)
        public: static void sphSystem::logger::LoggerBase::logFileNameWithDate(bool)
        public: static bool sphSystem::logger::LoggerBase::logFileNameWithDate(void)
        public: static void sphSystem::logger::LoggerBase::logFileNameWithPID(bool)
        public: static bool sphSystem::logger::LoggerBase::logFileNameWithPID(void)
        public: static void sphSystem::logger::LoggerBase::logLoadedLibraries(enum Log::Severity)
        public: static void sphSystem::logger::LoggerBase::preinit(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static void sphSystem::logger::LoggerBase::setClearFileBefore(bool)
        public: static void sphSystem::logger::LoggerBase::setLogFileName(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static void sphSystem::logger::LoggerBase::setLogPath(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: static void sphSystem::logger::LoggerBase::setLogPrivateBytes(bool)
        public: static void sphSystem::logger::LoggerBase::setLoggable(bool)
        public: static void sphSystem::logger::LoggerBase::severity(enum Log::Severity)
        public: static int sphSystem::logger::LoggerBase::shiftSize(void)
        public: static void sphSystem::logger::LoggerBase::shiftSize(int)
        public: static void sphSystem::logger::LoggerBase::shiftTime(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
        public: static void sphSystem::logger::LoggerBase::threadIdHexadecimal(bool)
        public: static void sphSystem::logger::LoggerBase::threadName(bool)
        public: static bool sphSystem::logger::LoggerBase::threadName(void)
        public: static void sphSystem::logger::LoggerBase::tryRemote(bool)
        public: static bool sphSystem::logger::LoggerBase::tryRemote(void)
        // Variables:
        protected: static char const **sphSystem::logger::LoggerBase::__ALLOWED_OPTIONS__
        protected: static char const *sphSystem::logger::LoggerBase::__CLASS__
        protected: static char const *sphSystem::logger::LoggerBase::__PREFIX__
        protected: static bool sphSystem::logger::LoggerBase::fAutoShift
        protected: static bool sphSystem::logger::LoggerBase::fBuffered
        protected: static bool sphSystem::logger::LoggerBase::fClearFileBefore
        protected: static enum Log::Severity sphSystem::logger::LoggerBase::fConsoleSeverity
        protected: static bool sphSystem::logger::LoggerBase::fInit
        protected: static class sophisTools::base::RefCountHandle<class sophisTools::logger::Logger> sphSystem::logger::LoggerBase::fLocalLogger
        protected: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::logger::LoggerBase::fLogFileName
        protected: static bool sphSystem::logger::LoggerBase::fLogFileNameWithDate
        protected: static bool sphSystem::logger::LoggerBase::fLogFileNameWithPID
        protected: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::logger::LoggerBase::fLogFilesFilter
        protected: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::logger::LoggerBase::fLogPath
        protected: static bool sphSystem::logger::LoggerBase::fLogPrivateBytes
        protected: static bool sphSystem::logger::LoggerBase::fLoggable
        protected: static bool sphSystem::logger::LoggerBase::fPreInit
        protected: static bool sphSystem::logger::LoggerBase::fSafeLogger
        protected: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::logger::LoggerBase::fServerName
        protected: static enum Log::Severity sphSystem::logger::LoggerBase::fSeverity
        protected: static unsigned __int64 sphSystem::logger::LoggerBase::fShiftSize
        protected: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::logger::LoggerBase::fShiftTimeStr
        protected: static bool sphSystem::logger::LoggerBase::fThreadIdHexadecimal
        protected: static bool sphSystem::logger::LoggerBase::fThreadName
        protected: static bool sphSystem::logger::LoggerBase::fTryRemote
      public:
      };

      class SafeLogger
      {
        // Functions:
        protected: sphSystem::logger::SafeLogger::SafeLogger(class sophisTools::base::RefCountHandle<class sophisTools::logger::Logger>, bool, bool)
        public: void sphSystem::logger::SafeLogger::`vbase dtor'(void)
        protected: void sphSystem::logger::SafeLogger::doMessage(unsigned __int64, char const *, char const *, enum Log::Severity, char const *, char const *)
        public: class boost::recursive_mutex & sphSystem::logger::SafeLogger::getMutex(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::logger::Logger> sphSystem::logger::SafeLogger::create(class sophisTools::base::RefCountHandle<class sophisTools::logger::Logger>, bool, bool)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::logger::SafeLogger::~SafeLogger(void)
        public: virtual void sphSystem::logger::SafeLogger::_add_ref(void)
        public: virtual void sphSystem::logger::SafeLogger::_remove_ref(void)
        public: virtual void sphSystem::logger::SafeLogger::getLogFilePath(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &) const
        public: virtual long sphSystem::logger::SafeLogger::getRef(void) const
        public: virtual void sphSystem::logger::SafeLogger::message(unsigned __int64, char const *, char const *, enum Log::Severity, char const *, char const *)
#endif

        // VFTable. Offset=0, Size=2, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::logger::SafeLogger::message(unsigned __int64, char const *, char const *, enum Log::Severity, char const *, char const *); // 0
        public: virtual void sphSystem::logger::SafeLogger::getLogFilePath(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &) const; // 1
        // VFTable with 0 offset end

        // VFTable. Offset=80, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::logger::SafeLogger::~SafeLogger(void); // 0
        public: virtual void unknown_vf_80_1(void); // 1
        public: virtual void unknown_vf_80_2(void); // 2
        public: virtual void unknown_vf_80_3(void); // 3
#endif
        // VFTable with 80 offset end

      public:
      };

      class/*or struct*/ SafeShiftableLogger
      {
        // Functions:
        protected: sphSystem::logger::SafeShiftableLogger::SafeShiftableLogger(class sophisTools::base::RefCountHandle<class sophisTools::logger::ShiftableLogger>, class sophisTools::base::RefCountHandle<class sphSystem::logger::SafeLogger>)
        public: void sphSystem::logger::SafeShiftableLogger::`vbase dtor'(void)
        public: class boost::recursive_mutex & sphSystem::logger::SafeShiftableLogger::getMutex(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::logger::ShiftableLogger> sphSystem::logger::SafeShiftableLogger::create(class sophisTools::base::RefCountHandle<class sophisTools::logger::ShiftableLogger>, bool, bool)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::logger::SafeShiftableLogger::~SafeShiftableLogger(void)
        public: virtual void sphSystem::logger::SafeShiftableLogger::_add_ref(void)
        public: virtual void sphSystem::logger::SafeShiftableLogger::_remove_ref(void)
        public: virtual void sphSystem::logger::SafeShiftableLogger::getLogFilePath(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &) const
        public: virtual long sphSystem::logger::SafeShiftableLogger::getRef(void) const
        public: virtual void sphSystem::logger::SafeShiftableLogger::message(unsigned __int64, char const *, char const *, enum Log::Severity, char const *, char const *)
        public: virtual void sphSystem::logger::SafeShiftableLogger::shift(void)
#endif

        // VFTable. Offset=32, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::logger::SafeShiftableLogger::~SafeShiftableLogger(void); // 0
        public: virtual void unknown_vf_32_1(void); // 1
        public: virtual void unknown_vf_32_2(void); // 2
        public: virtual void unknown_vf_32_3(void); // 3
#endif
        // VFTable with 32 offset end

        // VFTable. Offset=48, Size=2, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::logger::SafeShiftableLogger::~SafeShiftableLogger(void); // 0
        public: virtual void unknown_vf_48_1(void); // 1
#endif
        // VFTable with 48 offset end

        // VFTable. Offset=72, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::logger::SafeShiftableLogger::~SafeShiftableLogger(void); // 0
#endif
        // VFTable with 72 offset end

      public:
      };


    };

    class/*or struct*/ mutex
    {
    public:
      // Nested containers:
      class MutexDecorator
      {
        // Functions:
        public: sphSystem::mutex::MutexDecorator::MutexDecorator(void)
        public: sphSystem::mutex::MutexDecorator::~MutexDecorator(void)
        public: class sphSystem::mutex::MutexDecorator & sphSystem::mutex::MutexDecorator::operator=(class sphSystem::mutex::MutexDecorator const &)
        public: void sphSystem::mutex::MutexDecorator::Lock(void)
        public: void sphSystem::mutex::MutexDecorator::Unlock(void)
      public:
      };

      struct MutexDecoratorGuard
      {
        // Functions:
        public: sphSystem::mutex::MutexDecoratorGuard::MutexDecoratorGuard(class sphSystem::mutex::MutexDecorator *)
        public: sphSystem::mutex::MutexDecoratorGuard::~MutexDecoratorGuard(void)
        public: struct sphSystem::mutex::MutexDecoratorGuard & sphSystem::mutex::MutexDecoratorGuard::operator=(struct sphSystem::mutex::MutexDecoratorGuard const &)
      public:
      };


      // Functions:
      class MutexDecorator * CreateNewMutexDecorator(void)
      void RemoveMutexDecorator(class MutexDecorator *)
    public:
    };

    namespace/*or class/struct?*/ net
    {
      // Nested containers:
      class/*or struct*/ SafeSelectReactor
      {
        // Functions:
        protected: sphSystem::net::SafeSelectReactor::SafeSelectReactor(__int64)
        public: void sphSystem::net::SafeSelectReactor::`vbase dtor'(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophisTools::net::Reactor> sphSystem::net::SafeSelectReactor::create(__int64)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::net::SafeSelectReactor::~SafeSelectReactor(void)
        protected: virtual void sphSystem::net::SafeSelectReactor::evalFdSets(struct fd_set &, struct fd_set &)
        public: virtual void sphSystem::net::SafeSelectReactor::registerHandler(class sophisTools::base::RefCountHandle<class sophisTools::net::Reactor::EventHandler>, long, long)
        protected: virtual void sphSystem::net::SafeSelectReactor::setFdSets(struct fd_set &, struct fd_set &, int &)
        public: virtual void sphSystem::net::SafeSelectReactor::unregisterHandler(class sophisTools::base::RefCountHandle<class sophisTools::net::Reactor::EventHandler>)
#endif

        // VFTable. Offset=0, Size=2, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        protected: virtual void sphSystem::net::SafeSelectReactor::setFdSets(struct fd_set &, struct fd_set &, int &); // 0
        protected: virtual void sphSystem::net::SafeSelectReactor::evalFdSets(struct fd_set &, struct fd_set &); // 1
        // VFTable with 0 offset end

        // VFTable. Offset=88, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::net::SafeSelectReactor::~SafeSelectReactor(void); // 0
        public: virtual void unknown_vf_88_1(void); // 1
        public: virtual void unknown_vf_88_2(void); // 2
        public: virtual void unknown_vf_88_3(void); // 3
#endif
        // VFTable with 88 offset end

        // VFTable. Offset=104, Size=6, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::net::SafeSelectReactor::~SafeSelectReactor(void); // 0
        public: virtual void unknown_vf_104_1(void); // 1
        public: virtual void unknown_vf_104_2(void); // 2
        public: virtual void unknown_vf_104_3(void); // 3
        public: virtual void unknown_vf_104_4(void); // 4
        public: virtual void unknown_vf_104_5(void); // 5
#endif
        // VFTable with 104 offset end

      public:
      };


    };

    namespace/*or class/struct?*/ plugin
    {
      // Nested containers:
      class DuplicatePlugin : public ExceptionBase
      {
        // Functions:
        public: sphSystem::plugin::DuplicatePlugin::DuplicatePlugin(class sphSystem::plugin::DuplicatePlugin &&)
        public: sphSystem::plugin::DuplicatePlugin::DuplicatePlugin(class sphSystem::plugin::DuplicatePlugin const &)
        public: sphSystem::plugin::DuplicatePlugin::DuplicatePlugin(char const *)
        public: class sphSystem::plugin::DuplicatePlugin & sphSystem::plugin::DuplicatePlugin::operator=(class sphSystem::plugin::DuplicatePlugin &&)
        public: class sphSystem::plugin::DuplicatePlugin & sphSystem::plugin::DuplicatePlugin::operator=(class sphSystem::plugin::DuplicatePlugin const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::plugin::DuplicatePlugin::~DuplicatePlugin(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: base::base::ExceptionBase
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::plugin::DuplicatePlugin::~DuplicatePlugin(void); // 0
        // VFTable with 0 offset end

      public:
      };

      struct ListElement
      {
      public:
      };

      class NoSuchPlugin : public ExceptionBase
      {
        // Functions:
        public: sphSystem::plugin::NoSuchPlugin::NoSuchPlugin(class sphSystem::plugin::NoSuchPlugin &&)
        public: sphSystem::plugin::NoSuchPlugin::NoSuchPlugin(class sphSystem::plugin::NoSuchPlugin const &)
        public: sphSystem::plugin::NoSuchPlugin::NoSuchPlugin(char const *)
        public: class sphSystem::plugin::NoSuchPlugin & sphSystem::plugin::NoSuchPlugin::operator=(class sphSystem::plugin::NoSuchPlugin &&)
        public: class sphSystem::plugin::NoSuchPlugin & sphSystem::plugin::NoSuchPlugin::operator=(class sphSystem::plugin::NoSuchPlugin const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::plugin::NoSuchPlugin::~NoSuchPlugin(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: base::base::ExceptionBase
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::plugin::NoSuchPlugin::~NoSuchPlugin(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class Plugin
      {
        // Functions:
        public: sphSystem::plugin::Plugin::Plugin(class sphSystem::plugin::Plugin &&)
        public: sphSystem::plugin::Plugin::Plugin(class sphSystem::plugin::Plugin const &)
        public: sphSystem::plugin::Plugin::Plugin(void)
        public: class sphSystem::plugin::Plugin & sphSystem::plugin::Plugin::operator=(class sphSystem::plugin::Plugin &&)
        public: class sphSystem::plugin::Plugin & sphSystem::plugin::Plugin::operator=(class sphSystem::plugin::Plugin const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::plugin::Plugin::~Plugin(void)
#endif

        // VFTable. Offset=0, Size=3, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::plugin::Plugin::~Plugin(void) = 0; // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        public: virtual void unknown_vf_0_2(void) = 0; // 2
        // VFTable with 0 offset end

        // VFTable. Offset=16, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::plugin::Plugin::~Plugin(void) = 0; // 0
        public: virtual void unknown_vf_16_1(void) = 0; // 1
        public: virtual void unknown_vf_16_2(void) = 0; // 2
        public: virtual void unknown_vf_16_3(void); // 3
#endif
        // VFTable with 16 offset end

      public:
      };

      class PluginManager
      {
      public:
        // Nested containers:
        class/*or struct*/ PluginList : public list<struct sphSystem::plugin::ListElement, class std::allocator<struct sphSystem::plugin::ListElement>>
        {
          // VFTable. Offset=0, Size=1, Start=0
          // Owner: SophisSystem.dll
          // Added virtual functions:
          public: virtual void unknown_vf_0_0(void); // 0
          // VFTable with 0 offset end

        public:
        };


        // Functions:
        protected: sphSystem::plugin::PluginManager::PluginManager(void)
        public: void sphSystem::plugin::PluginManager::`vbase dtor'(void)
        public: void sphSystem::plugin::PluginManager::configurePluginNames(class std::set<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>> const &)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sphSystem::plugin::PluginManager> sphSystem::plugin::PluginManager::create(void)
        // Variables:
        private: static char const *sphSystem::plugin::PluginManager::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::plugin::PluginManager::~PluginManager(void)
        public: virtual void sphSystem::plugin::PluginManager::disposePlugins(void)
        public: virtual class sophisTools::base::RefCountHandle<class sphSystem::plugin::Plugin> sphSystem::plugin::PluginManager::getPlugin(char const *)
        public: virtual void sphSystem::plugin::PluginManager::initPlugins(void)
        public: virtual void sphSystem::plugin::PluginManager::loadConfigurationPlugins(void)
        public: virtual void sphSystem::plugin::PluginManager::loadPlugin(char const *)
        public: virtual void sphSystem::plugin::PluginManager::loadPlugin(class sophisTools::base::RefCountHandle<class sophisTools::io::Library>)
        public: virtual void sphSystem::plugin::PluginManager::registerPlugin(class sophisTools::base::RefCountHandle<class sphSystem::plugin::Plugin>)
#endif

        // VFTable. Offset=0, Size=7, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::plugin::PluginManager::loadPlugin(class sophisTools::base::RefCountHandle<class sophisTools::io::Library>); // 0
        public: virtual void sphSystem::plugin::PluginManager::loadPlugin(char const *); // 1
        public: virtual void sphSystem::plugin::PluginManager::loadConfigurationPlugins(void); // 2
        public: virtual class sophisTools::base::RefCountHandle<class sphSystem::plugin::Plugin> sphSystem::plugin::PluginManager::getPlugin(char const *); // 3
        public: virtual void sphSystem::plugin::PluginManager::registerPlugin(class sophisTools::base::RefCountHandle<class sphSystem::plugin::Plugin>); // 4
        public: virtual void sphSystem::plugin::PluginManager::initPlugins(void); // 5
        public: virtual void sphSystem::plugin::PluginManager::disposePlugins(void); // 6
        // VFTable with 0 offset end

        // VFTable. Offset=56, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::plugin::PluginManager::~PluginManager(void); // 0
        public: virtual void unknown_vf_56_1(void); // 1
        public: virtual void unknown_vf_56_2(void); // 2
        public: virtual void unknown_vf_56_3(void); // 3
#endif
        // VFTable with 56 offset end

      public:
      };

      class PluginManagerSingleton
      {
        // Functions:
        public: class sphSystem::plugin::PluginManagerSingleton & sphSystem::plugin::PluginManagerSingleton::operator=(class sphSystem::plugin::PluginManagerSingleton &&)
        public: class sphSystem::plugin::PluginManagerSingleton & sphSystem::plugin::PluginManagerSingleton::operator=(class sphSystem::plugin::PluginManagerSingleton const &)
        // Static functions:
        public: static void sphSystem::plugin::PluginManagerSingleton::dispose(void)
        public: static class sophisTools::base::RefCountHandle<class sphSystem::plugin::PluginManager> sphSystem::plugin::PluginManagerSingleton::getInstance(void)
        public: static void sphSystem::plugin::PluginManagerSingleton::init(void)
        // Variables:
        private: static class sophisTools::base::RefCountHandle<class sphSystem::plugin::PluginManager> sphSystem::plugin::PluginManagerSingleton::fInstance
      public:
      };


    };

    namespace/*or class/struct?*/ server
    {
      // Nested containers:
      class/*or struct*/ AlreadyAttached : public GeneralException
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: base::base::GeneralException
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class ApplicationTool
      {
        // Functions:
        protected: sphSystem::server::ApplicationTool::ApplicationTool(void)
        public: void sphSystem::server::ApplicationTool::`vbase dtor'(void)
        private: void sphSystem::server::ApplicationTool::disposeFrameWorkComponents(void)
        public: bool sphSystem::server::ApplicationTool::hasWorkToDo(void)
        private: void sphSystem::server::ApplicationTool::initFrameWorkComponents(void)
        private: void sphSystem::server::ApplicationTool::timeToWork(void)
        private: void sphSystem::server::ApplicationTool::waitForWork(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sphSystem::server::ApplicationTool> sphSystem::server::ApplicationTool::create(void)
        // Variables:
        private: static char const *sphSystem::server::ApplicationTool::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::server::ApplicationTool::~ApplicationTool(void)
        public: virtual void sphSystem::server::ApplicationTool::attach(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, bool, char const *)
        public: virtual void sphSystem::server::ApplicationTool::attach(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, bool, char const *, long &)
        public: virtual void sphSystem::server::ApplicationTool::detach(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>)
        public: virtual void sphSystem::server::ApplicationTool::dispose(void)
        protected: virtual void sphSystem::server::ApplicationTool::disposeDone(void)
        public: virtual void sphSystem::server::ApplicationTool::exitRequestCanceled(void)
        public: virtual void sphSystem::server::ApplicationTool::init(int, char **)
        protected: virtual void sphSystem::server::ApplicationTool::initializationDone(void)
        protected: virtual bool sphSystem::server::ApplicationTool::isDisposed(void)
        public: virtual bool sphSystem::server::ApplicationTool::isExitRequested(void)
        protected: virtual bool sphSystem::server::ApplicationTool::isInitialized(void)
        public: virtual void sphSystem::server::ApplicationTool::performWork(void)
        public: virtual void sphSystem::server::ApplicationTool::registerInitParameters(class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters>, class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters>)
        public: virtual void sphSystem::server::ApplicationTool::registerLogger(class sophisTools::base::RefCountHandle<class sophisTools::logger::Logger>)
        public: virtual void sphSystem::server::ApplicationTool::registrationCompleted(void)
        public: virtual void sphSystem::server::ApplicationTool::start(bool)
        public: virtual void sphSystem::server::ApplicationTool::stop(bool)
#endif

        // VFTable. Offset=0, Size=17, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::server::ApplicationTool::init(int, char **); // 0
        public: virtual void sphSystem::server::ApplicationTool::registerInitParameters(class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters>, class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters>); // 1
        public: virtual void sphSystem::server::ApplicationTool::registerLogger(class sophisTools::base::RefCountHandle<class sophisTools::logger::Logger>); // 2
        public: virtual void sphSystem::server::ApplicationTool::registrationCompleted(void); // 3
        public: virtual void sphSystem::server::ApplicationTool::attach(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, bool, char const *, long &); // 4
        public: virtual void sphSystem::server::ApplicationTool::attach(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, bool, char const *); // 5
        public: virtual void sphSystem::server::ApplicationTool::detach(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>); // 6
        public: virtual void sphSystem::server::ApplicationTool::start(bool); // 7
        public: virtual void sphSystem::server::ApplicationTool::performWork(void); // 8
        public: virtual void sphSystem::server::ApplicationTool::stop(bool); // 9
        public: virtual void sphSystem::server::ApplicationTool::dispose(void); // 10
        public: virtual bool sphSystem::server::ApplicationTool::isExitRequested(void); // 11
        public: virtual void sphSystem::server::ApplicationTool::exitRequestCanceled(void); // 12
        protected: virtual bool sphSystem::server::ApplicationTool::isDisposed(void); // 13
        protected: virtual void sphSystem::server::ApplicationTool::disposeDone(void); // 14
        protected: virtual bool sphSystem::server::ApplicationTool::isInitialized(void); // 15
        protected: virtual void sphSystem::server::ApplicationTool::initializationDone(void); // 16
        // VFTable with 0 offset end

        // VFTable. Offset=208, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::server::ApplicationTool::~ApplicationTool(void); // 0
        public: virtual void unknown_vf_208_1(void); // 1
        public: virtual void unknown_vf_208_2(void); // 2
        public: virtual void unknown_vf_208_3(void); // 3
#endif
        // VFTable with 208 offset end

      public:
      };

      class AutoShutDownThread : public PollingThread
      {
        // VFTable. Offset=0, Size=12, Start=11
        // Corresponding base: thread::thread::PollingThread
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_11(void); // 11
        // VFTable with 0 offset end

      public:
      };

      class AutoShutdownUtil
      {
        // Functions:
        public: class sphSystem::server::AutoShutdownUtil & sphSystem::server::AutoShutdownUtil::operator=(class sphSystem::server::AutoShutdownUtil &&)
        public: class sphSystem::server::AutoShutdownUtil & sphSystem::server::AutoShutdownUtil::operator=(class sphSystem::server::AutoShutdownUtil const &)
        // Static functions:
        public: static void sphSystem::server::AutoShutdownUtil::dispose(void)
        public: static void sphSystem::server::AutoShutdownUtil::enable(bool)
        public: static void sphSystem::server::AutoShutdownUtil::init(void)
        public: static void sphSystem::server::AutoShutdownUtil::start(void)
        // Variables:
        private: static char const *sphSystem::server::AutoShutdownUtil::__CLASS__
        private: static class std::shared_ptr<class sphSystem::thread::PollingThread> sphSystem::server::AutoShutdownUtil::fAutoShutdownThread
        private: static bool sphSystem::server::AutoShutdownUtil::fEnabled
      public:
      };

      class FrameWork
      {
        // Functions:
        public: class sphSystem::server::FrameWork & sphSystem::server::FrameWork::operator=(class sphSystem::server::FrameWork &&)
        public: class sphSystem::server::FrameWork & sphSystem::server::FrameWork::operator=(class sphSystem::server::FrameWork const &)
        protected: class sophisTools::base::RefCountHandle<class sphSystem::server::ApplicationTool> sphSystem::server::FrameWork::getApplicationTool(void)
        // Static functions:
        public: static void sphSystem::server::FrameWork::attach(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, bool, char const *)
        public: static void sphSystem::server::FrameWork::attach(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, bool, char const *, long &)
        public: static void sphSystem::server::FrameWork::detach(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>)
        public: static void sphSystem::server::FrameWork::dispose(void)
        public: static void sphSystem::server::FrameWork::exitRequestCanceled(void)
        public: static bool sphSystem::server::FrameWork::hasWorkToDo(void)
        private: static void sphSystem::server::FrameWork::init(int, char **, class sophisTools::base::RefCountHandle<class sphSystem::server::ApplicationTool>)
        public: static void sphSystem::server::FrameWork::init(int, char **)
        public: static bool sphSystem::server::FrameWork::isExitRequested(void)
        public: static void sphSystem::server::FrameWork::performWork(void)
        public: static void sphSystem::server::FrameWork::registerInitParameters(class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters>, class sophisTools::base::RefCountHandle<class sphSystem::config::InitParameters>)
        public: static void sphSystem::server::FrameWork::registerLogger(class sophisTools::base::RefCountHandle<class sophisTools::logger::Logger>)
        public: static void sphSystem::server::FrameWork::registrationCompleted(void)
        public: static void sphSystem::server::FrameWork::start(bool)
        public: static void sphSystem::server::FrameWork::stop(bool)
        // Variables:
        private: static char const *sphSystem::server::FrameWork::__CLASS__
        private: static class sophisTools::base::RefCountHandle<class sphSystem::server::ApplicationTool> sphSystem::server::FrameWork::fApplicationTool
      public:
      };

      class ProgramExitWatcherThread : public PollingThread
      {
        // Functions:
        public: sphSystem::server::ProgramExitWatcherThread::ProgramExitWatcherThread(class sophisTools::base::RefCountHandle<class sphSystem::server::ApplicationTool>)
        // Variables:
        private: static char const *sphSystem::server::ProgramExitWatcherThread::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::server::ProgramExitWatcherThread::~ProgramExitWatcherThread(void)
        public: virtual void sphSystem::server::ProgramExitWatcherThread::clean(void)
        public: virtual void sphSystem::server::ProgramExitWatcherThread::performJob(void)
#endif

        // VFTable. Offset=0, Size=11, Start=11
        // Corresponding base: thread::thread::PollingThread
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::server::ProgramExitWatcherThread::~ProgramExitWatcherThread(void); // 0
        // Overrides:
        public: virtual void sphSystem::server::ProgramExitWatcherThread::clean(void) override; // 7
        public: virtual void sphSystem::server::ProgramExitWatcherThread::performJob(void) override; // 10
        // VFTable with 0 offset end

      public:
      };


    };

    namespace/*or class/struct?*/ statistics
    {
      // Nested containers:
      class AbstractCounter
      {
        // Functions:
        protected: sphSystem::statistics::AbstractCounter::AbstractCounter(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const & sphSystem::statistics::AbstractCounter::getName(void) const
#if 0 // All found virtual functions names:
        public: virtual sphSystem::statistics::AbstractCounter::~AbstractCounter(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::statistics::AbstractCounter::~AbstractCounter(void) = 0; // 0
        // VFTable with 0 offset end

        // VFTable. Offset=64, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::statistics::AbstractCounter::~AbstractCounter(void); // 0
        public: virtual void unknown_vf_64_1(void); // 1
        public: virtual void unknown_vf_64_2(void); // 2
        public: virtual void unknown_vf_64_3(void); // 3
#endif
        // VFTable with 64 offset end

      public:
      };

      class EventCounter
      {
        // Functions:
        protected: sphSystem::statistics::EventCounter::EventCounter(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        public: void sphSystem::statistics::EventCounter::`vbase dtor'(void)
        public: void sphSystem::statistics::EventCounter::increment(long)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sphSystem::statistics::EventCounter> sphSystem::statistics::EventCounter::Create(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, bool)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::statistics::EventCounter::~EventCounter(void)
        public: virtual void sphSystem::statistics::EventCounter::getStatistics(__int64, bool, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::statistics::EventCounter::getStatistics(__int64, bool, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=128, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::statistics::EventCounter::~EventCounter(void); // 0
        public: virtual void unknown_vf_128_1(void); // 1
        public: virtual void unknown_vf_128_2(void); // 2
        public: virtual void unknown_vf_128_3(void); // 3
#endif
        // VFTable with 128 offset end

      public:
      };

      class LateQuotationCounter
      {
        // Functions:
        protected: sphSystem::statistics::LateQuotationCounter::LateQuotationCounter(void)
        public: void sphSystem::statistics::LateQuotationCounter::`vbase dtor'(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sphSystem::statistics::LateQuotationCounter> sphSystem::statistics::LateQuotationCounter::Create(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, bool)
        // Variables:
        private: static char const *const sphSystem::statistics::LateQuotationCounter::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::statistics::LateQuotationCounter::~LateQuotationCounter(void)
        public: virtual void sphSystem::statistics::LateQuotationCounter::AddInfo(class sophisTools::base::RefCountHandle<class sophisTools::comm::QuoteInfo>)
        public: virtual void sphSystem::statistics::LateQuotationCounter::Dispose(void)
        protected: virtual void sphSystem::statistics::LateQuotationCounter::Init(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
        protected: virtual void sphSystem::statistics::LateQuotationCounter::Report(class std::list<class sophisTools::base::RefCountHandle<class sophisTools::comm::QuoteInfo>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::comm::QuoteInfo>>> &)
        public: virtual void sphSystem::statistics::LateQuotationCounter::_add_ref(void)
        public: virtual void sphSystem::statistics::LateQuotationCounter::_remove_ref(void)
        public: virtual long sphSystem::statistics::LateQuotationCounter::getRef(void) const
        public: virtual void sphSystem::statistics::LateQuotationCounter::getStatistics(__int64, bool, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
#endif

        // VFTable. Offset=0, Size=3, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::statistics::LateQuotationCounter::Dispose(void); // 0
        protected: virtual void sphSystem::statistics::LateQuotationCounter::Init(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &); // 1
        protected: virtual void sphSystem::statistics::LateQuotationCounter::Report(class std::list<class sophisTools::base::RefCountHandle<class sophisTools::comm::QuoteInfo>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::comm::QuoteInfo>>> &); // 2
        // VFTable with 0 offset end

        // VFTable. Offset=80, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::statistics::LateQuotationCounter::~LateQuotationCounter(void); // 0
        public: virtual void unknown_vf_80_1(void); // 1
        public: virtual void unknown_vf_80_2(void); // 2
        public: virtual void unknown_vf_80_3(void); // 3
#endif
        // VFTable with 80 offset end

        // VFTable. Offset=96, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::statistics::LateQuotationCounter::~LateQuotationCounter(void); // 0
#endif
        // VFTable with 96 offset end

        // VFTable. Offset=160, Size=5, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::statistics::LateQuotationCounter::~LateQuotationCounter(void); // 0
        public: virtual void unknown_vf_160_1(void); // 1
        public: virtual void unknown_vf_160_2(void); // 2
        public: virtual void unknown_vf_160_3(void); // 3
        public: virtual void unknown_vf_160_4(void); // 4
#endif
        // VFTable with 160 offset end

      public:
      };

      class StatisticsHelper
      {
        // Functions:
        public: class sphSystem::statistics::StatisticsHelper & sphSystem::statistics::StatisticsHelper::operator=(class sphSystem::statistics::StatisticsHelper &&)
        public: class sphSystem::statistics::StatisticsHelper & sphSystem::statistics::StatisticsHelper::operator=(class sphSystem::statistics::StatisticsHelper const &)
        // Static functions:
        public: static void sphSystem::statistics::StatisticsHelper::AddCounter(class sophisTools::base::RefCountHandle<class sphSystem::statistics::AbstractCounter>)
        public: static void sphSystem::statistics::StatisticsHelper::Configure(bool, long)
        public: static void sphSystem::statistics::StatisticsHelper::Dispose(void)
        public: static void sphSystem::statistics::StatisticsHelper::RemoveCounter(class sophisTools::base::RefCountHandle<class sphSystem::statistics::AbstractCounter>)
        // Variables:
        private: static char const *const sphSystem::statistics::StatisticsHelper::__CLASS__
      public:
      };


    };

    namespace/*or class/struct?*/ thread
    {
      // Nested containers:
      class/*or struct*/ ActionAlreadyExists : public ExceptionBase
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: base::base::ExceptionBase
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ ActionInProgress : public ExceptionBase
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Corresponding base: base::base::ExceptionBase
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ BasicPoolAllocator
      {
        // Functions:
        protected: sphSystem::thread::BasicPoolAllocator::BasicPoolAllocator(unsigned __int64, class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationProvider<struct sophis::tools::util::Worker::JobTerminatedEvent>>)
        public: void sphSystem::thread::BasicPoolAllocator::`vbase dtor'(void)
        protected: class boost::recursive_mutex & sphSystem::thread::BasicPoolAllocator::getMutex(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerAllocator> sphSystem::thread::BasicPoolAllocator::create(unsigned __int64, class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationProvider<struct sophis::tools::util::Worker::JobTerminatedEvent>>)
        // Variables:
        private: static char const *sphSystem::thread::BasicPoolAllocator::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::BasicPoolAllocator::~BasicPoolAllocator(void)
        public: virtual void sphSystem::thread::BasicPoolAllocator::_add_ref(void)
        public: virtual void sphSystem::thread::BasicPoolAllocator::_remove_ref(void)
        public: virtual class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> sphSystem::thread::BasicPoolAllocator::allocate(void)
        protected: virtual void sphSystem::thread::BasicPoolAllocator::createWorkForce(void)
        public: virtual void sphSystem::thread::BasicPoolAllocator::dispose(void)
        public: virtual long sphSystem::thread::BasicPoolAllocator::getRef(void) const
        protected: virtual class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerList> sphSystem::thread::BasicPoolAllocator::getWorkForce(void)
        public: virtual bool sphSystem::thread::BasicPoolAllocator::notify(struct sophis::tools::util::Worker::JobTerminatedEvent &)
        public: virtual void sphSystem::thread::BasicPoolAllocator::release(class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>)
        public: virtual bool sphSystem::thread::BasicPoolAllocator::visitActiveWorkers(class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerVisitor>)
#endif

        // VFTable. Offset=0, Size=10, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::thread::BasicPoolAllocator::_add_ref(void); // 0
        public: virtual void sphSystem::thread::BasicPoolAllocator::_remove_ref(void); // 1
        public: virtual long sphSystem::thread::BasicPoolAllocator::getRef(void) const; // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> sphSystem::thread::BasicPoolAllocator::allocate(void); // 4
        public: virtual bool sphSystem::thread::BasicPoolAllocator::visitActiveWorkers(class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerVisitor>); // 5
        public: virtual void sphSystem::thread::BasicPoolAllocator::release(class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>); // 6
        public: virtual void sphSystem::thread::BasicPoolAllocator::dispose(void); // 7
        protected: virtual void sphSystem::thread::BasicPoolAllocator::createWorkForce(void); // 8
        protected: virtual class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerList> sphSystem::thread::BasicPoolAllocator::getWorkForce(void); // 9
        // VFTable with 0 offset end

        // VFTable. Offset=8, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual bool sphSystem::thread::BasicPoolAllocator::notify(struct sophis::tools::util::Worker::JobTerminatedEvent &); // 0
#endif
        // VFTable with 8 offset end

        // VFTable. Offset=88, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::thread::BasicPoolAllocator::~BasicPoolAllocator(void); // 0
        public: virtual void unknown_vf_88_1(void); // 1
        public: virtual void unknown_vf_88_2(void); // 2
        public: virtual void unknown_vf_88_3(void); // 3
#endif
        // VFTable with 88 offset end

      public:
      };

      class/*or struct*/ BasicWorker
      {
        // Functions:
        public: sphSystem::thread::BasicWorker::BasicWorker(class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationProvider<struct sophis::tools::util::Worker::JobTerminatedEvent>>)
        public: sphSystem::thread::BasicWorker::BasicWorker(void)
        public: void sphSystem::thread::BasicWorker::`vbase dtor'(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> sphSystem::thread::BasicWorker::create(class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationProvider<struct sophis::tools::util::Worker::JobTerminatedEvent>>)
        public: static class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> sphSystem::thread::BasicWorker::create(void)
        // Variables:
        private: static char const *sphSystem::thread::BasicWorker::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::BasicWorker::~BasicWorker(void)
        public: virtual void sphSystem::thread::BasicWorker::_add_ref(void)
        public: virtual void sphSystem::thread::BasicWorker::_remove_ref(void)
        public: virtual void sphSystem::thread::BasicWorker::addListener(class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>)
        public: virtual void sphSystem::thread::BasicWorker::clean(void)
        public: virtual void sphSystem::thread::BasicWorker::doRun(void)
        public: virtual unsigned __int64 sphSystem::thread::BasicWorker::getLoad(void)
        public: virtual long sphSystem::thread::BasicWorker::getRef(void) const
        public: virtual bool sphSystem::thread::BasicWorker::isRunning(void)
        protected: virtual void sphSystem::thread::BasicWorker::jobProcessed(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>)
        protected: virtual void sphSystem::thread::BasicWorker::process(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, unsigned long)
        public: virtual bool sphSystem::thread::BasicWorker::remove(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>)
        public: virtual void sphSystem::thread::BasicWorker::requestExit(void)
        public: virtual void sphSystem::thread::BasicWorker::run(void)
        public: virtual void sphSystem::thread::BasicWorker::stop(bool)
        public: virtual void sphSystem::thread::BasicWorker::submit(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, unsigned long)
        public: virtual bool sphSystem::thread::BasicWorker::visit(class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerVisitor>)
#endif

        // VFTable. Offset=0, Size=14, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::thread::BasicWorker::_add_ref(void); // 0
        public: virtual void sphSystem::thread::BasicWorker::_remove_ref(void); // 1
        public: virtual long sphSystem::thread::BasicWorker::getRef(void) const; // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void sphSystem::thread::BasicWorker::run(void); // 4
        public: virtual void sphSystem::thread::BasicWorker::stop(bool); // 5
        public: virtual bool sphSystem::thread::BasicWorker::isRunning(void); // 6
        public: virtual bool sphSystem::thread::BasicWorker::visit(class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerVisitor>); // 7
        public: virtual void sphSystem::thread::BasicWorker::submit(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, unsigned long); // 8
        public: virtual bool sphSystem::thread::BasicWorker::remove(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>); // 9
        public: virtual unsigned __int64 sphSystem::thread::BasicWorker::getLoad(void); // 10
        public: virtual void sphSystem::thread::BasicWorker::addListener(class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>); // 11
        protected: virtual void sphSystem::thread::BasicWorker::process(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, unsigned long); // 12
        protected: virtual void sphSystem::thread::BasicWorker::jobProcessed(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>); // 13
        // VFTable with 0 offset end

        // VFTable. Offset=8, Size=10, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::thread::BasicWorker::~BasicWorker(void); // 0
        public: virtual void unknown_vf_8_1(void); // 1
        public: virtual void unknown_vf_8_2(void); // 2
        public: virtual void unknown_vf_8_3(void); // 3
        public: virtual void unknown_vf_8_4(void); // 4
        public: virtual void unknown_vf_8_5(void); // 5
        public: virtual void unknown_vf_8_6(void); // 6
        public: virtual void sphSystem::thread::BasicWorker::doRun(void); // 7
        public: virtual void sphSystem::thread::BasicWorker::clean(void); // 8
        public: virtual void sphSystem::thread::BasicWorker::requestExit(void); // 9
#endif
        // VFTable with 8 offset end

        // VFTable. Offset=168, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::thread::BasicWorker::~BasicWorker(void); // 0
        public: virtual void unknown_vf_168_1(void); // 1
        public: virtual void unknown_vf_168_2(void); // 2
        public: virtual void unknown_vf_168_3(void); // 3
#endif
        // VFTable with 168 offset end

      public:
      };

      class/*or struct*/ CapturedException
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=112, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_112_0(void); // 0
        public: virtual void unknown_vf_112_1(void); // 1
        public: virtual void unknown_vf_112_2(void); // 2
        public: virtual void unknown_vf_112_3(void); // 3
#endif
        // VFTable with 112 offset end

      public:
      };

      class/*or struct*/ DailyActionThread : public PollingThread
      {
        // Functions:
        public: sphSystem::thread::DailyActionThread::DailyActionThread(class sophisTools::time::Time24 const &, char const *)
        // Variables:
        private: static char const *sphSystem::thread::DailyActionThread::__CLASSNAME__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::DailyActionThread::~DailyActionThread(void)
        protected: virtual void sphSystem::thread::DailyActionThread::performJob(void)
#endif

        // VFTable. Offset=0, Size=12, Start=11
        // Corresponding base: thread::thread::PollingThread
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::thread::DailyActionThread::~DailyActionThread(void); // 0
        // Overrides:
        protected: virtual void sphSystem::thread::DailyActionThread::performJob(void) override; // 10
        // Added virtual functions:
        public: virtual void unknown_vf_0_11(void) = 0; // 11
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ DataModelCapturedException
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        // VFTable with 0 offset end

        // VFTable. Offset=112, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_112_0(void); // 0
        public: virtual void unknown_vf_112_1(void); // 1
        public: virtual void unknown_vf_112_2(void); // 2
        public: virtual void unknown_vf_112_3(void); // 3
#endif
        // VFTable with 112 offset end

      public:
      };

      class/*or struct*/ DataModelExceptionWrapper : public DataModelException
      {
        // VFTable. Offset=0, Size=2, Start=0
        // Corresponding base: dataModel::dataModel::dataModel::DataModelException
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ ExceptionBaseWrapper : public ExceptionBase
      {
        // VFTable. Offset=0, Size=2, Start=0
        // Corresponding base: base::base::ExceptionBase
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ LoopThread : public PollingThread
      {
      public:
        // Enumerations:
        enum State : int {
        };

        // Functions:
        public: sphSystem::thread::LoopThread::LoopThread(class std::shared_ptr<class sphSystem::thread::RunnableBase>)
        public: sphSystem::thread::LoopThread::LoopThread(class std::shared_ptr<class sphSystem::thread::RunnableBase>, char const *)
        public: sphSystem::thread::LoopThread::LoopThread(class std::shared_ptr<class sphSystem::thread::RunnableBase>, char const *, long)
        // Variables:
        private: static char const *sphSystem::thread::LoopThread::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::LoopThread::~LoopThread(void)
        public: virtual enum sphSystem::thread::LoopThread::State sphSystem::thread::LoopThread::getState(void) const
        public: virtual void sphSystem::thread::LoopThread::performJob(void)
        public: virtual void sphSystem::thread::LoopThread::start(void)
        public: virtual void sphSystem::thread::LoopThread::start(bool)
        public: virtual void sphSystem::thread::LoopThread::stop(void)
        public: virtual void sphSystem::thread::LoopThread::stop(bool)
#endif

        // VFTable. Offset=0, Size=16, Start=11
        // Corresponding base: thread::thread::PollingThread
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::thread::LoopThread::~LoopThread(void); // 0
        // Overrides:
        public: virtual void sphSystem::thread::LoopThread::performJob(void) override; // 10
        // Added virtual functions:
        public: virtual void sphSystem::thread::LoopThread::start(bool); // 11
        public: virtual void sphSystem::thread::LoopThread::start(void); // 12
        public: virtual void sphSystem::thread::LoopThread::stop(bool); // 13
        public: virtual void sphSystem::thread::LoopThread::stop(void); // 14
        public: virtual enum sphSystem::thread::LoopThread::State sphSystem::thread::LoopThread::getState(void) const; // 15
        // VFTable with 0 offset end

      public:
      };

      class MultiActionThread : public PollingThread
      {
        // Functions:
        protected: sphSystem::thread::MultiActionThread::MultiActionThread(class std::map<class sophisTools::time::Time24, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>, struct sphSystem::thread::less_Time24, class std::allocator<struct std::pair<class sophisTools::time::Time24 const, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>>>>, char const *, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>, bool, class sophisTools::time::Time24 const &, __int64, bool)
        protected: bool sphSystem::thread::MultiActionThread::CalculateNextDelay(void)
        public: void sphSystem::thread::MultiActionThread::addAction(class sophisTools::time::Time24 const &, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>, bool)
        public: void sphSystem::thread::MultiActionThread::awakeWithAction(class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>)
        protected: void sphSystem::thread::MultiActionThread::doWork(void)
        public: class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction> const sphSystem::thread::MultiActionThread::getAction(class sophisTools::time::Time24 const &)
        public: void sphSystem::thread::MultiActionThread::removeAction(class sophisTools::time::Time24 const &)
        // Static functions:
        public: static class std::shared_ptr<class sphSystem::thread::MultiActionThread> sphSystem::thread::MultiActionThread::create(class std::map<class sophisTools::time::Time24, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>, struct sphSystem::thread::less_Time24, class std::allocator<struct std::pair<class sophisTools::time::Time24 const, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>>>>, char const *, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>, bool)
        // Variables:
        private: static char const *sphSystem::thread::MultiActionThread::__CLASSNAME__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::MultiActionThread::~MultiActionThread(void)
        public: virtual void sphSystem::thread::MultiActionThread::awake(void)
        protected: virtual void sphSystem::thread::MultiActionThread::performJob(void)
#endif

        // VFTable. Offset=0, Size=11, Start=11
        // Corresponding base: thread::thread::PollingThread
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::thread::MultiActionThread::~MultiActionThread(void); // 0
        // Overrides:
        public: virtual void sphSystem::thread::MultiActionThread::awake(void) override; // 2
        protected: virtual void sphSystem::thread::MultiActionThread::performJob(void) override; // 10
        // VFTable with 0 offset end

      public:
      };

      class PollingThread
      {
      public:
        // Nested containers:
        class/*or struct*/ CannotLockCleanMutextException : public exception
        {
          // VFTable. Offset=0, Size=2, Start=2
          // Corresponding base: std::exception
          // Owner: SophisSystem.dll
          // VFTable with 0 offset end

        public:
        };


        // Functions:
        public: sphSystem::thread::PollingThread::PollingThread(char const *, long)
        public: void sphSystem::thread::PollingThread::awake(bool)
        public: class boost::thread::id sphSystem::thread::PollingThread::getId(void) const
        protected: class boost::recursive_mutex & sphSystem::thread::PollingThread::getMutex(void)
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::thread::PollingThread::getName(void) const
        public: bool sphSystem::thread::PollingThread::isAlive(void) const
        public: void sphSystem::thread::PollingThread::join(long)
        public: void sphSystem::thread::PollingThread::join(void)
        public: void sphSystem::thread::PollingThread::resume(void)
        public: void sphSystem::thread::PollingThread::setName(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
        protected: void sphSystem::thread::PollingThread::setSleepDelay(long)
        public: void sphSystem::thread::PollingThread::start(void)
        public: void sphSystem::thread::PollingThread::suspend(void)
        // Static functions:
        private: static void sphSystem::thread::PollingThread::Run(void *)
        public: static void sphSystem::thread::PollingThread::dispose(void)
        public: static void sphSystem::thread::PollingThread::init(int, char **)
        // Variables:
        private: static char const *sphSystem::thread::PollingThread::__CLASSNAME__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::PollingThread::~PollingThread(void)
        public: virtual void sphSystem::thread::PollingThread::awake(void)
        public: virtual void sphSystem::thread::PollingThread::cancel(void)
        public: virtual void sphSystem::thread::PollingThread::changeSleepDelay(long)
        public: virtual void sphSystem::thread::PollingThread::clean(void)
        public: virtual long sphSystem::thread::PollingThread::getSleepDelay(void)
        protected: virtual bool sphSystem::thread::PollingThread::isExitRequested(void) const
        public: virtual bool sphSystem::thread::PollingThread::isReallyDead(void)
        protected: virtual void sphSystem::thread::PollingThread::requestExit(void)
        public: virtual void sphSystem::thread::PollingThread::run(void)
#endif

        // VFTable. Offset=0, Size=11, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::thread::PollingThread::~PollingThread(void); // 0
        public: virtual void sphSystem::thread::PollingThread::cancel(void); // 1
        public: virtual void sphSystem::thread::PollingThread::awake(void); // 2
        public: virtual void sphSystem::thread::PollingThread::run(void); // 3
        public: virtual bool sphSystem::thread::PollingThread::isReallyDead(void); // 4
        public: virtual void sphSystem::thread::PollingThread::changeSleepDelay(long); // 5
        public: virtual long sphSystem::thread::PollingThread::getSleepDelay(void); // 6
        public: virtual void sphSystem::thread::PollingThread::clean(void); // 7
        protected: virtual bool sphSystem::thread::PollingThread::isExitRequested(void) const; // 8
        protected: virtual void sphSystem::thread::PollingThread::requestExit(void); // 9
        public: virtual void sphSystem::server::ProgramExitWatcherThread::performJob(void) = 0; // 10 (server::server::ProgramExitWatcherThread)
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ PrioritizedJobList
      {
        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class/*or struct*/ ProcessingException
      {
        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void) = 0; // 0
        // VFTable with 0 offset end

        // VFTable. Offset=32, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_32_0(void); // 0
        public: virtual void unknown_vf_32_1(void); // 1
        public: virtual void unknown_vf_32_2(void); // 2
        public: virtual void unknown_vf_32_3(void); // 3
#endif
        // VFTable with 32 offset end

      public:
      };

      class ReadSynchronized
      {
        // Functions:
        public: sphSystem::thread::ReadSynchronized::ReadSynchronized(class sphSystem::thread::ReadWriteMonitor &)
        public: sphSystem::thread::ReadSynchronized::~ReadSynchronized(void)
        public: class sphSystem::thread::ReadSynchronized & sphSystem::thread::ReadSynchronized::operator=(class sphSystem::thread::ReadSynchronized const &)
      public:
      };

      class ReadWriteMonitor
      {
        // Functions:
        public: sphSystem::thread::ReadWriteMonitor::ReadWriteMonitor(class sphSystem::thread::ReadWriteMonitor const &)
        public: sphSystem::thread::ReadWriteMonitor::ReadWriteMonitor(char const *, long)
        public: class sphSystem::thread::ReadWriteMonitor & sphSystem::thread::ReadWriteMonitor::operator=(class sphSystem::thread::ReadWriteMonitor const &)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::ReadWriteMonitor::~ReadWriteMonitor(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::thread::ReadWriteMonitor::~ReadWriteMonitor(void); // 0
        // VFTable with 0 offset end

      public:
      };

      class Runnable
      {
        // Functions:
        public: sphSystem::thread::Runnable::Runnable(void)
        public: class boost::recursive_mutex & sphSystem::thread::Runnable::getMutex(void)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::Runnable::~Runnable(void)
        public: virtual void sphSystem::thread::Runnable::_add_ref(void)
        public: virtual void sphSystem::thread::Runnable::_remove_ref(void)
        public: virtual long sphSystem::thread::Runnable::getRef(void) const
#endif

        // VFTable. Offset=0, Size=7, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::thread::Runnable::_add_ref(void); // 0
        public: virtual void sphSystem::thread::Runnable::_remove_ref(void); // 1
        public: virtual long sphSystem::thread::Runnable::getRef(void) const; // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void) = 0; // 4
        public: virtual void unknown_vf_0_5(void) = 0; // 5
        public: virtual void unknown_vf_0_6(void) = 0; // 6
        // VFTable with 0 offset end

        // VFTable. Offset=56, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::thread::Runnable::~Runnable(void); // 0
        public: virtual void unknown_vf_56_1(void); // 1
        public: virtual void unknown_vf_56_2(void); // 2
        public: virtual void unknown_vf_56_3(void); // 3
#endif
        // VFTable with 56 offset end

      public:
      };

      class/*or struct*/ RunnableAdapter
      {
        // Functions:
        public: sphSystem::thread::RunnableAdapter::RunnableAdapter(class sophisTools::base::RefCountHandle<class sphSystem::thread::Runnable>)
        public: void sphSystem::thread::RunnableAdapter::`vbase dtor'(void)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::RunnableAdapter::~RunnableAdapter(void)
        public: virtual void sphSystem::thread::RunnableAdapter::_add_ref(void)
        public: virtual void sphSystem::thread::RunnableAdapter::_remove_ref(void)
        public: virtual long sphSystem::thread::RunnableAdapter::getRef(void) const
        public: virtual bool sphSystem::thread::RunnableAdapter::isRunning(void)
        public: virtual void sphSystem::thread::RunnableAdapter::run(void)
        public: virtual void sphSystem::thread::RunnableAdapter::stop(bool)
#endif

        // VFTable. Offset=0, Size=7, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::thread::RunnableAdapter::_add_ref(void); // 0
        public: virtual void sphSystem::thread::RunnableAdapter::_remove_ref(void); // 1
        public: virtual long sphSystem::thread::RunnableAdapter::getRef(void) const; // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void sphSystem::thread::RunnableAdapter::run(void); // 4
        public: virtual void sphSystem::thread::RunnableAdapter::stop(bool); // 5
        public: virtual bool sphSystem::thread::RunnableAdapter::isRunning(void); // 6
        // VFTable with 0 offset end

        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::thread::RunnableAdapter::~RunnableAdapter(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class RunnableBase
      {
        // Functions:
        public: sphSystem::thread::RunnableBase::RunnableBase(class sphSystem::thread::RunnableBase const &)
        public: sphSystem::thread::RunnableBase::RunnableBase(void)
        public: class sphSystem::thread::RunnableBase & sphSystem::thread::RunnableBase::operator=(class sphSystem::thread::RunnableBase const &)
        public: void sphSystem::thread::RunnableBase::run(void)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::RunnableBase::~RunnableBase(void)
#endif

        // VFTable. Offset=0, Size=2, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::thread::RunnableBase::~RunnableBase(void); // 0
        public: virtual void unknown_vf_0_1(void) = 0; // 1
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ RunnableControlThread : public PollingThread
      {
        // Functions:
        public: sphSystem::thread::RunnableControlThread::RunnableControlThread(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, char const *, class boost::recursive_mutex &, class boost::condition_variable_any &)
        protected: class boost::recursive_mutex & sphSystem::thread::RunnableControlThread::getFinishMutex(void)
        // Variables:
        private: static char const *sphSystem::thread::RunnableControlThread::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::RunnableControlThread::~RunnableControlThread(void)
        public: virtual void sphSystem::thread::RunnableControlThread::cancel(void)
        public: virtual void sphSystem::thread::RunnableControlThread::clean(void)
        public: virtual void sphSystem::thread::RunnableControlThread::performJob(void)
#endif

        // VFTable. Offset=0, Size=11, Start=11
        // Corresponding base: thread::thread::PollingThread
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::thread::RunnableControlThread::~RunnableControlThread(void); // 0
        // Overrides:
        public: virtual void sphSystem::thread::RunnableControlThread::cancel(void) override; // 1
        public: virtual void sphSystem::thread::RunnableControlThread::clean(void) override; // 7
        public: virtual void sphSystem::thread::RunnableControlThread::performJob(void) override; // 10
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ RunnableThread : public PollingThread
      {
        // Functions:
        public: sphSystem::thread::RunnableThread::RunnableThread(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, char const *, class boost::recursive_mutex &, class boost::condition_variable_any &)
        public: sphSystem::thread::RunnableThread::RunnableThread(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, char const *, class boost::recursive_mutex &, class boost::condition_variable_any &, __int64)
        public: void sphSystem::thread::RunnableThread::stopRunnable(bool)
        // Variables:
        private: static char const *sphSystem::thread::RunnableThread::__CLASSNAME__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::RunnableThread::~RunnableThread(void)
        public: virtual void sphSystem::thread::RunnableThread::cancel(void)
        public: virtual void sphSystem::thread::RunnableThread::clean(void)
        public: virtual void sphSystem::thread::RunnableThread::performJob(void)
        public: virtual void sphSystem::thread::RunnableThread::runLoopTerminated(void)
#endif

        // VFTable. Offset=0, Size=12, Start=11
        // Corresponding base: thread::thread::PollingThread
        // Owner: SophisSystem.dll
        // public: virtual sphSystem::thread::RunnableThread::~RunnableThread(void); // 0
        // Overrides:
        public: virtual void sphSystem::thread::RunnableThread::cancel(void) override; // 1
        public: virtual void sphSystem::thread::RunnableThread::clean(void) override; // 7
        public: virtual void sphSystem::thread::RunnableThread::performJob(void) override; // 10
        // Added virtual functions:
        public: virtual void sphSystem::thread::RunnableThread::runLoopTerminated(void); // 11
        // VFTable with 0 offset end

      public:
      };

      class RunnableWorkerThread : public RunnableThread
      {
        // VFTable. Offset=0, Size=12, Start=12
        // Corresponding base: thread::thread::RunnableThread
        // Owner: SophisSystem.dll
        // VFTable with 0 offset end

      public:
      };

      class/*or struct*/ SafeBasicRunnable
      {
        // Functions:
        public: sphSystem::thread::SafeBasicRunnable::SafeBasicRunnable(void)
        public: class boost::recursive_mutex & sphSystem::thread::SafeBasicRunnable::getMutex(void)
        public: void sphSystem::thread::SafeBasicRunnable::join(void)
        // Variables:
        private: static char const *sphSystem::thread::SafeBasicRunnable::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::SafeBasicRunnable::~SafeBasicRunnable(void)
        public: virtual void sphSystem::thread::SafeBasicRunnable::run(void)
        public: virtual void sphSystem::thread::SafeBasicRunnable::stop(bool)
#endif

        // VFTable. Offset=0, Size=10, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::thread::SafeBasicRunnable::~SafeBasicRunnable(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void sphSystem::thread::SafeBasicRunnable::run(void); // 4
        public: virtual void sphSystem::thread::SafeBasicRunnable::stop(bool); // 5
        public: virtual void unknown_vf_0_6(void); // 6
        public: virtual void unknown_vf_0_7(void) = 0; // 7
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual void unknown_vf_0_9(void); // 9
        // VFTable with 0 offset end

        // VFTable. Offset=48, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::thread::SafeBasicRunnable::~SafeBasicRunnable(void); // 0
        public: virtual void unknown_vf_48_1(void); // 1
        public: virtual void unknown_vf_48_2(void); // 2
        public: virtual void unknown_vf_48_3(void); // 3
#endif
        // VFTable with 48 offset end

      public:
      };

      class ScheduledAction
      {
        // Functions:
        public: sphSystem::thread::ScheduledAction::ScheduledAction(char const *)
        public: char const * sphSystem::thread::ScheduledAction::getName(void)
        // Variables:
        private: static char const *sphSystem::thread::ScheduledAction::__CLASSNAME__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::ScheduledAction::~ScheduledAction(void)
#endif

        // VFTable. Offset=0, Size=1, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::thread::ScheduledAction::~ScheduledAction(void) = 0; // 0
        // VFTable with 0 offset end

        // VFTable. Offset=88, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::thread::ScheduledAction::~ScheduledAction(void); // 0
        public: virtual void unknown_vf_88_1(void); // 1
        public: virtual void unknown_vf_88_2(void); // 2
        public: virtual void unknown_vf_88_3(void); // 3
#endif
        // VFTable with 88 offset end

      public:
      };

      class/*or struct*/ ThreadHelper
      {
        // Static functions:
        protected: static void sphSystem::thread::ThreadHelper::doStop(class sphSystem::thread::PollingThread *)
      public:
      };

      class ThreadPool
      {
        // Functions:
        protected: sphSystem::thread::ThreadPool::ThreadPool(class sophisTools::base::RefCountHandle<class sphSystem::thread::WorkerManager>)
        public: void sphSystem::thread::ThreadPool::`vbase dtor'(void)
        public: void sphSystem::thread::ThreadPool::clearListeners(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sphSystem::thread::ThreadPool> sphSystem::thread::ThreadPool::create(unsigned __int64)
        // Variables:
        private: static char const *sphSystem::thread::ThreadPool::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::ThreadPool::~ThreadPool(void)
        public: virtual void sphSystem::thread::ThreadPool::_add_ref(void)
        public: virtual void sphSystem::thread::ThreadPool::_remove_ref(void)
        public: virtual void sphSystem::thread::ThreadPool::addListener(class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>)
        public: virtual unsigned __int64 sphSystem::thread::ThreadPool::getLoad(void)
        public: virtual long sphSystem::thread::ThreadPool::getRef(void) const
        public: virtual bool sphSystem::thread::ThreadPool::isRunning(void)
        public: virtual bool sphSystem::thread::ThreadPool::remove(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>)
        public: virtual void sphSystem::thread::ThreadPool::run(void)
        public: virtual void sphSystem::thread::ThreadPool::stop(bool)
        public: virtual void sphSystem::thread::ThreadPool::submit(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, unsigned long)
        public: virtual bool sphSystem::thread::ThreadPool::visit(class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerVisitor>)
#endif

        // VFTable. Offset=0, Size=12, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::thread::ThreadPool::_add_ref(void); // 0
        public: virtual void sphSystem::thread::ThreadPool::_remove_ref(void); // 1
        public: virtual long sphSystem::thread::ThreadPool::getRef(void) const; // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void sphSystem::thread::ThreadPool::run(void); // 4
        public: virtual void sphSystem::thread::ThreadPool::stop(bool); // 5
        public: virtual bool sphSystem::thread::ThreadPool::isRunning(void); // 6
        public: virtual bool sphSystem::thread::ThreadPool::visit(class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerVisitor>); // 7
        public: virtual void sphSystem::thread::ThreadPool::submit(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, unsigned long); // 8
        public: virtual bool sphSystem::thread::ThreadPool::remove(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>); // 9
        public: virtual unsigned __int64 sphSystem::thread::ThreadPool::getLoad(void); // 10
        public: virtual void sphSystem::thread::ThreadPool::addListener(class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>); // 11
        // VFTable with 0 offset end

        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::thread::ThreadPool::~ThreadPool(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class/*or struct*/ ThreadedWorker
      {
        // Functions:
        protected: sphSystem::thread::ThreadedWorker::ThreadedWorker(class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>)
        public: void sphSystem::thread::ThreadedWorker::`vbase dtor'(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> sphSystem::thread::ThreadedWorker::create(class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>)
        // Variables:
        private: static char const *sphSystem::thread::ThreadedWorker::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::ThreadedWorker::~ThreadedWorker(void)
        public: virtual void sphSystem::thread::ThreadedWorker::_add_ref(void)
        public: virtual void sphSystem::thread::ThreadedWorker::_remove_ref(void)
        public: virtual void sphSystem::thread::ThreadedWorker::addListener(class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>)
        public: virtual unsigned __int64 sphSystem::thread::ThreadedWorker::getLoad(void)
        public: virtual long sphSystem::thread::ThreadedWorker::getRef(void) const
        public: virtual bool sphSystem::thread::ThreadedWorker::isRunning(void)
        public: virtual bool sphSystem::thread::ThreadedWorker::remove(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>)
        public: virtual void sphSystem::thread::ThreadedWorker::run(void)
        public: virtual void sphSystem::thread::ThreadedWorker::stop(bool)
        public: virtual void sphSystem::thread::ThreadedWorker::submit(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, unsigned long)
        public: virtual bool sphSystem::thread::ThreadedWorker::visit(class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerVisitor>)
#endif

        // VFTable. Offset=0, Size=12, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void sphSystem::thread::ThreadedWorker::_add_ref(void); // 0
        public: virtual void sphSystem::thread::ThreadedWorker::_remove_ref(void); // 1
        public: virtual long sphSystem::thread::ThreadedWorker::getRef(void) const; // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void sphSystem::thread::ThreadedWorker::run(void); // 4
        public: virtual void sphSystem::thread::ThreadedWorker::stop(bool); // 5
        public: virtual bool sphSystem::thread::ThreadedWorker::isRunning(void); // 6
        public: virtual bool sphSystem::thread::ThreadedWorker::visit(class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerVisitor>); // 7
        public: virtual void sphSystem::thread::ThreadedWorker::submit(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, unsigned long); // 8
        public: virtual bool sphSystem::thread::ThreadedWorker::remove(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>); // 9
        public: virtual unsigned __int64 sphSystem::thread::ThreadedWorker::getLoad(void); // 10
        public: virtual void sphSystem::thread::ThreadedWorker::addListener(class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>); // 11
        // VFTable with 0 offset end

        // VFTable. Offset=136, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::thread::ThreadedWorker::~ThreadedWorker(void); // 0
        public: virtual void unknown_vf_136_1(void); // 1
        public: virtual void unknown_vf_136_2(void); // 2
        public: virtual void unknown_vf_136_3(void); // 3
#endif
        // VFTable with 136 offset end

      public:
      };

      class WorkerManager
      {
        // Functions:
        protected: sphSystem::thread::WorkerManager::WorkerManager(class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerAllocator>, class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationProvider<struct sophis::tools::util::Worker::JobTerminatedEvent>>)
        public: void sphSystem::thread::WorkerManager::`vbase dtor'(void)
        public: void sphSystem::thread::WorkerManager::clearListeners(void)
        // Static functions:
        public: static class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> sphSystem::thread::WorkerManager::create(class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerAllocator>, class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationProvider<struct sophis::tools::util::Worker::JobTerminatedEvent>>)
        // Variables:
        private: static char const *sphSystem::thread::WorkerManager::__CLASS__
#if 0 // All found virtual functions names:
        public: virtual sphSystem::thread::WorkerManager::~WorkerManager(void)
        public: virtual void sphSystem::thread::WorkerManager::addListener(class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>)
        public: virtual void sphSystem::thread::WorkerManager::clean(void)
        public: virtual void sphSystem::thread::WorkerManager::doRun(void)
        protected: virtual void sphSystem::thread::WorkerManager::process(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, unsigned long)
        public: virtual bool sphSystem::thread::WorkerManager::remove(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>)
        public: virtual void sphSystem::thread::WorkerManager::requestExit(void)
        public: virtual bool sphSystem::thread::WorkerManager::visit(class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerVisitor>)
#endif

        // VFTable. Offset=0, Size=14, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual sphSystem::thread::WorkerManager::~WorkerManager(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void); // 4
        public: virtual void unknown_vf_0_5(void); // 5
        public: virtual void unknown_vf_0_6(void); // 6
        public: virtual bool sphSystem::thread::WorkerManager::visit(class sophisTools::base::RefCountHandle<class sophis::tools::util::WorkerVisitor>); // 7
        public: virtual void unknown_vf_0_8(void); // 8
        public: virtual bool sphSystem::thread::WorkerManager::remove(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>); // 9
        public: virtual void unknown_vf_0_10(void); // 10
        public: virtual void sphSystem::thread::WorkerManager::addListener(class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>); // 11
        protected: virtual void sphSystem::thread::WorkerManager::process(class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, unsigned long); // 12
        public: virtual void unknown_vf_0_13(void); // 13
        // VFTable with 0 offset end

        // VFTable. Offset=8, Size=10, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::thread::WorkerManager::~WorkerManager(void); // 0
        public: virtual void unknown_vf_8_1(void); // 1
        public: virtual void unknown_vf_8_2(void); // 2
        public: virtual void unknown_vf_8_3(void); // 3
        public: virtual void unknown_vf_8_4(void); // 4
        public: virtual void unknown_vf_8_5(void); // 5
        public: virtual void unknown_vf_8_6(void); // 6
        public: virtual void sphSystem::thread::WorkerManager::doRun(void); // 7
        public: virtual void sphSystem::thread::WorkerManager::clean(void); // 8
        public: virtual void sphSystem::thread::WorkerManager::requestExit(void); // 9
#endif
        // VFTable with 8 offset end

        // VFTable. Offset=184, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::thread::WorkerManager::~WorkerManager(void); // 0
        public: virtual void unknown_vf_184_1(void); // 1
        public: virtual void unknown_vf_184_2(void); // 2
        public: virtual void unknown_vf_184_3(void); // 3
#endif
        // VFTable with 184 offset end

      public:
      };

      class/*or struct*/ WorkerVisitorJobRemover
      {
        // VFTable. Offset=0, Size=5, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void); // 4
        // VFTable with 0 offset end

        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class/*or struct*/ WorkerVisitorStopper
      {
        // VFTable. Offset=0, Size=5, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        public: virtual void unknown_vf_0_4(void); // 4
        // VFTable with 0 offset end

        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      class WriteSynchronized
      {
        // Functions:
        public: sphSystem::thread::WriteSynchronized::WriteSynchronized(class sphSystem::thread::ReadWriteMonitor &)
        public: sphSystem::thread::WriteSynchronized::~WriteSynchronized(void)
        public: class sphSystem::thread::WriteSynchronized & sphSystem::thread::WriteSynchronized::operator=(class sphSystem::thread::WriteSynchronized const &)
      public:
      };

      struct less_Time24
      {
      public:
      };


    };

    namespace/*or class/struct?*/ util
    {
      // Nested containers:
      class/*or struct*/ CounterMap
      {
        // VFTable. Offset=40, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_40_0(void); // 0
        public: virtual void unknown_vf_40_1(void); // 1
        public: virtual void unknown_vf_40_2(void); // 2
        public: virtual void unknown_vf_40_3(void); // 3
#endif
        // VFTable with 40 offset end

      public:
      };

      template<typename T1      >
      class/*or struct*/ SafeNotificationProvider
      {
      public:
      };
#if 0 // Instances:
// <struct sophis::tools::util::Worker::JobTerminatedEvent>
#if 0
      template<>
      class/*or struct*/ SafeNotificationProvider<struct sophis::tools::util::Worker::JobTerminatedEvent>
      {
        // VFTable. Offset=0, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
        public: virtual void unknown_vf_0_0(void); // 0
        public: virtual void unknown_vf_0_1(void); // 1
        public: virtual void unknown_vf_0_2(void); // 2
        public: virtual void unknown_vf_0_3(void); // 3
        // VFTable with 0 offset end

        // VFTable. Offset=64, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual void unknown_vf_64_0(void); // 0
        public: virtual void unknown_vf_64_1(void); // 1
        public: virtual void unknown_vf_64_2(void); // 2
        public: virtual void unknown_vf_64_3(void); // 3
#endif
        // VFTable with 64 offset end

      public:
      };
#endif
#endif


      class UIDGenerator
      {
        // Functions:
        protected: sphSystem::util::UIDGenerator::UIDGenerator(void)
        public: void sphSystem::util::UIDGenerator::`vbase dtor'(void)
        public: void sphSystem::util::UIDGenerator::disposeFromContext(void)
        public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> sphSystem::util::UIDGenerator::generateUID(char const *)
#if 0 // All found virtual functions names:
        public: virtual sphSystem::util::UIDGenerator::~UIDGenerator(void)
#endif

        // VFTable. Offset=32, Size=4, Start=0
        // Owner: SophisSystem.dll
        // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
        public: virtual sphSystem::util::UIDGenerator::~UIDGenerator(void); // 0
        public: virtual void unknown_vf_32_1(void); // 1
        public: virtual void unknown_vf_32_2(void); // 2
        public: virtual void unknown_vf_32_3(void); // 3
#endif
        // VFTable with 32 offset end

      public:
      };

      class UIDGeneratorSingleton
      {
        // Functions:
        public: class sphSystem::util::UIDGeneratorSingleton & sphSystem::util::UIDGeneratorSingleton::operator=(class sphSystem::util::UIDGeneratorSingleton &&)
        public: class sphSystem::util::UIDGeneratorSingleton & sphSystem::util::UIDGeneratorSingleton::operator=(class sphSystem::util::UIDGeneratorSingleton const &)
        // Static functions:
        public: static void sphSystem::util::UIDGeneratorSingleton::dispose(void)
        public: static void sphSystem::util::UIDGeneratorSingleton::disposeCurrentGenerator(void)
        public: static class sophisTools::base::RefCountHandle<class sphSystem::util::UIDGenerator> sphSystem::util::UIDGeneratorSingleton::getGenerator(bool)
        public: static void sphSystem::util::UIDGeneratorSingleton::init(void)
        // Variables:
        private: static class sophisTools::base::RefCountHandle<class sphSystem::util::UIDGenerator> sphSystem::util::UIDGeneratorSingleton::fGlobal
      public:
      };


    };


  };

  class/*or struct*/ std
  {
  public:
    // Nested containers:
    template<typename T0, typename T1, typename T3    >
    class/*or struct*/ _Func_base
    {
    public:
    };
#if 0 // Instances:
// <void, struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *&&, unsigned long>
#if 0
    template<>
    class/*or struct*/ _Func_base<void, struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *&&, unsigned long>
    {
    public:
    };
#endif
// <void, struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *&&, unsigned long>
#if 0
    template<>
    class/*or struct*/ _Func_base<void, struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *&&, unsigned long>
    {
    public:
    };
#endif
#endif


    template<typename T0, typename T1, typename T2, typename T4    >
    class/*or struct*/ _Func_impl_no_alloc
    {
    public:
    };
#if 0 // Instances:
// <class std::function<void __cdecl(struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *, unsigned long)>, void, struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *&&, unsigned long>
#if 0
    template<>
    class/*or struct*/ _Func_impl_no_alloc<class std::function<void __cdecl(struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *, unsigned long)>, void, struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *&&, unsigned long> : public _Func_base<void, struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *&&, unsigned long>
    {
      // VFTable. Offset=0, Size=6, Start=0
      // Corresponding base: _Func_base::_Func_base::_Func_base<void, struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *&&, unsigned long>
      // Owner: SophisXmlTools.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      public: virtual void unknown_vf_0_4(void); // 4
      public: virtual void unknown_vf_0_5(void); // 5
      // VFTable with 0 offset end

    public:
    };
#endif
// <class std::function<void __cdecl(struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *, unsigned long)>, void, struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *&&, unsigned long>
#if 0
    template<>
    class/*or struct*/ _Func_impl_no_alloc<class std::function<void __cdecl(struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *, unsigned long)>, void, struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *&&, unsigned long> : public _Func_base<void, struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *&&, unsigned long>
    {
      // VFTable. Offset=0, Size=6, Start=0
      // Corresponding base: _Func_base::_Func_base::_Func_base<void, struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *&&, unsigned long>
      // Owner: SophisXmlTools.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      public: virtual void unknown_vf_0_4(void); // 4
      public: virtual void unknown_vf_0_5(void); // 5
      // VFTable with 0 offset end

    public:
    };
#endif
#endif


    template<typename T1    >
    class _List_iterator
    {
    public:
    };
#if 0 // Instances:
// <class std::_List_val<struct std::_List_simple_types<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>>
#if 0
    template<>
    class _List_iterator<class std::_List_val<struct std::_List_simple_types<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>>
    {
    public:
    };
#endif
#endif


    template<typename T1    >
    struct _List_simple_types
    {
    public:
    };
#if 0 // Instances:
// <class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>
#if 0
    template<>
    struct _List_simple_types<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>
    {
    public:
    };
#endif
#endif


    template<typename T1    >
    class _List_val
    {
    public:
    };
#if 0 // Instances:
// <struct std::_List_simple_types<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>
#if 0
    template<>
    class _List_val<struct std::_List_simple_types<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>
    {
    public:
    };
#endif
#endif


    class/*or struct*/ _Locinfo
    {
      // Functions:
      public: struct _Cvtvec _Getcvt(void) const
      public: unsigned short const * _W_Getdays(void) const
      public: unsigned short const * _W_Getmonths(void) const
    public:
    };

    template<typename T1    >
    class/*or struct*/ _Ref_count
    {
    public:
    };
#if 0 // Instances:
// <class `anonymous namespace'::StatisticsProcessor>
#if 0
    template<>
    class/*or struct*/ _Ref_count<class `anonymous namespace'::StatisticsProcessor> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisSystem.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class sphSystem::comm::ChannelReceiveThread>
#if 0
    template<>
    class/*or struct*/ _Ref_count<class sphSystem::comm::ChannelReceiveThread> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisSystem.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class sphSystem::comm::ChannelSendThread>
#if 0
    template<>
    class/*or struct*/ _Ref_count<class sphSystem::comm::ChannelSendThread> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisSystem.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class sphSystem::comm::SimpleChannelReceiveThread>
#if 0
    template<>
    class/*or struct*/ _Ref_count<class sphSystem::comm::SimpleChannelReceiveThread> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisSystem.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class sphSystem::comm::SimpleChannelSendThread>
#if 0
    template<>
    class/*or struct*/ _Ref_count<class sphSystem::comm::SimpleChannelSendThread> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisSystem.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class sphSystem::logger::AutoShiftWorkerThread>
#if 0
    template<>
    class/*or struct*/ _Ref_count<class sphSystem::logger::AutoShiftWorkerThread> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisSystem.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class sphSystem::server::AutoShutDownThread>
#if 0
    template<>
    class/*or struct*/ _Ref_count<class sphSystem::server::AutoShutDownThread> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisSystem.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class sphSystem::server::ProgramExitWatcherThread>
#if 0
    template<>
    class/*or struct*/ _Ref_count<class sphSystem::server::ProgramExitWatcherThread> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisSystem.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class sphSystem::thread::MultiActionThread>
#if 0
    template<>
    class/*or struct*/ _Ref_count<class sphSystem::thread::MultiActionThread> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisSystem.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class sphSystem::thread::RunnableWorkerThread>
#if 0
    template<>
    class/*or struct*/ _Ref_count<class sphSystem::thread::RunnableWorkerThread> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisSystem.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
#endif


    class/*or struct*/ _Ref_count_base
    {
    public:
    };

    template<typename T1    >
    class/*or struct*/ _Ref_count_obj2
    {
    public:
    };
#if 0 // Instances:
// <class std::vector<__int64, class std::allocator<__int64>>>
#if 0
    template<>
    class/*or struct*/ _Ref_count_obj2<class std::vector<__int64, class std::allocator<__int64>>> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisXmlTools.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class std::vector<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, class std::allocator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>>>
#if 0
    template<>
    class/*or struct*/ _Ref_count_obj2<class std::vector<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, class std::allocator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>>> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisXmlTools.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class std::vector<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, class std::allocator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>>>
#if 0
    template<>
    class/*or struct*/ _Ref_count_obj2<class std::vector<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, class std::allocator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>>> : public _Ref_count_base
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Corresponding base: std::_Ref_count_base
      // Owner: SophisXmlTools.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      // VFTable with 0 offset end

    public:
    };
#endif
#endif


    template<typename T1    >
    struct _Simple_types
    {
    public:
    };
#if 0 // Instances:
// <class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>
#if 0
    template<>
    struct _Simple_types<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>
    {
    public:
    };
#endif
#endif


    class/*or struct*/ _System_error : public runtime_error
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::runtime_error
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };

    template<typename T0, typename T1, typename T2, typename T3, typename T5    >
    class _Tmap_traits
    {
    public:
    };
#if 0 // Instances:
// <class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>
#if 0
    template<>
    class _Tmap_traits<class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>
    {
    public:
    };
#endif
// <class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>, 0>
#if 0
    template<>
    class _Tmap_traits<class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>, 0>
    {
    public:
    };
#endif
// <class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>, 0>
#if 0
    template<>
    class _Tmap_traits<class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>, 0>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>, 0>
#if 0
    template<>
    class _Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>, 0>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>, 0>
#if 0
    template<>
    class _Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>, 0>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>
#if 0
    template<>
    class _Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, unsigned __int64, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, unsigned __int64>>, 0>
#if 0
    template<>
    class _Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, unsigned __int64, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, unsigned __int64>>, 0>
    {
    public:
    };
#endif
// <class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>, 0>
#if 0
    template<>
    class _Tmap_traits<class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>, 0>
    {
    public:
    };
#endif
// <long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>, 0>
#if 0
    template<>
    class _Tmap_traits<long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>, 0>
    {
    public:
    };
#endif
// <unsigned long, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, struct std::less<unsigned long>, class std::allocator<struct std::pair<unsigned long const, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>>>, 1>
#if 0
    template<>
    class _Tmap_traits<unsigned long, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, struct std::less<unsigned long>, class std::allocator<struct std::pair<unsigned long const, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>>>, 1>
    {
    public:
    };
#endif
#endif


    template<typename T1    >
    class/*or struct*/ _Tree
    {
    public:
    };
#if 0 // Instances:
// <class std::_Tmap_traits<class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>>
#if 0
    template<>
    class/*or struct*/ _Tree<class std::_Tmap_traits<class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>>
    {
    public:
    };
#endif
// <class std::_Tmap_traits<class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>, 0>>
#if 0
    template<>
    class/*or struct*/ _Tree<class std::_Tmap_traits<class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>, 0>>
    {
    public:
    };
#endif
// <class std::_Tmap_traits<class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>, 0>>
#if 0
    template<>
    class/*or struct*/ _Tree<class std::_Tmap_traits<class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>, 0>>
    {
    public:
    };
#endif
// <class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>, 0>>
#if 0
    template<>
    class/*or struct*/ _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>, 0>>
    {
    public:
    };
#endif
// <class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>, 0>>
#if 0
    template<>
    class/*or struct*/ _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>, 0>>
    {
    public:
    };
#endif
// <class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>>
#if 0
    template<>
    class/*or struct*/ _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>>
    {
    public:
    };
#endif
// <class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, unsigned __int64, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, unsigned __int64>>, 0>>
#if 0
    template<>
    class/*or struct*/ _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, unsigned __int64, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, unsigned __int64>>, 0>>
    {
    public:
    };
#endif
// <class std::_Tmap_traits<class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>, 0>>
#if 0
    template<>
    class/*or struct*/ _Tree<class std::_Tmap_traits<class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>, 0>>
    {
    public:
    };
#endif
// <class std::_Tmap_traits<long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>, 0>>
#if 0
    template<>
    class/*or struct*/ _Tree<class std::_Tmap_traits<long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>, 0>>
    {
    public:
    };
#endif
// <class std::_Tmap_traits<unsigned long, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, struct std::less<unsigned long>, class std::allocator<struct std::pair<unsigned long const, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>>>, 1>>
#if 0
    template<>
    class/*or struct*/ _Tree<class std::_Tmap_traits<unsigned long, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, struct std::less<unsigned long>, class std::allocator<struct std::pair<unsigned long const, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>>>, 1>>
    {
    public:
    };
#endif
// <class std::_Tset_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, 0>>
#if 0
    template<>
    class/*or struct*/ _Tree<class std::_Tset_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, 0>>
    {
    public:
    };
#endif
#endif


    template<typename T1    >
    class _Tree_const_iterator
    {
    public:
    };
#if 0 // Instances:
// <class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>
#if 0
    template<>
    class _Tree_const_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>
    {
    public:
    };
#endif
#endif


    template<typename T1    >
    class _Tree_iterator
    {
    public:
    };
#if 0 // Instances:
// <class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>
#if 0
    template<>
    class _Tree_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>
    {
    public:
    };
#endif
#endif


    template<typename T1    >
    struct _Tree_simple_types
    {
    public:
    };
#if 0 // Instances:
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
    template<>
    struct _Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
    {
    public:
    };
#endif
#endif


    template<typename T1    >
    class _Tree_val
    {
    public:
    };
#if 0 // Instances:
// <struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
#if 0
    template<>
    class _Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
    {
    public:
    };
#endif
#endif


    template<typename T0, typename T1, typename T2, typename T4    >
    class _Tset_traits
    {
    public:
    };
#if 0 // Instances:
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, 0>
#if 0
    template<>
    class _Tset_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, 0>
    {
    public:
    };
#endif
#endif


    template<typename T1    >
    class _Vector_iterator
    {
    public:
    };
#if 0 // Instances:
// <class std::_Vector_val<struct std::_Simple_types<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>>>
#if 0
    template<>
    class _Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>>>
    {
    public:
    };
#endif
#endif


    template<typename T1    >
    class _Vector_val
    {
    public:
    };
#if 0 // Instances:
// <struct std::_Simple_types<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>>
#if 0
    template<>
    class _Vector_val<struct std::_Simple_types<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>>
    {
    public:
    };
#endif
#endif


    template<typename T1    >
    class allocator
    {
    public:
    };
#if 0 // Instances:
// <__int64>
#if 0
    template<>
    class allocator<__int64>
    {
    public:
    };
#endif
// <char>
#if 0
    template<>
    class allocator<char>
    {
    public:
    };
#endif
// <class sophis::event::CSHistoricPriceData *>
#if 0
    template<>
    class allocator<class sophis::event::CSHistoricPriceData *>
    {
    public:
    };
#endif
// <class sophis::portfolio::CSRTaxLotList>
#if 0
    template<>
    class allocator<class sophis::portfolio::CSRTaxLotList>
    {
    public:
    };
#endif
// <class sophis::tools::CSRAbstractEvent *>
#if 0
    template<>
    class allocator<class sophis::tools::CSRAbstractEvent *>
    {
    public:
    };
#endif
// <class sophis::tools::CSRTagMetadata>
#if 0
    template<>
    class allocator<class sophis::tools::CSRTagMetadata>
    {
    public:
    };
#endif
// <class sophis::tools::dataModel::Data const *>
#if 0
    template<>
    class allocator<class sophis::tools::dataModel::Data const *>
    {
    public:
    };
#endif
// <class sophis::tools::dataModel::DataContainer const *>
#if 0
    template<>
    class allocator<class sophis::tools::dataModel::DataContainer const *>
    {
    public:
    };
#endif
// <class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>>
#if 0
    template<>
    class allocator<class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>>
    {
    public:
    };
#endif
// <class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>
#if 0
    template<>
    class allocator<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>
    {
    public:
    };
#endif
// <class sophisTools::base::RefCountHandle<class sophisTools::comm::QuoteInfo>>
#if 0
    template<>
    class allocator<class sophisTools::base::RefCountHandle<class sophisTools::comm::QuoteInfo>>
    {
    public:
    };
#endif
// <class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>
#if 0
    template<>
    class allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>
    {
    public:
    };
#endif
// <class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>>
#if 0
    template<>
    class allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
#if 0
    template<>
    class allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
    {
    public:
    };
#endif
// <long>
#if 0
    template<>
    class allocator<long>
    {
    public:
    };
#endif
// <struct OCILobLocator const *>
#if 0
    template<>
    class allocator<struct OCILobLocator const *>
    {
    public:
    };
#endif
// <struct PriceDB_t>
#if 0
    template<>
    class allocator<struct PriceDB_t>
    {
    public:
    };
#endif
// <struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
#if 0
    template<>
    class allocator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>
    {
    public:
    };
#endif
// <struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
#if 0
    template<>
    class allocator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>
    {
    public:
    };
#endif
// <struct sophis::DAL::SSRepoMargin>
#if 0
    template<>
    class allocator<struct sophis::DAL::SSRepoMargin>
    {
    public:
    };
#endif
// <struct sophis::listed_market::SeriesKey>
#if 0
    template<>
    class allocator<struct sophis::listed_market::SeriesKey>
    {
    public:
    };
#endif
// <struct sophis::market_data::SSDividend>
#if 0
    template<>
    class allocator<struct sophis::market_data::SSDividend>
    {
    public:
    };
#endif
// <struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping>
#if 0
    template<>
    class allocator<struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping>
    {
    public:
    };
#endif
// <struct sophis::xml::dataModel::XMLDataExporterImpl::Position>
#if 0
    template<>
    class allocator<struct sophis::xml::dataModel::XMLDataExporterImpl::Position>
    {
    public:
    };
#endif
// <struct sophisTools::logger::filterConstraint>
#if 0
    template<>
    class allocator<struct sophisTools::logger::filterConstraint>
    {
    public:
    };
#endif
// <struct sophisTools::net::SelectReactor::HandlerInfo>
#if 0
    template<>
    class allocator<struct sophisTools::net::SelectReactor::HandlerInfo>
    {
    public:
    };
#endif
// <struct sphSystem::plugin::ListElement>
#if 0
    template<>
    class allocator<struct sphSystem::plugin::ListElement>
    {
    public:
    };
#endif
// <struct std::pair<char const *, char const *>>
#if 0
    template<>
    class allocator<struct std::pair<char const *, char const *>>
    {
    public:
    };
#endif
// <struct std::pair<char const *const, class sophis::misc::fpml::alerts::AlertToolkit *>>
#if 0
    template<>
    class allocator<struct std::pair<char const *const, class sophis::misc::fpml::alerts::AlertToolkit *>>
    {
    public:
    };
#endif
// <struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
    template<>
    class allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
    {
    public:
    };
#endif
// <struct std::pair<class sophis::xml::util::XWString const, bool>>
#if 0
    template<>
    class allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>
    {
    public:
    };
#endif
// <struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>
#if 0
    template<>
    class allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>
    {
    public:
    };
#endif
// <struct std::pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>>
#if 0
    template<>
    class allocator<struct std::pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>>
    {
    public:
    };
#endif
// <struct std::pair<class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>>
#if 0
    template<>
    class allocator<struct std::pair<class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>>
    {
    public:
    };
#endif
// <struct std::pair<class sophisTools::time::Time24 const, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>>>
#if 0
    template<>
    class allocator<struct std::pair<class sophisTools::time::Time24 const, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>>>
    {
    public:
    };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>
#if 0
    template<>
    class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>
    {
    public:
    };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>
#if 0
    template<>
    class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>
    {
    public:
    };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
    template<>
    class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
    {
    public:
    };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>
#if 0
    template<>
    class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>
    {
    public:
    };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>>
#if 0
    template<>
    class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>>
    {
    public:
    };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, unsigned __int64>>
#if 0
    template<>
    class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, unsigned __int64>>
    {
    public:
    };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
    template<>
    class allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
    {
    public:
    };
#endif
// <struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>
#if 0
    template<>
    class allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>
    {
    public:
    };
#endif
// <struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>
#if 0
    template<>
    class allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>
    {
    public:
    };
#endif
// <struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>
#if 0
    template<>
    class allocator<struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>
    {
    public:
    };
#endif
// <struct std::pair<long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>>
#if 0
    template<>
    class allocator<struct std::pair<long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>>
    {
    public:
    };
#endif
// <struct std::pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>
#if 0
    template<>
    class allocator<struct std::pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>
    {
    public:
    };
#endif
// <struct std::pair<struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>>
#if 0
    template<>
    class allocator<struct std::pair<struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>>
    {
    public:
    };
#endif
// <struct std::pair<unsigned long const, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>>>
#if 0
    template<>
    class allocator<struct std::pair<unsigned long const, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>>>
    {
    public:
    };
#endif
// <unsigned __int64>
#if 0
    template<>
    class allocator<unsigned __int64>
    {
    public:
    };
#endif
// <unsigned char>
#if 0
    template<>
    class allocator<unsigned char>
    {
    public:
    };
#endif
// <void const *>
#if 0
    template<>
    class allocator<void const *>
    {
    public:
    };
#endif
#endif


    class/*or struct*/ bad_alloc : public exception
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::exception
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // Owner: SophisXmlTools.dll
      // Owner: SophisPop.dll
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ bad_array_new_length : public bad_alloc
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::bad_alloc
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // Owner: SophisXmlTools.dll
      // Owner: SophisPop.dll
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ bad_cast : public exception
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::exception
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // Owner: SophisXmlTools.dll
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ bad_optional_access : public exception
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::exception
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ bad_variant_access : public exception
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::exception
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ bad_weak_ptr : public exception
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::exception
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };

    template<typename T0, typename T2    >
    class/*or struct*/ basic_ios
    {
    public:
    };
#if 0 // Instances:
// <char, struct std::char_traits<char>>
#if 0
    template<>
    class/*or struct*/ basic_ios<char, struct std::char_traits<char>>
    {
      // Functions:
      protected: std::basic_ios<char, struct std::char_traits<char>>::basic_ios<char, struct std::char_traits<char>>(void)
      public: char std::basic_ios<char, struct std::char_traits<char>>::fill(void) const
      public: class std::basic_streambuf<char, struct std::char_traits<char>> * std::basic_ios<char, struct std::char_traits<char>>::rdbuf(void) const
      public: void std::basic_ios<char, struct std::char_traits<char>>::setstate(int, bool)
      public: class std::basic_ostream<char, struct std::char_traits<char>> * std::basic_ios<char, struct std::char_traits<char>>::tie(void) const
      public: char std::basic_ios<char, struct std::char_traits<char>>::widen(char) const
#if 0 // All found virtual functions names:
      public: virtual std::basic_ios<char, struct std::char_traits<char>>::~basic_ios<char, struct std::char_traits<char>>(void)
#endif

    public:
    };
#endif
#endif


    template<typename T0, typename T2    >
    class basic_istream
    {
    public:
    };
#if 0 // Instances:
// <char, struct std::char_traits<char>>
#if 0
    template<>
    class basic_istream<char, struct std::char_traits<char>>
    {
      // Functions:
      public: std::basic_istream<char, struct std::char_traits<char>>::basic_istream<char, struct std::char_traits<char>>(class std::basic_streambuf<char, struct std::char_traits<char>> *, bool)
      public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(short &)
      public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(unsigned short &)
      public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(int &)
      public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(long &)
      public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(unsigned long &)
      public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(float &)
      public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(double &)
      public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(__int64 &)
      public: class std::basic_istream<char, struct std::char_traits<char>> & std::basic_istream<char, struct std::char_traits<char>>::operator>>(unsigned __int64 &)
      public: bool std::basic_istream<char, struct std::char_traits<char>>::_Ipfx(bool)
#if 0 // All found virtual functions names:
      public: virtual std::basic_istream<char, struct std::char_traits<char>>::~basic_istream<char, struct std::char_traits<char>>(void)
#endif

    public:
    };
#endif
#endif


#if 0
    template<>
    class basic_istream<char, struct std::char_traits<char>>
    {
    public:
    };
#endif

    template<typename T0, typename T1, typename T3    >
    class/*or struct*/ basic_istringstream
    {
    public:
    };
#if 0 // Instances:
// <char, struct std::char_traits<char>, class std::allocator<char>>
#if 0
    template<>
    class/*or struct*/ basic_istringstream<char, struct std::char_traits<char>, class std::allocator<char>>
    {
      // VFTable. Offset=144, Size=1, Start=0
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
      public: virtual void unknown_vf_144_0(void); // 0
#endif
      // VFTable with 144 offset end

    public:
    };
#endif
#endif


    template<typename T0, typename T2    >
    class basic_ostream
    {
    public:
    };
#if 0 // Instances:
// <char, struct std::char_traits<char>>
#if 0
    template<>
    class basic_ostream<char, struct std::char_traits<char>>
    {
      // Functions:
      public: std::basic_ostream<char, struct std::char_traits<char>>::basic_ostream<char, struct std::char_traits<char>>(class std::basic_streambuf<char, struct std::char_traits<char>> *, bool)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(short)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(unsigned short)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(int)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(unsigned int)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(long)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(unsigned long)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(float)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(double)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(class std::basic_ostream<char, struct std::char_traits<char>> & (__cdecl *)(class std::basic_ostream<char, struct std::char_traits<char>> &))
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(class std::ios_base & (__cdecl *)(class std::ios_base &))
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(void const *)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(__int64)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(unsigned __int64)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::operator<<(bool)
      public: void std::basic_ostream<char, struct std::char_traits<char>>::`vbase dtor'(void)
      public: void std::basic_ostream<char, struct std::char_traits<char>>::_Osfx(void)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::flush(void)
      public: class std::basic_ostream<char, struct std::char_traits<char>> & std::basic_ostream<char, struct std::char_traits<char>>::put(char)
#if 0 // All found virtual functions names:
      public: virtual std::basic_ostream<char, struct std::char_traits<char>>::~basic_ostream<char, struct std::char_traits<char>>(void)
#endif

    public:
    };
#endif
#endif


#if 0
    template<>
    class basic_ostream<char, struct std::char_traits<char>>
    {
    public:
    };
#endif

    template<typename T0, typename T1, typename T3    >
    class/*or struct*/ basic_ostringstream
    {
    public:
    };
#if 0 // Instances:
// <char, struct std::char_traits<char>, class std::allocator<char>>
#if 0
    template<>
    class/*or struct*/ basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>
    {
      // VFTable. Offset=136, Size=1, Start=0
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // Owner: SophisXmlTools.dll
      // Added virtual functions:
#if 0 // Warning: There are virtual functions probably from base class.
      public: virtual void unknown_vf_136_0(void); // 0
#endif
      // VFTable with 136 offset end

    public:
    };
#endif
#endif


    template<typename T0, typename T2    >
    class basic_streambuf
    {
    public:
    };
#if 0 // Instances:
// <char, struct std::char_traits<char>>
#if 0
    template<>
    class basic_streambuf<char, struct std::char_traits<char>>
    {
      // Functions:
      protected: std::basic_streambuf<char, struct std::char_traits<char>>::basic_streambuf<char, struct std::char_traits<char>>(void)
      protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::_Pninc(void)
      protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::eback(void) const
      protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::egptr(void) const
      protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::epptr(void) const
      protected: void std::basic_streambuf<char, struct std::char_traits<char>>::gbump(int)
      protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::gptr(void) const
      protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::pbase(void) const
      protected: char * std::basic_streambuf<char, struct std::char_traits<char>>::pptr(void) const
      public: int std::basic_streambuf<char, struct std::char_traits<char>>::sbumpc(void)
      protected: void std::basic_streambuf<char, struct std::char_traits<char>>::setg(char *, char *, char *)
      protected: void std::basic_streambuf<char, struct std::char_traits<char>>::setp(char *, char *, char *)
      protected: void std::basic_streambuf<char, struct std::char_traits<char>>::setp(char *, char *)
      public: int std::basic_streambuf<char, struct std::char_traits<char>>::sputc(char)
      public: __int64 std::basic_streambuf<char, struct std::char_traits<char>>::sputn(char const *, __int64)
#if 0 // All found virtual functions names:
      public: virtual std::basic_streambuf<char, struct std::char_traits<char>>::~basic_streambuf<char, struct std::char_traits<char>>(void)
      public: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::_Lock(void)
      public: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::_Unlock(void)
      protected: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::imbue(class std::locale const &)
      protected: virtual class std::basic_streambuf<char, struct std::char_traits<char>> * std::basic_streambuf<char, struct std::char_traits<char>>::setbuf(char *, __int64)
      protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::showmanyc(void)
      protected: virtual int std::basic_streambuf<char, struct std::char_traits<char>>::sync(void)
      protected: virtual int std::basic_streambuf<char, struct std::char_traits<char>>::uflow(void)
      protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::xsgetn(char *, __int64)
      protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::xsputn(char const *, __int64)
#endif

      // VFTable. Offset=0, Size=15, Start=0
      // Added virtual functions:
      public: virtual std::basic_streambuf<char, struct std::char_traits<char>>::~basic_streambuf<char, struct std::char_traits<char>>(void); // 0
      public: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::_Lock(void); // 1
      public: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::_Unlock(void); // 2
      public: virtual void unknown_vf_0_3(void); // 3
      public: virtual void unknown_vf_0_4(void); // 4
      protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::showmanyc(void); // 5
      public: virtual void unknown_vf_0_6(void); // 6
      protected: virtual int std::basic_streambuf<char, struct std::char_traits<char>>::uflow(void); // 7
      protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::xsgetn(char *, __int64); // 8
      protected: virtual __int64 std::basic_streambuf<char, struct std::char_traits<char>>::xsputn(char const *, __int64); // 9
      public: virtual void unknown_vf_0_10(void); // 10
      public: virtual void unknown_vf_0_11(void); // 11
      protected: virtual class std::basic_streambuf<char, struct std::char_traits<char>> * std::basic_streambuf<char, struct std::char_traits<char>>::setbuf(char *, __int64); // 12
      protected: virtual int std::basic_streambuf<char, struct std::char_traits<char>>::sync(void); // 13
      protected: virtual void std::basic_streambuf<char, struct std::char_traits<char>>::imbue(class std::locale const &); // 14
      // VFTable with 0 offset end

    public:
    };
#endif
#endif


#if 0
    template<>
    class basic_streambuf<char, struct std::char_traits<char>>
    {
    public:
    };
#endif

    template<typename T0, typename T1, typename T3    >
    class basic_string
    {
    public:
    };
#if 0 // Instances:
// <char, struct std::char_traits<char>, class std::allocator<char>>
#if 0
    template<>
    class basic_string<char, struct std::char_traits<char>, class std::allocator<char>>
    {
    public:
    };
#endif
#endif


#if 0
    template<>
    class basic_string<char, struct std::char_traits<char>, class std::allocator<char>>
    {
    public:
    };
#endif

    template<typename T0, typename T1, typename T3    >
    class basic_stringbuf
    {
    public:
    };
#if 0 // Instances:
// <char, struct std::char_traits<char>, class std::allocator<char>>
#if 0
    template<>
    class basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>> : public basic_streambuf<char, struct std::char_traits<char>>
    {
      // VFTable. Offset=0, Size=15, Start=15
      // Corresponding base: basic_streambuf::basic_streambuf::basic_streambuf<char, struct std::char_traits<char>>
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // Owner: SophisXmlTools.dll
      // VFTable with 0 offset end

    public:
    };
#endif
#endif


    template<typename T1    >
    struct char_traits
    {
    public:
    };
#if 0 // Instances:
// <char>
#if 0
    template<>
    struct char_traits<char>
    {
    public:
    };
#endif
#endif


    class/*or struct*/ exception
    {
      // VFTable. Offset=0, Size=2, Start=0
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // Owner: SophisXmlTools.dll
      // Owner: SophisPop.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      // VFTable with 0 offset end

    public:
    };

    template<typename T1    >
    class function
    {
    public:
    };
#if 0 // Instances:
// <void __cdecl(struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *, unsigned long)>
#if 0
    template<>
    class function<void __cdecl(struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave *, unsigned long)>
    {
    public:
    };
#endif
// <void __cdecl(struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *, unsigned long)>
#if 0
    template<>
    class function<void __cdecl(struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal *, unsigned long)>
    {
    public:
    };
#endif
#endif


    template<typename T0, typename T2    >
    struct integral_constant
    {
    public:
    };
#if 0 // Instances:
// <bool, 0>
#if 0
    template<>
    struct integral_constant<bool, 0>
    {
    public:
    };
#endif
// <bool, 1>
#if 0
    template<>
    struct integral_constant<bool, 1>
    {
    public:
    };
#endif
#endif


    class ios_base
    {
    public:
      // Nested containers:
      class/*or struct*/ failure : public system_error
      {
        // VFTable. Offset=0, Size=2, Start=2
        // Corresponding base: std::system_error
        // Owner: SophisXML.dll
        // VFTable with 0 offset end

      public:
      };


      // Functions:
      public: void exceptions(int)
      public: int flags(void) const
      public: bool good(void) const
      public: __int64 width(__int64)
      public: __int64 width(void) const
    public:
    };

    template<typename T1    >
    struct less
    {
    public:
    };
#if 0 // Instances:
// <class sophis::tools::dataModel::PlainValue const *>
#if 0
    template<>
    struct less<class sophis::tools::dataModel::PlainValue const *>
    {
    public:
    };
#endif
// <class sophis::xml::util::XWString>
#if 0
    template<>
    struct less<class sophis::xml::util::XWString>
    {
    public:
    };
#endif
// <class sophisTools::FlyWeightString>
#if 0
    template<>
    struct less<class sophisTools::FlyWeightString>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
#if 0
    template<>
    struct less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
    {
    public:
    };
#endif
// <class xercesc_3_2::DOMNode const *>
#if 0
    template<>
    struct less<class xercesc_3_2::DOMNode const *>
    {
    public:
    };
#endif
// <long>
#if 0
    template<>
    struct less<long>
    {
    public:
    };
#endif
// <struct QuoteKey_t>
#if 0
    template<>
    struct less<struct QuoteKey_t>
    {
    public:
    };
#endif
// <unsigned long>
#if 0
    template<>
    struct less<unsigned long>
    {
    public:
    };
#endif
#endif


    template<typename T0, typename T2    >
    class list
    {
    public:
    };
#if 0 // Instances:
// <class sophis::event::CSHistoricPriceData *, class std::allocator<class sophis::event::CSHistoricPriceData *>>
#if 0
    template<>
    class list<class sophis::event::CSHistoricPriceData *, class std::allocator<class sophis::event::CSHistoricPriceData *>>
    {
    public:
    };
#endif
// <class sophis::portfolio::CSRTaxLotList, class std::allocator<class sophis::portfolio::CSRTaxLotList>>
#if 0
    template<>
    class list<class sophis::portfolio::CSRTaxLotList, class std::allocator<class sophis::portfolio::CSRTaxLotList>>
    {
    public:
    };
#endif
// <class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>, class std::allocator<class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>>>
#if 0
    template<>
    class/*or struct*/ list<class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>, class std::allocator<class sophisTools::base::RefCountHandle<class sophis::tools::util::NotificationListener<struct sophis::tools::util::Worker::JobTerminatedEvent>>>>
    {
    public:
    };
#endif
// <class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>, class std::allocator<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>
#if 0
    template<>
    class/*or struct*/ list<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>, class std::allocator<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>
    {
      // Functions:
      public: class std::_List_iterator<class std::_List_val<struct std::_List_simple_types<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>> std::list<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>, class std::allocator<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>::begin(void)
      public: class std::_List_iterator<class std::_List_val<struct std::_List_simple_types<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>> std::list<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>, class std::allocator<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>::end(void)
      public: void std::list<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>, class std::allocator<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>::pop_front(void)
      public: void std::list<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>, class std::allocator<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>::push_back(class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> &&)
      public: void std::list<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>, class std::allocator<class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker>>>::push_back(class sophisTools::base::RefCountHandle<class sophis::tools::util::Worker> const &)
    public:
    };
#endif
// <class sophisTools::base::RefCountHandle<class sophisTools::comm::QuoteInfo>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::comm::QuoteInfo>>>
#if 0
    template<>
    class list<class sophisTools::base::RefCountHandle<class sophisTools::comm::QuoteInfo>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::comm::QuoteInfo>>>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
    template<>
    class list<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
    {
    public:
    };
#endif
// <struct sophis::xml::dataModel::XMLDataExporterImpl::Position, class std::allocator<struct sophis::xml::dataModel::XMLDataExporterImpl::Position>>
#if 0
    template<>
    class/*or struct*/ list<struct sophis::xml::dataModel::XMLDataExporterImpl::Position, class std::allocator<struct sophis::xml::dataModel::XMLDataExporterImpl::Position>>
    {
    public:
    };
#endif
// <struct sophisTools::logger::filterConstraint, class std::allocator<struct sophisTools::logger::filterConstraint>>
#if 0
    template<>
    class list<struct sophisTools::logger::filterConstraint, class std::allocator<struct sophisTools::logger::filterConstraint>>
    {
    public:
    };
#endif
// <struct sophisTools::net::SelectReactor::HandlerInfo, class std::allocator<struct sophisTools::net::SelectReactor::HandlerInfo>>
#if 0
    template<>
    class list<struct sophisTools::net::SelectReactor::HandlerInfo, class std::allocator<struct sophisTools::net::SelectReactor::HandlerInfo>>
    {
    public:
    };
#endif
// <struct sphSystem::plugin::ListElement, class std::allocator<struct sphSystem::plugin::ListElement>>
#if 0
    template<>
    class/*or struct*/ list<struct sphSystem::plugin::ListElement, class std::allocator<struct sphSystem::plugin::ListElement>>
    {
    public:
    };
#endif
// <struct std::pair<char const *, char const *>, class std::allocator<struct std::pair<char const *, char const *>>>
#if 0
    template<>
    class list<struct std::pair<char const *, char const *>, class std::allocator<struct std::pair<char const *, char const *>>>
    {
    public:
    };
#endif
// <struct std::pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>>>
#if 0
    template<>
    class/*or struct*/ list<struct std::pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>>>
    {
    public:
    };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
#if 0
    template<>
    class/*or struct*/ list<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
    {
    public:
    };
#endif
#endif


    class locale
    {
    public:
    };

    class/*or struct*/ logic_error : public exception
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::exception
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };

    template<typename T0, typename T1, typename T2, typename T4    >
    class map
    {
    public:
    };
#if 0 // Instances:
// <class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
#if 0
    template<>
    class/*or struct*/ map<class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>> : public _Tree<class std::_Tmap_traits<class sophis::tools::dataModel::PlainValue const *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class sophis::tools::dataModel::PlainValue const *>, class std::allocator<struct std::pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>>
    {
    public:
    };
#endif
// <class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>>
#if 0
    template<>
    class/*or struct*/ map<class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>> : public _Tree<class std::_Tmap_traits<class sophis::xml::util::XWString, bool, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, bool>>, 0>>
    {
    public:
    };
#endif
// <class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>>
#if 0
    template<>
    class/*or struct*/ map<class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>> : public _Tree<class std::_Tmap_traits<class sophis::xml::util::XWString, class sophis::xml::util::XWString, struct std::less<class sophis::xml::util::XWString>, class std::allocator<struct std::pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>>, 0>>
    {
    public:
    };
#endif
// <class sophisTools::FlyWeightString, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>, struct std::less<class sophisTools::FlyWeightString>, class std::allocator<struct std::pair<class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>>>
#if 0
    template<>
    class map<class sophisTools::FlyWeightString, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>, struct std::less<class sophisTools::FlyWeightString>, class std::allocator<struct std::pair<class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>>>
    {
    public:
    };
#endif
// <class sophisTools::time::Time24, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>, struct sphSystem::thread::less_Time24, class std::allocator<struct std::pair<class sophisTools::time::Time24 const, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>>>>
#if 0
    template<>
    class map<class sophisTools::time::Time24, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>, struct sphSystem::thread::less_Time24, class std::allocator<struct std::pair<class sophisTools::time::Time24 const, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>>>>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>>
#if 0
    template<>
    class/*or struct*/ map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>> : public _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>>, 0>>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>>
#if 0
    template<>
    class/*or struct*/ map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>> : public _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>>, 0>>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
#if 0
    template<>
    class/*or struct*/ map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>> : public _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>, 0>>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>
#if 0
    template<>
    class map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct SnapshotColumnDB_t, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>>>
#if 0
    template<>
    class map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct SnapshotColumnDB_t, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>>>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, unsigned __int64, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, unsigned __int64>>>
#if 0
    template<>
    class/*or struct*/ map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, unsigned __int64, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, unsigned __int64>>> : public _Tree<class std::_Tmap_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, unsigned __int64, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, unsigned __int64>>, 0>>
    {
    public:
    };
#endif
// <class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>>
#if 0
    template<>
    class/*or struct*/ map<class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>> : public _Tree<class std::_Tmap_traits<class xercesc_3_2::DOMNode const *, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo, struct std::less<class xercesc_3_2::DOMNode const *>, class std::allocator<struct std::pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>>, 0>>
    {
    public:
    };
#endif
// <long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>>
#if 0
    template<>
    class/*or struct*/ map<long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>> : public _Tree<class std::_Tmap_traits<long, class sophis::misc::fpml::quotation::QuotesByDate, struct std::less<long>, class std::allocator<struct std::pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>>, 0>>
    {
    public:
    };
#endif
// <long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>>
#if 0
    template<>
    class map<long, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>>
    {
    public:
    };
#endif
// <long, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>>>
#if 0
    template<>
    class map<long, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *, struct std::less<long>, class std::allocator<struct std::pair<long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>>>
    {
    public:
    };
#endif
// <struct QuoteKey_t, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>>
#if 0
    template<>
    class map<struct QuoteKey_t, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>>>
    {
    public:
    };
#endif
// <struct QuoteKey_t, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>>>
#if 0
    template<>
    class map<struct QuoteKey_t, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>, struct std::less<struct QuoteKey_t>, class std::allocator<struct std::pair<struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>>>
    {
    public:
    };
#endif
#endif


    template<typename T0, typename T1, typename T2, typename T4    >
    class/*or struct*/ multimap
    {
    public:
    };
#if 0 // Instances:
// <unsigned long, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, struct std::less<unsigned long>, class std::allocator<struct std::pair<unsigned long const, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>>>>
#if 0
    template<>
    class/*or struct*/ multimap<unsigned long, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, struct std::less<unsigned long>, class std::allocator<struct std::pair<unsigned long const, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>>>> : public _Tree<class std::_Tmap_traits<unsigned long, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>, struct std::less<unsigned long>, class std::allocator<struct std::pair<unsigned long const, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>>>, 1>>
    {
    public:
    };
#endif
#endif


    class/*or struct*/ out_of_range : public logic_error
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::logic_error
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };

    template<typename T0, typename T2    >
    struct pair
    {
    public:
    };
#if 0 // Instances:
// <char const *, char const *>
#if 0
    template<>
    struct pair<char const *, char const *>
    {
    public:
    };
#endif
// <char const *const, class sophis::misc::fpml::alerts::AlertToolkit *>
#if 0
    template<>
    struct pair<char const *const, class sophis::misc::fpml::alerts::AlertToolkit *>
    {
    public:
    };
#endif
// <class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
#if 0
    template<>
    struct pair<class sophis::tools::dataModel::PlainValue const *const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
    {
    public:
    };
#endif
// <class sophis::xml::dataModel::XMLDataExporterImpl::PositionList, class sophis::xml::dataModel::XMLDataExporterImpl::PositionList>
#if 0
    template<>
    class/*or struct*/ pair<class sophis::xml::dataModel::XMLDataExporterImpl::PositionList, class sophis::xml::dataModel::XMLDataExporterImpl::PositionList>
    {
    public:
    };
#endif
// <class sophis::xml::util::XWString const, bool>
#if 0
    template<>
    struct pair<class sophis::xml::util::XWString const, bool>
    {
    public:
    };
#endif
// <class sophis::xml::util::XWString const, class sophis::xml::util::XWString>
#if 0
    template<>
    struct pair<class sophis::xml::util::XWString const, class sophis::xml::util::XWString>
    {
    public:
    };
#endif
// <class sophis::xml::util::XWString, class sophis::xml::util::XWString>
#if 0
    template<>
    struct pair<class sophis::xml::util::XWString, class sophis::xml::util::XWString>
    {
    public:
    };
#endif
// <class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>
#if 0
    template<>
    struct pair<class sophisTools::FlyWeightString const, class sophisTools::base::RefCountHandle<class sophis::xml::dataModel::DataFactory>>
    {
    public:
    };
#endif
// <class sophisTools::time::Time24 const, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>>
#if 0
    template<>
    struct pair<class sophisTools::time::Time24 const, class sophisTools::base::RefCountHandle<class sphSystem::thread::ScheduledAction>>
    {
    public:
    };
#endif
// <class std::_Tree_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>, bool>
#if 0
    template<>
    struct pair<class std::_Tree_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>, bool>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>
#if 0
    template<>
    struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, bool>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>
#if 0
    template<>
    struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class sophis::xml::dataModel::XMLDataExporterImpl::PositionListPair>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
#if 0
    template<>
    struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>
#if 0
    template<>
    struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>
#if 0
    template<>
    struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, struct SnapshotColumnDB_t>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, unsigned __int64>
#if 0
    template<>
    struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, unsigned __int64>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
#if 0
    template<>
    struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
    {
      // Functions:
      public: std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>(struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>> const &)
    public:
    };
#endif
// <class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>
#if 0
    template<>
    struct pair<class xercesc_3_2::DOMNode const *const, struct sophis::xml::dataModel::XMLDataImporterImpl::NodeInfo>
    {
    public:
    };
#endif
// <long const, class sophis::misc::fpml::quotation::QuotesByDate>
#if 0
    template<>
    struct pair<long const, class sophis::misc::fpml::quotation::QuotesByDate>
    {
    public:
    };
#endif
// <long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>
#if 0
    template<>
    struct pair<long const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>
    {
    public:
    };
#endif
// <long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>
#if 0
    template<>
    struct pair<long const, class std::vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>> *>
    {
    public:
    };
#endif
// <struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>
#if 0
    template<>
    struct pair<struct QuoteKey_t const, class std::map<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, double, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const, double>>>>
    {
    public:
    };
#endif
// <struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>
#if 0
    template<>
    struct pair<struct QuoteKey_t const, class std::vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>>
    {
    public:
    };
#endif
// <unsigned long const, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>>
#if 0
    template<>
    struct pair<unsigned long const, class sophisTools::base::RefCountHandle<class sophisTools::base::Runnable>>
    {
    public:
    };
#endif
#endif


#if 0
    template<>
    struct pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>
    {
    public:
    };
#endif

    class/*or struct*/ range_error : public runtime_error
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::runtime_error
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ runtime_error : public exception
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::exception
      // Owner: SophisSystem.dll
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };

    template<typename T0, typename T1, typename T3    >
    class set
    {
    public:
    };
#if 0 // Instances:
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
    template<>
    class set<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>> : public _Tree<class std::_Tset_traits<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, struct std::less<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, 0>>
    {
    public:
    };
#endif
// <long, struct std::less<long>, class std::allocator<long>>
#if 0
    template<>
    class set<long, struct std::less<long>, class std::allocator<long>>
    {
    public:
    };
#endif
#endif


    template<typename T1    >
    class shared_ptr
    {
    public:
    };
#if 0 // Instances:
// <class sophis::portfolio::ISRTaxLotPoolFactorHelper>
#if 0
    template<>
    class shared_ptr<class sophis::portfolio::ISRTaxLotPoolFactorHelper>
    {
    public:
    };
#endif
// <class sphSystem::thread::MultiActionThread>
#if 0
    template<>
    class shared_ptr<class sphSystem::thread::MultiActionThread>
    {
    public:
    };
#endif
// <class sphSystem::thread::PollingThread>
#if 0
    template<>
    class shared_ptr<class sphSystem::thread::PollingThread>
    {
    public:
    };
#endif
// <class sphSystem::thread::RunnableBase>
#if 0
    template<>
    class shared_ptr<class sphSystem::thread::RunnableBase>
    {
    public:
    };
#endif
#endif


    class/*or struct*/ system_error : public _System_error
    {
      // VFTable. Offset=0, Size=2, Start=2
      // Corresponding base: std::_System_error
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };

    template<typename T0, typename T2    >
    class vector
    {
    public:
    };
#if 0 // Instances:
// <__int64, class std::allocator<__int64>>
#if 0
    template<>
    class vector<__int64, class std::allocator<__int64>>
    {
    public:
    };
#endif
// <class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>>
#if 0
    template<>
    class/*or struct*/ vector<class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>>
    {
      // Functions:
      public: class std::vector<class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>> & std::vector<class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>>::operator=(class std::vector<class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>> &&)
      public: void std::vector<class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>>::push_back(class sophis::tools::CSRAbstractEvent *&&)
    public:
    };
#endif
// <class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>>
#if 0
    template<>
    class vector<class sophis::tools::CSRTagMetadata, class std::allocator<class sophis::tools::CSRTagMetadata>>
    {
    public:
    };
#endif
// <class sophis::tools::dataModel::Data const *, class std::allocator<class sophis::tools::dataModel::Data const *>>
#if 0
    template<>
    class/*or struct*/ vector<class sophis::tools::dataModel::Data const *, class std::allocator<class sophis::tools::dataModel::Data const *>>
    {
    public:
    };
#endif
// <class sophis::tools::dataModel::DataContainer const *, class std::allocator<class sophis::tools::dataModel::DataContainer const *>>
#if 0
    template<>
    class/*or struct*/ vector<class sophis::tools::dataModel::DataContainer const *, class std::allocator<class sophis::tools::dataModel::DataContainer const *>>
    {
    public:
    };
#endif
// <class sophisTools::base::RefCountHandle<class sophisTools::io::Library>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>>
#if 0
    template<>
    class/*or struct*/ vector<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>>
    {
      // Functions:
      public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>>> std::vector<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>>::begin(void)
      public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>>> std::vector<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::Library>>>::end(void)
    public:
    };
#endif
// <class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>>>
#if 0
    template<>
    class vector<class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>, class std::allocator<class sophisTools::base::RefCountHandle<class sophisTools::io::RandomAccessInputStream>>>
    {
    public:
    };
#endif
// <class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
#if 0
    template<>
    class vector<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>
    {
    public:
    };
#endif
// <long, class std::allocator<long>>
#if 0
    template<>
    class vector<long, class std::allocator<long>>
    {
    public:
    };
#endif
// <struct OCILobLocator const *, class std::allocator<struct OCILobLocator const *>>
#if 0
    template<>
    class vector<struct OCILobLocator const *, class std::allocator<struct OCILobLocator const *>>
    {
    public:
    };
#endif
// <struct PriceDB_t, class std::allocator<struct PriceDB_t>>
#if 0
    template<>
    class vector<struct PriceDB_t, class std::allocator<struct PriceDB_t>>
    {
    public:
    };
#endif
// <struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, class std::allocator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>>
#if 0
    template<>
    class vector<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave, class std::allocator<struct `private: class std::unordered_map<short, int, struct std::hash<short>, struct std::equal_to<short>, class std::allocator<struct std::pair<short const, int>>> __cdecl sophis::misc::fpml::quotation::QuotationsByInstrument::LoadFIDListCache(void)'::`2'::fidListSave>>
    {
    public:
    };
#endif
// <struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, class std::allocator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>>
#if 0
    template<>
    class vector<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal, class std::allocator<struct `public: virtual void __cdecl sophis::misc::fpml::entity::ProvisionEntityHandler::create(class sophis::tools::dataModel::Data const &)'::`71'::ReferringDeal>>
    {
    public:
    };
#endif
// <struct sophis::DAL::SSRepoMargin, class std::allocator<struct sophis::DAL::SSRepoMargin>>
#if 0
    template<>
    class/*or struct*/ vector<struct sophis::DAL::SSRepoMargin, class std::allocator<struct sophis::DAL::SSRepoMargin>>
    {
    public:
    };
#endif
// <struct sophis::listed_market::SeriesKey, class std::allocator<struct sophis::listed_market::SeriesKey>>
#if 0
    template<>
    class vector<struct sophis::listed_market::SeriesKey, class std::allocator<struct sophis::listed_market::SeriesKey>>
    {
    public:
    };
#endif
// <struct sophis::market_data::SSDividend, class std::allocator<struct sophis::market_data::SSDividend>>
#if 0
    template<>
    class/*or struct*/ vector<struct sophis::market_data::SSDividend, class std::allocator<struct sophis::market_data::SSDividend>>
    {
    public:
    };
#endif
// <struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping, class std::allocator<struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping>>
#if 0
    template<>
    class vector<struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping, class std::allocator<struct sophis::portfolio::CSRTaxLotHandler::SProvisionMapping>>
    {
    public:
    };
#endif
// <struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
#if 0
    template<>
    class vector<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>, class std::allocator<struct std::pair<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>
    {
    public:
    };
#endif
// <unsigned __int64, class std::allocator<unsigned __int64>>
#if 0
    template<>
    class vector<unsigned __int64, class std::allocator<unsigned __int64>>
    {
    public:
    };
#endif
// <unsigned char, class std::allocator<unsigned char>>
#if 0
    template<>
    class vector<unsigned char, class std::allocator<unsigned char>>
    {
    public:
    };
#endif
// <void const *, class std::allocator<void const *>>
#if 0
    template<>
    class vector<void const *, class std::allocator<void const *>>
    {
    public:
    };
#endif
#endif


#if 0
    template<>
    class vector<class sophis::tools::CSRAbstractEvent *, class std::allocator<class sophis::tools::CSRAbstractEvent *>>
    {
    public:
    };
#endif


    // Functions:
    void _Throw_C_error(int)
    void _Xbad_alloc(void)
    void _Xbad_function_call(void)
    void _Xlength_error(char const *)
    void _Xout_of_range(char const *)
    bool uncaught_exception(void)
  public:
  };

  class/*or struct*/ type_info
  {
    // VFTable. Offset=0, Size=1, Start=0
    // Owner: SophisSystem.dll
    // Owner: SophisXML.dll
    // Owner: SophisXmlTools.dll
    // Owner: SophisPop.dll
    // Added virtual functions:
    public: virtual void unknown_vf_0_0(void); // 0
    // VFTable with 0 offset end

  public:
  };

  class/*or struct*/ xercesc_3_2
  {
  public:
    // Nested containers:
    class/*or struct*/ AbstractDOMParser : public XMemory, public XMLDocumentHandler, public XMLErrorReporter, public XMLEntityHandler, public DocTypeHandler, public PSVIHandler
    {
#if 0 // All found virtual functions names:
      public: virtual void TextDecl(char16_t const *const, char16_t const *const)
      public: virtual void attDef(class xercesc_3_2::DTDElementDecl const &, class xercesc_3_2::DTDAttDef const &, bool)
      protected: virtual class xercesc_3_2::DOMAttr * createAttr(char16_t const *)
      protected: virtual class xercesc_3_2::DOMAttr * createAttrNS(char16_t const *, char16_t const *, char16_t const *, char16_t const *)
      protected: virtual class xercesc_3_2::DOMCDATASection * createCDATASection(char16_t const *, unsigned __int64)
      protected: virtual class xercesc_3_2::DOMElement * createElement(char16_t const *)
      protected: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *, char16_t const *, char16_t const *)
      protected: virtual class xercesc_3_2::DOMText * createText(char16_t const *, unsigned __int64)
      public: virtual void doctypeComment(char16_t const *const)
      public: virtual void doctypeDecl(class xercesc_3_2::DTDElementDecl const &, char16_t const *const, char16_t const *const, bool, bool)
      public: virtual void doctypePI(char16_t const *const, char16_t const *const)
      public: virtual void doctypeWhitespace(char16_t const *const, unsigned __int64)
      public: virtual void elementDecl(class xercesc_3_2::DTDElementDecl const &, bool)
      public: virtual void endAttList(class xercesc_3_2::DTDElementDecl const &)
      public: virtual void endDocument(void)
      public: virtual void endEntityReference(class xercesc_3_2::XMLEntityDecl const &)
      public: virtual void endExtSubset(void)
      public: virtual void endIntSubset(void)
      public: virtual void entityDecl(class xercesc_3_2::DTDEntityDecl const &, bool, bool)
      public: virtual void handleAttributesPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIAttributeList *)
      public: virtual void handleElementPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIElement *)
      public: virtual void handlePartialElementPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIElement *)
      public: virtual void ignorableWhitespace(char16_t const *const, unsigned __int64, bool)
      public: virtual void notationDecl(class xercesc_3_2::XMLNotationDecl const &, bool)
      public: virtual void resetDocType(void)
      public: virtual void resetDocument(void)
      public: virtual void setPSVIHandler(class xercesc_3_2::PSVIHandler *const)
      public: virtual void startAttList(class xercesc_3_2::DTDElementDecl const &)
      public: virtual void startExtSubset(void)
      public: virtual void startIntSubset(void)
#endif

      // VFTable. Offset=0, Size=20, Start=0
      // Corresponding base: xercesc_3_2::XMLDocumentHandler
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void docCharacters(char16_t const *const, unsigned __int64, bool); // 1 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void docComment(char16_t const *const); // 2 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void docPI(char16_t const *const, char16_t const *const); // 3 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void endDocument(void); // 4
      public: virtual void endElement(class xercesc_3_2::XMLElementDecl const &, unsigned int, bool, char16_t const *const); // 5 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void endEntityReference(class xercesc_3_2::XMLEntityDecl const &); // 6
      public: virtual void ignorableWhitespace(char16_t const *const, unsigned __int64, bool); // 7
      public: virtual void resetDocument(void); // 8
      public: virtual void startDocument(void); // 9 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void startElement(class xercesc_3_2::XMLElementDecl const &, unsigned int, char16_t const *const, class xercesc_3_2::RefVectorOf<class xercesc_3_2::XMLAttr> const &, unsigned __int64, bool, bool); // 10 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void startEntityReference(class xercesc_3_2::XMLEntityDecl const &); // 11 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void XMLDecl(char16_t const *const, char16_t const *const, char16_t const *const, char16_t const *const); // 12 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void setPSVIHandler(class xercesc_3_2::PSVIHandler *const); // 13
      protected: virtual class xercesc_3_2::DOMCDATASection * createCDATASection(char16_t const *, unsigned __int64); // 14
      protected: virtual class xercesc_3_2::DOMText * createText(char16_t const *, unsigned __int64); // 15
      protected: virtual class xercesc_3_2::DOMElement * createElement(char16_t const *); // 16
      protected: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *, char16_t const *, char16_t const *); // 17
      protected: virtual class xercesc_3_2::DOMAttr * createAttr(char16_t const *); // 18
      protected: virtual class xercesc_3_2::DOMAttr * createAttrNS(char16_t const *, char16_t const *, char16_t const *, char16_t const *); // 19
      // VFTable with 0 offset end

      // VFTable. Offset=24, Size=17, Start=17
      // Corresponding base: xercesc_3_2::DocTypeHandler
      // Overrides:
      public: virtual void attDef(class xercesc_3_2::DTDElementDecl const &, class xercesc_3_2::DTDAttDef const &, bool) override; // 1
      public: virtual void doctypeComment(char16_t const *const) override; // 2
      public: virtual void doctypeDecl(class xercesc_3_2::DTDElementDecl const &, char16_t const *const, char16_t const *const, bool, bool) override; // 3
      public: virtual void doctypePI(char16_t const *const, char16_t const *const) override; // 4
      public: virtual void doctypeWhitespace(char16_t const *const, unsigned __int64) override; // 5
      public: virtual void elementDecl(class xercesc_3_2::DTDElementDecl const &, bool) override; // 6
      public: virtual void endAttList(class xercesc_3_2::DTDElementDecl const &) override; // 7
      public: virtual void endIntSubset(void) override; // 8
      public: virtual void endExtSubset(void) override; // 9
      public: virtual void entityDecl(class xercesc_3_2::DTDEntityDecl const &, bool, bool) override; // 10
      public: virtual void resetDocType(void) override; // 11
      public: virtual void notationDecl(class xercesc_3_2::XMLNotationDecl const &, bool) override; // 12
      public: virtual void startAttList(class xercesc_3_2::DTDElementDecl const &) override; // 13
      public: virtual void startIntSubset(void) override; // 14
      public: virtual void startExtSubset(void) override; // 15
      public: virtual void TextDecl(char16_t const *const, char16_t const *const) override; // 16
      // VFTable with 24 offset end

      // VFTable. Offset=32, Size=4, Start=4
      // Corresponding base: xercesc_3_2::PSVIHandler
      // Overrides:
      public: virtual void handleElementPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIElement *) override; // 1
      public: virtual void handlePartialElementPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIElement *) override; // 2
      public: virtual void handleAttributesPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIAttributeList *) override; // 3
      // VFTable with 32 offset end

    public:
    };

    class ArrayIndexOutOfBoundsException
    {
      // Functions:
      public: ArrayIndexOutOfBoundsException(class xercesc_3_2::ArrayIndexOutOfBoundsException const &)
      public: ArrayIndexOutOfBoundsException(char const *const, unsigned __int64, enum xercesc_3_2::XMLExcepts::Codes, class xercesc_3_2::MemoryManager *)
#if 0 // All found virtual functions names:
      public: virtual ~ArrayIndexOutOfBoundsException(void)
#endif

    public:
    };

    class/*or struct*/ Base64
    {
    public:
      // Enumerations:
      enum Conformance : int {
      };

      // Static functions:
      public: static unsigned char * decode(unsigned char const *const, unsigned __int64 *, class xercesc_3_2::MemoryManager *const, enum Conformance)
      public: static unsigned char * encode(unsigned char const *const, unsigned __int64, unsigned __int64 *, class xercesc_3_2::MemoryManager *const)
    public:
    };

    class BinInputStream : public XMemory
    {
      // Functions:
      protected: BinInputStream(void)
#if 0 // All found virtual functions names:
      public: virtual ~BinInputStream(void)
      public: virtual char16_t const * getEncoding(void) const
#endif

      // VFTable. Offset=0, Size=5, Start=0
      // Added virtual functions:
      public: virtual ~BinInputStream(void); // 0
      public: virtual unsigned __int64 sophis::xml::io::BinInputStreamAdapter::curPos(void) const; // 1 (io::io::io::BinInputStreamAdapter)
      public: virtual unsigned __int64 sophis::xml::io::BinInputStreamAdapter::readBytes(unsigned char *const, unsigned __int64); // 2 (io::io::io::BinInputStreamAdapter)
      public: virtual char16_t const * sophis::xml::io::BinInputStreamAdapter::getContentType(void) const; // 3 (io::io::io::BinInputStreamAdapter)
      public: virtual char16_t const * getEncoding(void) const; // 4
      // VFTable with 0 offset end

    public:
    };

    class BinOutputStream : public XMemory
    {
      // Functions:
      protected: BinOutputStream(void)
#if 0 // All found virtual functions names:
      public: virtual ~BinOutputStream(void)
#endif

      // VFTable. Offset=0, Size=0, Start=0
      // VFTable with 0 offset end

    public:
    };

    class ComplexTypeInfo
    {
      // Functions:
      public: class xercesc_3_2::SchemaElementDecl const * elementAt(unsigned __int64) const
      public: unsigned __int64 elementCount(void) const
      public: class xercesc_3_2::ContentSpecNode * getContentSpec(void) const
      public: char16_t const * getTypeLocalName(void) const
      public: char16_t const * getTypeUri(void) const
    public:
    };

    class ContentSpecNode
    {
    public:
    };

    class DOMAttr
    {
    public:
    };

    class DOMCDATASection
    {
    public:
    };

    class DOMChildNode
    {
    public:
    };

    class DOMComment
    {
    public:
    };

    class DOMConfiguration
    {
      // VFTable. Offset=0, Size=7, Start=0
      // Added virtual functions:
      public: virtual void setParameter(char16_t const *, bool); // 0 (xercesc_3_2::DOMLSSerializerImpl)
      public: virtual void setParameter(char16_t const *, void const *); // 1 (xercesc_3_2::DOMLSSerializerImpl)
      public: virtual void const * getParameter(char16_t const *) const; // 2 (xercesc_3_2::DOMLSSerializerImpl)
      public: virtual bool canSetParameter(char16_t const *, bool) const; // 3 (xercesc_3_2::DOMLSSerializerImpl)
      public: virtual bool canSetParameter(char16_t const *, void const *) const; // 4 (xercesc_3_2::DOMLSSerializerImpl)
      public: virtual class xercesc_3_2::DOMStringList const * getParameterNames(void) const; // 5 (xercesc_3_2::DOMLSSerializerImpl)
      public: virtual void unknown_vf_0_6(void); // 6
      // VFTable with 0 offset end

    public:
    };

    class DOMDocument : public DOMDocumentRange, public DOMXPathEvaluator, public DOMDocumentTraversal, public DOMNode
    {
      // VFTable. Offset=0, Size=38, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual class xercesc_3_2::DOMRange * createRange(void); // 1 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMElement * createElement(char16_t const *); // 2 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMDocumentFragment * createDocumentFragment(void); // 3 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMText * createTextNode(char16_t const *); // 4 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMComment * createComment(char16_t const *); // 5 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMCDATASection * createCDATASection(char16_t const *); // 6 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMProcessingInstruction * createProcessingInstruction(char16_t const *, char16_t const *); // 7 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMAttr * createAttribute(char16_t const *); // 8 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMEntityReference * createEntityReference(char16_t const *); // 9 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMDocumentType * getDoctype(void) const; // 10 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMImplementation * getImplementation(void) const; // 11 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMElement * getDocumentElement(void) const; // 12 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMNodeList * getElementsByTagName(char16_t const *) const; // 13 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMNode * importNode(class xercesc_3_2::DOMNode const *, bool); // 14 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *, unsigned __int64, unsigned __int64); // 15 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *); // 16 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMAttr * createAttributeNS(char16_t const *, char16_t const *); // 17 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMNodeList * getElementsByTagNameNS(char16_t const *, char16_t const *) const; // 18 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMElement * getElementById(char16_t const *) const; // 19 (xercesc_3_2::DOMDocumentImpl)
      public: virtual char16_t const * getInputEncoding(void) const; // 20 (xercesc_3_2::DOMDocumentImpl)
      public: virtual char16_t const * getXmlEncoding(void) const; // 21 (xercesc_3_2::DOMDocumentImpl)
      public: virtual bool getXmlStandalone(void) const; // 22 (xercesc_3_2::DOMDocumentImpl)
      public: virtual void setXmlStandalone(bool); // 23 (xercesc_3_2::DOMDocumentImpl)
      public: virtual char16_t const * getXmlVersion(void) const; // 24 (xercesc_3_2::DOMDocumentImpl)
      public: virtual void setXmlVersion(char16_t const *); // 25 (xercesc_3_2::DOMDocumentImpl)
      public: virtual char16_t const * getDocumentURI(void) const; // 26 (xercesc_3_2::DOMDocumentImpl)
      public: virtual void setDocumentURI(char16_t const *); // 27 (xercesc_3_2::DOMDocumentImpl)
      public: virtual bool getStrictErrorChecking(void) const; // 28 (xercesc_3_2::DOMDocumentImpl)
      public: virtual void setStrictErrorChecking(bool); // 29 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMNode * renameNode(class xercesc_3_2::DOMNode *, char16_t const *, char16_t const *); // 30 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMNode * adoptNode(class xercesc_3_2::DOMNode *); // 31 (xercesc_3_2::DOMDocumentImpl)
      public: virtual void normalizeDocument(void); // 32 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMConfiguration * getDOMConfig(void) const; // 33 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMEntity * createEntity(char16_t const *); // 34 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMDocumentType * createDocumentType(char16_t const *, char16_t const *, char16_t const *); // 35 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMDocumentType * createDocumentType(char16_t const *); // 36 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMNotation * createNotation(char16_t const *); // 37 (xercesc_3_2::DOMDocumentImpl)
      // VFTable with 0 offset end

    public:
    };

    class DOMDocumentFragment
    {
    public:
    };

    class/*or struct*/ DOMDocumentImpl : public XMemory, public DOMMemoryManager, public DOMDocument, public HasDOMNodeImpl, public HasDOMParentImpl
    {
      // Functions:
      public: DOMDocumentImpl(class xercesc_3_2::DOMImplementation *, class xercesc_3_2::MemoryManager *const)
      public: DOMDocumentImpl(char16_t const *, char16_t const *, class xercesc_3_2::DOMDocumentType *, class xercesc_3_2::DOMImplementation *, class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
      public: virtual ~DOMDocumentImpl(void)
      public: virtual class xercesc_3_2::DOMNode * adoptNode(class xercesc_3_2::DOMNode *)
      public: virtual void * allocate(unsigned __int64)
      public: virtual void * allocate(unsigned __int64, enum xercesc_3_2::DOMMemoryManager::NodeObjectType)
      public: virtual class xercesc_3_2::DOMNode * appendChild(class xercesc_3_2::DOMNode *)
      public: virtual void changed(void)
      public: virtual int changes(void) const
      public: virtual class xercesc_3_2::DOMNode * cloneNode(bool) const
      public: virtual char16_t * cloneString(char16_t const *)
      public: virtual short compareDocumentPosition(class xercesc_3_2::DOMNode const *) const
      public: virtual class xercesc_3_2::DOMAttr * createAttribute(char16_t const *)
      public: virtual class xercesc_3_2::DOMAttr * createAttributeNS(char16_t const *, char16_t const *)
      public: virtual class xercesc_3_2::DOMCDATASection * createCDATASection(char16_t const *)
      public: virtual class xercesc_3_2::DOMComment * createComment(char16_t const *)
      public: virtual class xercesc_3_2::DOMDocumentFragment * createDocumentFragment(void)
      public: virtual class xercesc_3_2::DOMDocumentType * createDocumentType(char16_t const *, char16_t const *, char16_t const *)
      public: virtual class xercesc_3_2::DOMDocumentType * createDocumentType(char16_t const *)
      public: virtual class xercesc_3_2::DOMElement * createElement(char16_t const *)
      public: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *)
      public: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *, unsigned __int64, unsigned __int64)
      public: virtual class xercesc_3_2::DOMElement * createElementNoCheck(char16_t const *)
      public: virtual class xercesc_3_2::DOMEntity * createEntity(char16_t const *)
      public: virtual class xercesc_3_2::DOMEntityReference * createEntityReference(char16_t const *)
      public: virtual class xercesc_3_2::DOMXPathExpression * createExpression(char16_t const *, class xercesc_3_2::DOMXPathNSResolver const *)
      public: virtual class xercesc_3_2::DOMXPathNSResolver * createNSResolver(class xercesc_3_2::DOMNode const *)
      public: virtual class xercesc_3_2::DOMNodeIterator * createNodeIterator(class xercesc_3_2::DOMNode *, unsigned long, class xercesc_3_2::DOMNodeFilter *, bool)
      public: virtual class xercesc_3_2::DOMNotation * createNotation(char16_t const *)
      public: virtual class xercesc_3_2::DOMProcessingInstruction * createProcessingInstruction(char16_t const *, char16_t const *)
      public: virtual class xercesc_3_2::DOMRange * createRange(void)
      public: virtual class xercesc_3_2::DOMText * createTextNode(char16_t const *)
      public: virtual class xercesc_3_2::DOMTreeWalker * createTreeWalker(class xercesc_3_2::DOMNode *, unsigned long, class xercesc_3_2::DOMNodeFilter *, bool)
      public: virtual class xercesc_3_2::DOMXPathResult * evaluate(char16_t const *, class xercesc_3_2::DOMNode const *, class xercesc_3_2::DOMXPathNSResolver const *, enum xercesc_3_2::DOMXPathResult::ResultType, class xercesc_3_2::DOMXPathResult *)
      public: virtual class xercesc_3_2::DOMNamedNodeMap * getAttributes(void) const
      public: virtual char16_t const * getBaseURI(void) const
      public: virtual class xercesc_3_2::DOMNodeList * getChildNodes(void) const
      public: virtual class xercesc_3_2::DOMConfiguration * getDOMConfig(void) const
      public: virtual class xercesc_3_2::DOMDocumentType * getDoctype(void) const
      public: virtual class xercesc_3_2::DOMElement * getDocumentElement(void) const
      public: virtual char16_t const * getDocumentURI(void) const
      public: virtual class xercesc_3_2::DOMElement * getElementById(char16_t const *) const
      public: virtual class xercesc_3_2::DOMNodeList * getElementsByTagName(char16_t const *) const
      public: virtual class xercesc_3_2::DOMNodeList * getElementsByTagNameNS(char16_t const *, char16_t const *) const
      public: virtual void * getFeature(char16_t const *, char16_t const *) const
      public: virtual class xercesc_3_2::DOMNode * getFirstChild(void) const
      public: virtual class xercesc_3_2::DOMImplementation * getImplementation(void) const
      public: virtual char16_t const * getInputEncoding(void) const
      public: virtual class xercesc_3_2::DOMNode * getLastChild(void) const
      public: virtual char16_t const * getLocalName(void) const
      public: virtual unsigned __int64 getMemoryAllocationBlockSize(void) const
      public: virtual char16_t const * getNamespaceURI(void) const
      public: virtual class xercesc_3_2::DOMNode * getNextSibling(void) const
      public: virtual class xercesc_3_2::DOMNodeImpl * getNodeImpl(void)
      public: virtual class xercesc_3_2::DOMNodeImpl const * getNodeImpl(void) const
      public: virtual class xercesc_3_2::RefVectorOf<class xercesc_3_2::DOMNodeIteratorImpl> * getNodeIterators(void) const
      public: virtual char16_t const * getNodeName(void) const
      public: virtual enum xercesc_3_2::DOMNode::NodeType getNodeType(void) const
      public: virtual char16_t const * getNodeValue(void) const
      public: virtual class xercesc_3_2::DOMDocument * getOwnerDocument(void) const
      public: virtual class xercesc_3_2::DOMNode * getParentNode(void) const
      public: virtual class xercesc_3_2::DOMParentNode * getParentNodeImpl(void)
      public: virtual class xercesc_3_2::DOMParentNode const * getParentNodeImpl(void) const
      public: virtual char16_t const * getPrefix(void) const
      public: virtual class xercesc_3_2::DOMNode * getPreviousSibling(void) const
      public: virtual class xercesc_3_2::RefVectorOf<class xercesc_3_2::DOMRangeImpl> * getRanges(void) const
      public: virtual bool getStrictErrorChecking(void) const
      public: virtual char16_t const * getTextContent(void) const
      public: virtual void * getUserData(char16_t const *) const
      public: virtual char16_t const * getXmlEncoding(void) const
      public: virtual bool getXmlStandalone(void) const
      public: virtual char16_t const * getXmlVersion(void) const
      public: virtual bool hasAttributes(void) const
      public: virtual bool hasChildNodes(void) const
      protected: virtual class xercesc_3_2::DOMNode * importNode(class xercesc_3_2::DOMNode const *, bool, bool)
      public: virtual class xercesc_3_2::DOMNode * importNode(class xercesc_3_2::DOMNode const *, bool)
      public: virtual class xercesc_3_2::DOMNode * insertBefore(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *)
      public: virtual bool isDefaultNamespace(char16_t const *) const
      public: virtual bool isEqualNode(class xercesc_3_2::DOMNode const *) const
      public: virtual bool isSameNode(class xercesc_3_2::DOMNode const *) const
      public: virtual bool isSupported(char16_t const *, char16_t const *) const
      public: virtual char16_t const * lookupNamespaceURI(char16_t const *) const
      public: virtual char16_t const * lookupPrefix(char16_t const *) const
      public: virtual void normalize(void)
      public: virtual void normalizeDocument(void)
      public: virtual void release(class xercesc_3_2::DOMNode *, enum xercesc_3_2::DOMMemoryManager::NodeObjectType)
      public: virtual void release(void *)
      public: virtual void release(void)
      public: virtual class xercesc_3_2::DOMNode * removeChild(class xercesc_3_2::DOMNode *)
      public: virtual void removeNodeIterator(class xercesc_3_2::DOMNodeIteratorImpl *)
      public: virtual void removeRange(class xercesc_3_2::DOMRangeImpl *)
      public: virtual class xercesc_3_2::DOMNode * renameNode(class xercesc_3_2::DOMNode *, char16_t const *, char16_t const *)
      public: virtual class xercesc_3_2::DOMNode * replaceChild(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *)
      public: virtual void setDocumentURI(char16_t const *)
      public: virtual void setMemoryAllocationBlockSize(unsigned __int64)
      public: virtual void setNodeValue(char16_t const *)
      public: virtual void setPrefix(char16_t const *)
      public: virtual void setStrictErrorChecking(bool)
      public: virtual void setTextContent(char16_t const *)
      public: virtual void * setUserData(char16_t const *, void *, class xercesc_3_2::DOMUserDataHandler *)
      public: virtual void setXmlStandalone(bool)
      public: virtual void setXmlVersion(char16_t const *)
#endif

      // VFTable. Offset=0, Size=16, Start=0
      // Corresponding base: xercesc_3_2::DOMMemoryManager
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual ~DOMDocumentImpl(void); // 0
      public: virtual unsigned __int64 getMemoryAllocationBlockSize(void) const; // 1
      public: virtual void setMemoryAllocationBlockSize(unsigned __int64); // 2
      public: virtual void * allocate(unsigned __int64, enum xercesc_3_2::DOMMemoryManager::NodeObjectType); // 3
      public: virtual void * allocate(unsigned __int64); // 4
      public: virtual void release(class xercesc_3_2::DOMNode *, enum xercesc_3_2::DOMMemoryManager::NodeObjectType); // 5
      public: virtual char16_t * cloneString(char16_t const *); // 6
      public: virtual void release(void *); // 7
      public: virtual class xercesc_3_2::DOMElement * createElementNoCheck(char16_t const *); // 8
      public: virtual class xercesc_3_2::RefVectorOf<class xercesc_3_2::DOMRangeImpl> * getRanges(void) const; // 9
      public: virtual class xercesc_3_2::RefVectorOf<class xercesc_3_2::DOMNodeIteratorImpl> * getNodeIterators(void) const; // 10
      public: virtual void removeRange(class xercesc_3_2::DOMRangeImpl *); // 11
      public: virtual void removeNodeIterator(class xercesc_3_2::DOMNodeIteratorImpl *); // 12
      public: virtual void changed(void); // 13
      public: virtual int changes(void) const; // 14
      protected: virtual class xercesc_3_2::DOMNode * importNode(class xercesc_3_2::DOMNode const *, bool, bool); // 15
      // VFTable with 0 offset end

      // VFTable. Offset=8, Size=38, Start=38
      // Corresponding base: xercesc_3_2::DOMDocument
      // Owner: SophisXML.dll
      // public: virtual ~DOMDocumentImpl(void); // 0
      // Overrides:
      public: virtual class xercesc_3_2::DOMRange * createRange(void) override; // 1
      public: virtual class xercesc_3_2::DOMElement * createElement(char16_t const *) override; // 2
      public: virtual class xercesc_3_2::DOMDocumentFragment * createDocumentFragment(void) override; // 3
      public: virtual class xercesc_3_2::DOMText * createTextNode(char16_t const *) override; // 4
      public: virtual class xercesc_3_2::DOMComment * createComment(char16_t const *) override; // 5
      public: virtual class xercesc_3_2::DOMCDATASection * createCDATASection(char16_t const *) override; // 6
      public: virtual class xercesc_3_2::DOMProcessingInstruction * createProcessingInstruction(char16_t const *, char16_t const *) override; // 7
      public: virtual class xercesc_3_2::DOMAttr * createAttribute(char16_t const *) override; // 8
      public: virtual class xercesc_3_2::DOMEntityReference * createEntityReference(char16_t const *) override; // 9
      public: virtual class xercesc_3_2::DOMDocumentType * getDoctype(void) const override; // 10
      public: virtual class xercesc_3_2::DOMImplementation * getImplementation(void) const override; // 11
      public: virtual class xercesc_3_2::DOMElement * getDocumentElement(void) const override; // 12
      public: virtual class xercesc_3_2::DOMNodeList * getElementsByTagName(char16_t const *) const override; // 13
      public: virtual class xercesc_3_2::DOMNode * importNode(class xercesc_3_2::DOMNode const *, bool) override; // 14
      public: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *, unsigned __int64, unsigned __int64) override; // 15
      public: virtual class xercesc_3_2::DOMElement * createElementNS(char16_t const *, char16_t const *) override; // 16
      public: virtual class xercesc_3_2::DOMAttr * createAttributeNS(char16_t const *, char16_t const *) override; // 17
      public: virtual class xercesc_3_2::DOMNodeList * getElementsByTagNameNS(char16_t const *, char16_t const *) const override; // 18
      public: virtual class xercesc_3_2::DOMElement * getElementById(char16_t const *) const override; // 19
      public: virtual char16_t const * getInputEncoding(void) const override; // 20
      public: virtual char16_t const * getXmlEncoding(void) const override; // 21
      public: virtual bool getXmlStandalone(void) const override; // 22
      public: virtual void setXmlStandalone(bool) override; // 23
      public: virtual char16_t const * getXmlVersion(void) const override; // 24
      public: virtual void setXmlVersion(char16_t const *) override; // 25
      public: virtual char16_t const * getDocumentURI(void) const override; // 26
      public: virtual void setDocumentURI(char16_t const *) override; // 27
      public: virtual bool getStrictErrorChecking(void) const override; // 28
      public: virtual void setStrictErrorChecking(bool) override; // 29
      public: virtual class xercesc_3_2::DOMNode * renameNode(class xercesc_3_2::DOMNode *, char16_t const *, char16_t const *) override; // 30
      public: virtual class xercesc_3_2::DOMNode * adoptNode(class xercesc_3_2::DOMNode *) override; // 31
      public: virtual void normalizeDocument(void) override; // 32
      public: virtual class xercesc_3_2::DOMConfiguration * getDOMConfig(void) const override; // 33
      public: virtual class xercesc_3_2::DOMEntity * createEntity(char16_t const *) override; // 34
      public: virtual class xercesc_3_2::DOMDocumentType * createDocumentType(char16_t const *, char16_t const *, char16_t const *) override; // 35
      public: virtual class xercesc_3_2::DOMDocumentType * createDocumentType(char16_t const *) override; // 36
      public: virtual class xercesc_3_2::DOMNotation * createNotation(char16_t const *) override; // 37
      // VFTable with 8 offset end

      // VFTable. Offset=16, Size=4, Start=4
      // Corresponding base: xercesc_3_2::DOMXPathEvaluator
      // Owner: SophisXML.dll
      // public: virtual ~DOMDocumentImpl(void); // 0
      // Overrides:
      public: virtual class xercesc_3_2::DOMXPathExpression * createExpression(char16_t const *, class xercesc_3_2::DOMXPathNSResolver const *) override; // 1
      public: virtual class xercesc_3_2::DOMXPathNSResolver * createNSResolver(class xercesc_3_2::DOMNode const *) override; // 2
      public: virtual class xercesc_3_2::DOMXPathResult * evaluate(char16_t const *, class xercesc_3_2::DOMNode const *, class xercesc_3_2::DOMXPathNSResolver const *, enum xercesc_3_2::DOMXPathResult::ResultType, class xercesc_3_2::DOMXPathResult *) override; // 3
      // VFTable with 16 offset end

      // VFTable. Offset=24, Size=3, Start=3
      // Corresponding base: xercesc_3_2::DOMDocumentTraversal
      // Owner: SophisXML.dll
      // public: virtual ~DOMDocumentImpl(void); // 0
      // Overrides:
      public: virtual class xercesc_3_2::DOMNodeIterator * createNodeIterator(class xercesc_3_2::DOMNode *, unsigned long, class xercesc_3_2::DOMNodeFilter *, bool) override; // 1
      public: virtual class xercesc_3_2::DOMTreeWalker * createTreeWalker(class xercesc_3_2::DOMNode *, unsigned long, class xercesc_3_2::DOMNodeFilter *, bool) override; // 2
      // VFTable with 24 offset end

      // VFTable. Offset=32, Size=39, Start=39
      // Corresponding base: xercesc_3_2::DOMNode
      // Owner: SophisXML.dll
      // public: virtual ~DOMDocumentImpl(void); // 0
      // Overrides:
      public: virtual char16_t const * getNodeName(void) const override; // 1
      public: virtual char16_t const * getNodeValue(void) const override; // 2
      public: virtual enum xercesc_3_2::DOMNode::NodeType getNodeType(void) const override; // 3
      public: virtual class xercesc_3_2::DOMNode * getParentNode(void) const override; // 4
      public: virtual class xercesc_3_2::DOMNodeList * getChildNodes(void) const override; // 5
      public: virtual class xercesc_3_2::DOMNode * getFirstChild(void) const override; // 6
      public: virtual class xercesc_3_2::DOMNode * getLastChild(void) const override; // 7
      public: virtual class xercesc_3_2::DOMNode * getPreviousSibling(void) const override; // 8
      public: virtual class xercesc_3_2::DOMNode * getNextSibling(void) const override; // 9
      public: virtual class xercesc_3_2::DOMNamedNodeMap * getAttributes(void) const override; // 10
      public: virtual class xercesc_3_2::DOMDocument * getOwnerDocument(void) const override; // 11
      public: virtual class xercesc_3_2::DOMNode * cloneNode(bool) const override; // 12
      public: virtual class xercesc_3_2::DOMNode * insertBefore(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *) override; // 13
      public: virtual class xercesc_3_2::DOMNode * replaceChild(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *) override; // 14
      public: virtual class xercesc_3_2::DOMNode * removeChild(class xercesc_3_2::DOMNode *) override; // 15
      public: virtual class xercesc_3_2::DOMNode * appendChild(class xercesc_3_2::DOMNode *) override; // 16
      public: virtual bool hasChildNodes(void) const override; // 17
      public: virtual void setNodeValue(char16_t const *) override; // 18
      public: virtual void normalize(void) override; // 19
      public: virtual bool isSupported(char16_t const *, char16_t const *) const override; // 20
      public: virtual char16_t const * getNamespaceURI(void) const override; // 21
      public: virtual char16_t const * getPrefix(void) const override; // 22
      public: virtual char16_t const * getLocalName(void) const override; // 23
      public: virtual void setPrefix(char16_t const *) override; // 24
      public: virtual bool hasAttributes(void) const override; // 25
      public: virtual bool isSameNode(class xercesc_3_2::DOMNode const *) const override; // 26
      public: virtual bool isEqualNode(class xercesc_3_2::DOMNode const *) const override; // 27
      public: virtual void * setUserData(char16_t const *, void *, class xercesc_3_2::DOMUserDataHandler *) override; // 28
      public: virtual void * getUserData(char16_t const *) const override; // 29
      public: virtual char16_t const * getBaseURI(void) const override; // 30
      public: virtual short compareDocumentPosition(class xercesc_3_2::DOMNode const *) const override; // 31
      public: virtual char16_t const * getTextContent(void) const override; // 32
      public: virtual void setTextContent(char16_t const *) override; // 33
      public: virtual char16_t const * lookupPrefix(char16_t const *) const override; // 34
      public: virtual bool isDefaultNamespace(char16_t const *) const override; // 35
      public: virtual char16_t const * lookupNamespaceURI(char16_t const *) const override; // 36
      public: virtual void * getFeature(char16_t const *, char16_t const *) const override; // 37
      public: virtual void release(void) override; // 38
      // VFTable with 32 offset end

      // VFTable. Offset=40, Size=3, Start=3
      // Corresponding base: xercesc_3_2::HasDOMNodeImpl
      // Owner: SophisXML.dll
      // public: virtual ~DOMDocumentImpl(void); // 0
      // Overrides:
      public: virtual class xercesc_3_2::DOMNodeImpl const * getNodeImpl(void) const override; // 1
      public: virtual class xercesc_3_2::DOMNodeImpl * getNodeImpl(void) override; // 2
      // VFTable with 40 offset end

      // VFTable. Offset=48, Size=3, Start=3
      // Corresponding base: xercesc_3_2::HasDOMParentImpl
      // Owner: SophisXML.dll
      // public: virtual ~DOMDocumentImpl(void); // 0
      // Overrides:
      public: virtual class xercesc_3_2::DOMParentNode const * getParentNodeImpl(void) const override; // 1
      public: virtual class xercesc_3_2::DOMParentNode * getParentNodeImpl(void) override; // 2
      // VFTable with 48 offset end

    public:
    };

    class/*or struct*/ DOMDocumentRange
    {
    public:
    };

    class/*or struct*/ DOMDocumentTraversal
    {
      // VFTable. Offset=0, Size=3, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual class xercesc_3_2::DOMNodeIterator * createNodeIterator(class xercesc_3_2::DOMNode *, unsigned long, class xercesc_3_2::DOMNodeFilter *, bool); // 1 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMTreeWalker * createTreeWalker(class xercesc_3_2::DOMNode *, unsigned long, class xercesc_3_2::DOMNodeFilter *, bool); // 2 (xercesc_3_2::DOMDocumentImpl)
      // VFTable with 0 offset end

    public:
    };

    class DOMDocumentType : public DOMNode
    {
      // Warning: Greater base vftable size!
      // VFTable. Offset=0, Size=0, Start=39
      // Corresponding base: xercesc_3_2::DOMNode
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ DOMDocumentTypeImpl : public DOMDocumentType, public HasDOMNodeImpl, public HasDOMParentImpl, public HasDOMChildImpl
    {
      // Functions:
      public: DOMDocumentTypeImpl(class xercesc_3_2::DOMDocument *, char16_t const *, char16_t const *, char16_t const *, bool)
#if 0 // All found virtual functions names:
      public: virtual ~DOMDocumentTypeImpl(void)
      public: virtual class xercesc_3_2::DOMNode * appendChild(class xercesc_3_2::DOMNode *)
      public: virtual class xercesc_3_2::DOMNode * cloneNode(bool) const
      public: virtual short compareDocumentPosition(class xercesc_3_2::DOMNode const *) const
      public: virtual class xercesc_3_2::DOMNamedNodeMap * getAttributes(void) const
      public: virtual char16_t const * getBaseURI(void) const
      public: virtual class xercesc_3_2::DOMChildNode * getChildNodeImpl(void)
      public: virtual class xercesc_3_2::DOMChildNode const * getChildNodeImpl(void) const
      public: virtual class xercesc_3_2::DOMNodeList * getChildNodes(void) const
      public: virtual class xercesc_3_2::DOMNamedNodeMap * getElements(void) const
      public: virtual class xercesc_3_2::DOMNamedNodeMap * getEntities(void) const
      public: virtual void * getFeature(char16_t const *, char16_t const *) const
      public: virtual class xercesc_3_2::DOMNode * getFirstChild(void) const
      public: virtual char16_t const * getInternalSubset(void) const
      public: virtual class xercesc_3_2::DOMNode * getLastChild(void) const
      public: virtual char16_t const * getLocalName(void) const
      public: virtual char16_t const * getName(void) const
      public: virtual char16_t const * getNamespaceURI(void) const
      public: virtual class xercesc_3_2::DOMNode * getNextSibling(void) const
      public: virtual class xercesc_3_2::DOMNodeImpl * getNodeImpl(void)
      public: virtual class xercesc_3_2::DOMNodeImpl const * getNodeImpl(void) const
      public: virtual char16_t const * getNodeName(void) const
      public: virtual enum xercesc_3_2::DOMNode::NodeType getNodeType(void) const
      public: virtual char16_t const * getNodeValue(void) const
      public: virtual class xercesc_3_2::DOMNamedNodeMap * getNotations(void) const
      public: virtual class xercesc_3_2::DOMDocument * getOwnerDocument(void) const
      public: virtual class xercesc_3_2::DOMNode * getParentNode(void) const
      public: virtual class xercesc_3_2::DOMParentNode * getParentNodeImpl(void)
      public: virtual class xercesc_3_2::DOMParentNode const * getParentNodeImpl(void) const
      public: virtual char16_t const * getPrefix(void) const
      public: virtual class xercesc_3_2::DOMNode * getPreviousSibling(void) const
      public: virtual char16_t const * getPublicId(void) const
      public: virtual char16_t const * getSystemId(void) const
      public: virtual char16_t const * getTextContent(void) const
      public: virtual void * getUserData(char16_t const *) const
      public: virtual bool hasAttributes(void) const
      public: virtual bool hasChildNodes(void) const
      public: virtual class xercesc_3_2::DOMNode * insertBefore(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *)
      public: virtual bool isDefaultNamespace(char16_t const *) const
      public: virtual bool isEqualNode(class xercesc_3_2::DOMNode const *) const
      public: virtual bool isSameNode(class xercesc_3_2::DOMNode const *) const
      public: virtual bool isSupported(char16_t const *, char16_t const *) const
      public: virtual char16_t const * lookupNamespaceURI(char16_t const *) const
      public: virtual char16_t const * lookupPrefix(char16_t const *) const
      public: virtual void normalize(void)
      public: virtual void release(void)
      public: virtual class xercesc_3_2::DOMNode * removeChild(class xercesc_3_2::DOMNode *)
      public: virtual class xercesc_3_2::DOMNode * replaceChild(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *)
      protected: virtual void setInternalSubset(char16_t const *)
      public: virtual void setNodeValue(char16_t const *)
      public: virtual void setOwnerDocument(class xercesc_3_2::DOMDocument *)
      public: virtual void setPrefix(char16_t const *)
      protected: virtual void setPublicId(char16_t const *)
      public: virtual void setReadOnly(bool, bool)
      protected: virtual void setSystemId(char16_t const *)
      public: virtual void setTextContent(char16_t const *)
      public: virtual void * setUserData(char16_t const *, void *, class xercesc_3_2::DOMUserDataHandler *)
#endif

      // VFTable. Offset=0, Size=51, Start=0
      // Corresponding base: xercesc_3_2::DOMDocumentType
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual ~DOMDocumentTypeImpl(void); // 0
      public: virtual char16_t const * getNodeName(void) const; // 1
      public: virtual char16_t const * getNodeValue(void) const; // 2
      public: virtual enum xercesc_3_2::DOMNode::NodeType getNodeType(void) const; // 3
      public: virtual class xercesc_3_2::DOMNode * getParentNode(void) const; // 4
      public: virtual class xercesc_3_2::DOMNodeList * getChildNodes(void) const; // 5
      public: virtual class xercesc_3_2::DOMNode * getFirstChild(void) const; // 6
      public: virtual class xercesc_3_2::DOMNode * getLastChild(void) const; // 7
      public: virtual class xercesc_3_2::DOMNode * getPreviousSibling(void) const; // 8
      public: virtual class xercesc_3_2::DOMNode * getNextSibling(void) const; // 9
      public: virtual class xercesc_3_2::DOMNamedNodeMap * getAttributes(void) const; // 10
      public: virtual class xercesc_3_2::DOMDocument * getOwnerDocument(void) const; // 11
      public: virtual class xercesc_3_2::DOMNode * cloneNode(bool) const; // 12
      public: virtual class xercesc_3_2::DOMNode * insertBefore(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *); // 13
      public: virtual class xercesc_3_2::DOMNode * replaceChild(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *); // 14
      public: virtual class xercesc_3_2::DOMNode * removeChild(class xercesc_3_2::DOMNode *); // 15
      public: virtual class xercesc_3_2::DOMNode * appendChild(class xercesc_3_2::DOMNode *); // 16
      public: virtual bool hasChildNodes(void) const; // 17
      public: virtual void setNodeValue(char16_t const *); // 18
      public: virtual void normalize(void); // 19
      public: virtual bool isSupported(char16_t const *, char16_t const *) const; // 20
      public: virtual char16_t const * getNamespaceURI(void) const; // 21
      public: virtual char16_t const * getPrefix(void) const; // 22
      public: virtual char16_t const * getLocalName(void) const; // 23
      public: virtual void setPrefix(char16_t const *); // 24
      public: virtual bool hasAttributes(void) const; // 25
      public: virtual bool isSameNode(class xercesc_3_2::DOMNode const *) const; // 26
      public: virtual bool isEqualNode(class xercesc_3_2::DOMNode const *) const; // 27
      public: virtual void * setUserData(char16_t const *, void *, class xercesc_3_2::DOMUserDataHandler *); // 28
      public: virtual void * getUserData(char16_t const *) const; // 29
      public: virtual char16_t const * getBaseURI(void) const; // 30
      public: virtual short compareDocumentPosition(class xercesc_3_2::DOMNode const *) const; // 31
      public: virtual char16_t const * getTextContent(void) const; // 32
      public: virtual void setTextContent(char16_t const *); // 33
      public: virtual char16_t const * lookupPrefix(char16_t const *) const; // 34
      public: virtual bool isDefaultNamespace(char16_t const *) const; // 35
      public: virtual char16_t const * lookupNamespaceURI(char16_t const *) const; // 36
      public: virtual void * getFeature(char16_t const *, char16_t const *) const; // 37
      public: virtual void release(void); // 38
      public: virtual char16_t const * getName(void) const; // 39
      public: virtual class xercesc_3_2::DOMNamedNodeMap * getEntities(void) const; // 40
      public: virtual class xercesc_3_2::DOMNamedNodeMap * getNotations(void) const; // 41
      public: virtual char16_t const * getPublicId(void) const; // 42
      public: virtual char16_t const * getSystemId(void) const; // 43
      public: virtual char16_t const * getInternalSubset(void) const; // 44
      protected: virtual void setPublicId(char16_t const *); // 45
      protected: virtual void setSystemId(char16_t const *); // 46
      protected: virtual void setInternalSubset(char16_t const *); // 47
      public: virtual void setOwnerDocument(class xercesc_3_2::DOMDocument *); // 48
      public: virtual class xercesc_3_2::DOMNamedNodeMap * getElements(void) const; // 49
      public: virtual void setReadOnly(bool, bool); // 50
      // VFTable with 0 offset end

      // VFTable. Offset=8, Size=3, Start=3
      // Corresponding base: xercesc_3_2::HasDOMNodeImpl
      // Owner: SophisXML.dll
      // public: virtual ~DOMDocumentTypeImpl(void); // 0
      // Overrides:
      public: virtual class xercesc_3_2::DOMNodeImpl const * getNodeImpl(void) const override; // 1
      public: virtual class xercesc_3_2::DOMNodeImpl * getNodeImpl(void) override; // 2
      // VFTable with 8 offset end

      // VFTable. Offset=16, Size=3, Start=3
      // Corresponding base: xercesc_3_2::HasDOMParentImpl
      // Owner: SophisXML.dll
      // public: virtual ~DOMDocumentTypeImpl(void); // 0
      // Overrides:
      public: virtual class xercesc_3_2::DOMParentNode const * getParentNodeImpl(void) const override; // 1
      public: virtual class xercesc_3_2::DOMParentNode * getParentNodeImpl(void) override; // 2
      // VFTable with 16 offset end

      // VFTable. Offset=24, Size=3, Start=3
      // Corresponding base: xercesc_3_2::HasDOMChildImpl
      // Owner: SophisXML.dll
      // public: virtual ~DOMDocumentTypeImpl(void); // 0
      // Overrides:
      public: virtual class xercesc_3_2::DOMChildNode const * getChildNodeImpl(void) const override; // 1
      public: virtual class xercesc_3_2::DOMChildNode * getChildNodeImpl(void) override; // 2
      // VFTable with 24 offset end

    public:
    };

    class DOMElement
    {
    public:
    };

    class DOMEntity
    {
    public:
    };

    class DOMEntityReference
    {
    public:
    };

    class DOMError
    {
    public:
    };

    class/*or struct*/ DOMErrorHandler
    {
      // Functions:
      protected: DOMErrorHandler(void)
#if 0 // All found virtual functions names:
      public: virtual ~DOMErrorHandler(void)
#endif

      // VFTable. Offset=0, Size=0, Start=0
      // VFTable with 0 offset end

    public:
    };

    class DOMException
    {
      // Functions:
      public: DOMException(class xercesc_3_2::DOMException const &)
      public: DOMException(short, short, class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
      public: virtual ~DOMException(void)
#endif

    public:
    };

    class DOMImplementation : public DOMImplementationLS
    {
      // Functions:
      protected: DOMImplementation(void)
#if 0 // All found virtual functions names:
      public: virtual ~DOMImplementation(void)
#endif

    public:
    };

    class DOMImplementationLS
    {
    public:
    };

    class/*or struct*/ DOMImplementationRegistry
    {
      // Static functions:
      public: static void addSource(class xercesc_3_2::DOMImplementationSource *)
      public: static class xercesc_3_2::DOMImplementation * getDOMImplementation(char16_t const *)
    public:
    };

    class DOMImplementationSource
    {
      // Functions:
      protected: DOMImplementationSource(void)
#if 0 // All found virtual functions names:
      public: virtual ~DOMImplementationSource(void)
#endif

      // VFTable. Offset=0, Size=3, Start=0
      // Added virtual functions:
      public: virtual ~DOMImplementationSource(void); // 0
      public: virtual void unknown_vf_0_1(void); // 1
      public: virtual void unknown_vf_0_2(void); // 2
      // VFTable with 0 offset end

    public:
    };

    class DOMLSInput
    {
    public:
    };

    class DOMLSOutput
    {
      // VFTable. Offset=0, Size=0, Start=0
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ DOMLSOutputImpl : public XMemory, public DOMLSOutput
    {
      // Functions:
      public: DOMLSOutputImpl(class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
      public: virtual ~DOMLSOutputImpl(void)
      public: virtual class xercesc_3_2::XMLFormatTarget * getByteStream(void) const
      public: virtual char16_t const * getEncoding(void) const
      public: virtual char16_t const * getSystemId(void) const
      public: virtual void release(void)
      public: virtual void setByteStream(class xercesc_3_2::XMLFormatTarget *)
      public: virtual void setEncoding(char16_t const *const)
      public: virtual void setSystemId(char16_t const *const)
#endif

      // VFTable. Offset=0, Size=8, Start=0
      // Corresponding base: xercesc_3_2::DOMLSOutput
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual ~DOMLSOutputImpl(void); // 0
      public: virtual class xercesc_3_2::XMLFormatTarget * getByteStream(void) const; // 1
      public: virtual char16_t const * getEncoding(void) const; // 2
      public: virtual char16_t const * getSystemId(void) const; // 3
      public: virtual void setByteStream(class xercesc_3_2::XMLFormatTarget *); // 4
      public: virtual void setEncoding(char16_t const *const); // 5
      public: virtual void setSystemId(char16_t const *const); // 6
      public: virtual void release(void); // 7
      // VFTable with 0 offset end

    public:
    };

    class DOMLSParser
    {
    public:
      // Enumerations:
      enum ActionType : int {
      };

      // VFTable. Offset=0, Size=21, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual class xercesc_3_2::DOMConfiguration * getDomConfig(void); // 1 (xercesc_3_2::DOMLSParserImpl)
      public: virtual class xercesc_3_2::DOMLSParserFilter const * getFilter(void) const; // 2 (xercesc_3_2::DOMLSParserImpl)
      public: virtual bool getAsync(void) const; // 3 (xercesc_3_2::DOMLSParserImpl)
      public: virtual bool getBusy(void) const; // 4 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void setFilter(class xercesc_3_2::DOMLSParserFilter *const); // 5 (xercesc_3_2::DOMLSParserImpl)
      public: virtual class xercesc_3_2::DOMDocument * parse(class xercesc_3_2::DOMLSInput const *); // 6 (xercesc_3_2::DOMLSParserImpl)
      public: virtual class xercesc_3_2::DOMDocument * parseURI(char const *const); // 7 (xercesc_3_2::DOMLSParserImpl)
      public: virtual class xercesc_3_2::DOMDocument * parseURI(char16_t const *const); // 8 (xercesc_3_2::DOMLSParserImpl)
      public: virtual class xercesc_3_2::DOMNode * parseWithContext(class xercesc_3_2::DOMLSInput const *, class xercesc_3_2::DOMNode *, enum xercesc_3_2::DOMLSParser::ActionType); // 9 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void abort(void); // 10 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void release(void); // 11 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void resetDocumentPool(void); // 12 (xercesc_3_2::DOMLSParserImpl)
      public: virtual class xercesc_3_2::Grammar * loadGrammar(char const *const, enum xercesc_3_2::Grammar::GrammarType, bool); // 13 (xercesc_3_2::DOMLSParserImpl)
      public: virtual class xercesc_3_2::Grammar * loadGrammar(char16_t const *const, enum xercesc_3_2::Grammar::GrammarType, bool); // 14 (xercesc_3_2::DOMLSParserImpl)
      public: virtual class xercesc_3_2::Grammar * loadGrammar(class xercesc_3_2::DOMLSInput const *, enum xercesc_3_2::Grammar::GrammarType, bool); // 15 (xercesc_3_2::DOMLSParserImpl)
      public: virtual class xercesc_3_2::Grammar * getGrammar(char16_t const *const) const; // 16 (xercesc_3_2::DOMLSParserImpl)
      public: virtual class xercesc_3_2::Grammar * getRootGrammar(void) const; // 17 (xercesc_3_2::DOMLSParserImpl)
      public: virtual char16_t const * getURIText(unsigned int) const; // 18 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void resetCachedGrammarPool(void); // 19 (xercesc_3_2::DOMLSParserImpl)
      public: virtual unsigned __int64 getSrcOffset(void) const; // 20 (xercesc_3_2::DOMLSParserImpl)
      // VFTable with 0 offset end

    public:
    };

    class DOMLSParserFilter
    {
    public:
    };

    class/*or struct*/ DOMLSParserImpl : public AbstractDOMParser, public DOMLSParser, public DOMConfiguration
    {
      // Functions:
      public: DOMLSParserImpl(class xercesc_3_2::XMLValidator *const, class xercesc_3_2::MemoryManager *const, class xercesc_3_2::XMLGrammarPool *const)
#if 0 // All found virtual functions names:
      public: virtual ~DOMLSParserImpl(void)
      public: virtual void XMLDecl(char16_t const *const, char16_t const *const, char16_t const *const, char16_t const *const)
      public: virtual void abort(void)
      public: virtual bool canSetParameter(char16_t const *, void const *) const
      public: virtual bool canSetParameter(char16_t const *, bool) const
      public: virtual void docCharacters(char16_t const *const, unsigned __int64, bool)
      public: virtual void docComment(char16_t const *const)
      public: virtual void docPI(char16_t const *const, char16_t const *const)
      public: virtual void endElement(class xercesc_3_2::XMLElementDecl const &, unsigned int, bool, char16_t const *const)
      public: virtual void endInputSource(class xercesc_3_2::InputSource const &)
      public: virtual void error(unsigned int, char16_t const *const, enum xercesc_3_2::XMLErrorReporter::ErrTypes, char16_t const *const, char16_t const *const, char16_t const *const, unsigned __int64, unsigned __int64)
      public: virtual bool expandSystemId(char16_t const *const, class xercesc_3_2::XMLBuffer &)
      public: virtual bool getAsync(void) const
      public: virtual bool getBusy(void) const
      public: virtual class xercesc_3_2::DOMConfiguration * getDomConfig(void)
      public: virtual class xercesc_3_2::DOMLSParserFilter const * getFilter(void) const
      public: virtual class xercesc_3_2::Grammar * getGrammar(char16_t const *const) const
      public: virtual void const * getParameter(char16_t const *) const
      public: virtual class xercesc_3_2::DOMStringList const * getParameterNames(void) const
      public: virtual class xercesc_3_2::Grammar * getRootGrammar(void) const
      public: virtual unsigned __int64 getSrcOffset(void) const
      public: virtual char16_t const * getURIText(unsigned int) const
      public: virtual class xercesc_3_2::Grammar * loadGrammar(class xercesc_3_2::DOMLSInput const *, enum xercesc_3_2::Grammar::GrammarType, bool)
      public: virtual class xercesc_3_2::Grammar * loadGrammar(char const *const, enum xercesc_3_2::Grammar::GrammarType, bool)
      public: virtual class xercesc_3_2::Grammar * loadGrammar(char16_t const *const, enum xercesc_3_2::Grammar::GrammarType, bool)
      public: virtual class xercesc_3_2::DOMDocument * parse(class xercesc_3_2::DOMLSInput const *)
      public: virtual class xercesc_3_2::DOMDocument * parseURI(char const *const)
      public: virtual class xercesc_3_2::DOMDocument * parseURI(char16_t const *const)
      public: virtual class xercesc_3_2::DOMNode * parseWithContext(class xercesc_3_2::DOMLSInput const *, class xercesc_3_2::DOMNode *, enum xercesc_3_2::DOMLSParser::ActionType)
      public: virtual void release(void)
      public: virtual void resetCachedGrammarPool(void)
      public: virtual void resetDocumentPool(void)
      public: virtual void resetEntities(void)
      public: virtual void resetErrors(void)
      public: virtual class xercesc_3_2::InputSource * resolveEntity(class xercesc_3_2::XMLResourceIdentifier *)
      public: virtual void setFilter(class xercesc_3_2::DOMLSParserFilter *const)
      public: virtual void setParameter(char16_t const *, void const *)
      public: virtual void setParameter(char16_t const *, bool)
      public: virtual void startDocument(void)
      public: virtual void startElement(class xercesc_3_2::XMLElementDecl const &, unsigned int, char16_t const *const, class xercesc_3_2::RefVectorOf<class xercesc_3_2::XMLAttr> const &, unsigned __int64, bool, bool)
      public: virtual void startEntityReference(class xercesc_3_2::XMLEntityDecl const &)
      public: virtual void startInputSource(class xercesc_3_2::InputSource const &)
#endif

      // Warning: Greater base vftable size!
      // VFTable. Offset=0, Size=13, Start=20
      // Corresponding base: xercesc_3_2::AbstractDOMParser
      // public: virtual ~DOMLSParserImpl(void); // 0
      // Overrides:
      public: virtual void docCharacters(char16_t const *const, unsigned __int64, bool) override; // 1
      public: virtual void docComment(char16_t const *const) override; // 2
      public: virtual void docPI(char16_t const *const, char16_t const *const) override; // 3
      public: virtual void endElement(class xercesc_3_2::XMLElementDecl const &, unsigned int, bool, char16_t const *const) override; // 5
      public: virtual void startDocument(void) override; // 9
      public: virtual void startElement(class xercesc_3_2::XMLElementDecl const &, unsigned int, char16_t const *const, class xercesc_3_2::RefVectorOf<class xercesc_3_2::XMLAttr> const &, unsigned __int64, bool, bool) override; // 10
      public: virtual void startEntityReference(class xercesc_3_2::XMLEntityDecl const &) override; // 11
      public: virtual void XMLDecl(char16_t const *const, char16_t const *const, char16_t const *const, char16_t const *const) override; // 12
      // VFTable with 0 offset end

      // VFTable. Offset=8, Size=3, Start=3
      // Corresponding base: xercesc_3_2::XMLErrorReporter
      // public: virtual ~DOMLSParserImpl(void); // 0
      // Overrides:
      public: virtual void error(unsigned int, char16_t const *const, enum xercesc_3_2::XMLErrorReporter::ErrTypes, char16_t const *const, char16_t const *const, char16_t const *const, unsigned __int64, unsigned __int64) override; // 1
      public: virtual void resetErrors(void) override; // 2
      // VFTable with 8 offset end

      // VFTable. Offset=16, Size=6, Start=6
      // Corresponding base: xercesc_3_2::XMLEntityHandler
      // public: virtual ~DOMLSParserImpl(void); // 0
      // Overrides:
      public: virtual void endInputSource(class xercesc_3_2::InputSource const &) override; // 1
      public: virtual bool expandSystemId(char16_t const *const, class xercesc_3_2::XMLBuffer &) override; // 2
      public: virtual void resetEntities(void) override; // 3
      public: virtual class xercesc_3_2::InputSource * resolveEntity(class xercesc_3_2::XMLResourceIdentifier *) override; // 4
      public: virtual void startInputSource(class xercesc_3_2::InputSource const &) override; // 5
      // VFTable with 16 offset end

      // VFTable. Offset=192, Size=21, Start=21
      // Corresponding base: xercesc_3_2::DOMLSParser
      // public: virtual ~DOMLSParserImpl(void); // 0
      // Overrides:
      public: virtual class xercesc_3_2::DOMConfiguration * getDomConfig(void) override; // 1
      public: virtual class xercesc_3_2::DOMLSParserFilter const * getFilter(void) const override; // 2
      public: virtual bool getAsync(void) const override; // 3
      public: virtual bool getBusy(void) const override; // 4
      public: virtual void setFilter(class xercesc_3_2::DOMLSParserFilter *const) override; // 5
      public: virtual class xercesc_3_2::DOMDocument * parse(class xercesc_3_2::DOMLSInput const *) override; // 6
      public: virtual class xercesc_3_2::DOMDocument * parseURI(char const *const) override; // 7
      public: virtual class xercesc_3_2::DOMDocument * parseURI(char16_t const *const) override; // 8
      public: virtual class xercesc_3_2::DOMNode * parseWithContext(class xercesc_3_2::DOMLSInput const *, class xercesc_3_2::DOMNode *, enum xercesc_3_2::DOMLSParser::ActionType) override; // 9
      public: virtual void abort(void) override; // 10
      public: virtual void release(void) override; // 11
      public: virtual void resetDocumentPool(void) override; // 12
      public: virtual class xercesc_3_2::Grammar * loadGrammar(char const *const, enum xercesc_3_2::Grammar::GrammarType, bool) override; // 13
      public: virtual class xercesc_3_2::Grammar * loadGrammar(char16_t const *const, enum xercesc_3_2::Grammar::GrammarType, bool) override; // 14
      public: virtual class xercesc_3_2::Grammar * loadGrammar(class xercesc_3_2::DOMLSInput const *, enum xercesc_3_2::Grammar::GrammarType, bool) override; // 15
      public: virtual class xercesc_3_2::Grammar * getGrammar(char16_t const *const) const override; // 16
      public: virtual class xercesc_3_2::Grammar * getRootGrammar(void) const override; // 17
      public: virtual char16_t const * getURIText(unsigned int) const override; // 18
      public: virtual void resetCachedGrammarPool(void) override; // 19
      public: virtual unsigned __int64 getSrcOffset(void) const override; // 20
      // VFTable with 192 offset end

      // Warning: Greater base vftable size!
      // VFTable. Offset=200, Size=6, Start=7
      // Corresponding base: xercesc_3_2::DOMConfiguration
      // Overrides:
      public: virtual void setParameter(char16_t const *, bool) override; // 0
      public: virtual void setParameter(char16_t const *, void const *) override; // 1
      public: virtual void const * getParameter(char16_t const *) const override; // 2
      public: virtual bool canSetParameter(char16_t const *, bool) const override; // 3
      public: virtual bool canSetParameter(char16_t const *, void const *) const override; // 4
      public: virtual class xercesc_3_2::DOMStringList const * getParameterNames(void) const override; // 5
      // VFTable with 200 offset end

    public:
    };

    class DOMLSSerializer
    {
      // VFTable. Offset=0, Size=0, Start=0
      // VFTable with 0 offset end

    public:
    };

    class DOMLSSerializerFilter
    {
    public:
    };

    class/*or struct*/ DOMLSSerializerImpl : public XMemory, public DOMLSSerializer, public DOMConfiguration
    {
      // Functions:
      public: DOMLSSerializerImpl(class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
      public: virtual ~DOMLSSerializerImpl(void)
      public: virtual bool canSetParameter(char16_t const *, void const *) const
      public: virtual bool canSetParameter(char16_t const *, bool) const
      protected: virtual bool customNodeSerialize(class xercesc_3_2::DOMNode const *const, int)
      public: virtual class xercesc_3_2::DOMConfiguration * getDomConfig(void)
      public: virtual class xercesc_3_2::DOMLSSerializerFilter * getFilter(void) const
      public: virtual char16_t const * getNewLine(void) const
      public: virtual void const * getParameter(char16_t const *) const
      public: virtual class xercesc_3_2::DOMStringList const * getParameterNames(void) const
      public: virtual void release(void)
      public: virtual void setFilter(class xercesc_3_2::DOMLSSerializerFilter *)
      public: virtual void setNewLine(char16_t const *const)
      public: virtual void setParameter(char16_t const *, void const *)
      public: virtual void setParameter(char16_t const *, bool)
      public: virtual bool write(class xercesc_3_2::DOMNode const *, class xercesc_3_2::DOMLSOutput *const)
      public: virtual char16_t * writeToString(class xercesc_3_2::DOMNode const *, class xercesc_3_2::MemoryManager *)
      public: virtual bool writeToURI(class xercesc_3_2::DOMNode const *, char16_t const *)
#endif

      // VFTable. Offset=0, Size=11, Start=0
      // Corresponding base: xercesc_3_2::DOMLSSerializer
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual ~DOMLSSerializerImpl(void); // 0
      public: virtual class xercesc_3_2::DOMConfiguration * getDomConfig(void); // 1
      public: virtual void setNewLine(char16_t const *const); // 2
      public: virtual void setFilter(class xercesc_3_2::DOMLSSerializerFilter *); // 3
      public: virtual char16_t const * getNewLine(void) const; // 4
      public: virtual class xercesc_3_2::DOMLSSerializerFilter * getFilter(void) const; // 5
      public: virtual bool write(class xercesc_3_2::DOMNode const *, class xercesc_3_2::DOMLSOutput *const); // 6
      public: virtual bool writeToURI(class xercesc_3_2::DOMNode const *, char16_t const *); // 7
      public: virtual char16_t * writeToString(class xercesc_3_2::DOMNode const *, class xercesc_3_2::MemoryManager *); // 8
      public: virtual void release(void); // 9
      protected: virtual bool customNodeSerialize(class xercesc_3_2::DOMNode const *const, int); // 10
      // VFTable with 0 offset end

      // VFTable. Offset=8, Size=7, Start=7
      // Corresponding base: xercesc_3_2::DOMConfiguration
      // Owner: SophisXML.dll
      // Overrides:
      public: virtual void setParameter(char16_t const *, bool) override; // 0
      public: virtual void setParameter(char16_t const *, void const *) override; // 1
      public: virtual void const * getParameter(char16_t const *) const override; // 2
      public: virtual bool canSetParameter(char16_t const *, bool) const override; // 3
      public: virtual bool canSetParameter(char16_t const *, void const *) const override; // 4
      public: virtual class xercesc_3_2::DOMStringList const * getParameterNames(void) const override; // 5
      // VFTable with 8 offset end

    public:
    };

    class/*or struct*/ DOMMemoryManager
    {
    public:
      // Enumerations:
      enum NodeObjectType : int {
      };

      // VFTable. Offset=0, Size=0, Start=0
      // VFTable with 0 offset end

    public:
    };

    class DOMNamedNodeMap
    {
    public:
    };

    class DOMNode
    {
    public:
      // Enumerations:
      enum NodeType : int {
      };

      // VFTable. Offset=0, Size=39, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual char16_t const * getNodeName(void) const; // 1 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual char16_t const * getNodeValue(void) const; // 2 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual enum xercesc_3_2::DOMNode::NodeType getNodeType(void) const; // 3 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNode * getParentNode(void) const; // 4 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNodeList * getChildNodes(void) const; // 5 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNode * getFirstChild(void) const; // 6 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNode * getLastChild(void) const; // 7 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNode * getPreviousSibling(void) const; // 8 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNode * getNextSibling(void) const; // 9 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNamedNodeMap * getAttributes(void) const; // 10 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMDocument * getOwnerDocument(void) const; // 11 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNode * cloneNode(bool) const; // 12 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNode * insertBefore(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *); // 13 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNode * replaceChild(class xercesc_3_2::DOMNode *, class xercesc_3_2::DOMNode *); // 14 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNode * removeChild(class xercesc_3_2::DOMNode *); // 15 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNode * appendChild(class xercesc_3_2::DOMNode *); // 16 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual bool hasChildNodes(void) const; // 17 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual void setNodeValue(char16_t const *); // 18 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual void normalize(void); // 19 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual bool isSupported(char16_t const *, char16_t const *) const; // 20 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual char16_t const * getNamespaceURI(void) const; // 21 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual char16_t const * getPrefix(void) const; // 22 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual char16_t const * getLocalName(void) const; // 23 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual void setPrefix(char16_t const *); // 24 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual bool hasAttributes(void) const; // 25 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual bool isSameNode(class xercesc_3_2::DOMNode const *) const; // 26 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual bool isEqualNode(class xercesc_3_2::DOMNode const *) const; // 27 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual void * setUserData(char16_t const *, void *, class xercesc_3_2::DOMUserDataHandler *); // 28 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual void * getUserData(char16_t const *) const; // 29 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual char16_t const * getBaseURI(void) const; // 30 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual short compareDocumentPosition(class xercesc_3_2::DOMNode const *) const; // 31 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual char16_t const * getTextContent(void) const; // 32 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual void setTextContent(char16_t const *); // 33 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual char16_t const * lookupPrefix(char16_t const *) const; // 34 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual bool isDefaultNamespace(char16_t const *) const; // 35 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual char16_t const * lookupNamespaceURI(char16_t const *) const; // 36 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual void * getFeature(char16_t const *, char16_t const *) const; // 37 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual void release(void); // 38 (xercesc_3_2::DOMDocumentTypeImpl)
      // VFTable with 0 offset end

    public:
    };

    class DOMNodeFilter
    {
    public:
    };

    class DOMNodeImpl
    {
    public:
    };

    class DOMNodeIterator
    {
    public:
    };

    class DOMNodeIteratorImpl
    {
    public:
    };

    class DOMNodeList
    {
    public:
    };

    class DOMNotation
    {
    public:
    };

    class/*or struct*/ DOMPSVITypeInfo
    {
    public:
      // Enumerations:
      enum PSVIProperty : int {
      };

      // VFTable. Offset=0, Size=3, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual char16_t const * getStringProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty) const; // 1 (xercesc_3_2::DOMTypeInfoImpl)
      public: virtual int getNumericProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty) const; // 2 (xercesc_3_2::DOMTypeInfoImpl)
      // VFTable with 0 offset end

    public:
    };

    class DOMParentNode
    {
    public:
    };

    class DOMProcessingInstruction
    {
    public:
    };

    class DOMRange
    {
    public:
    };

    class DOMRangeImpl
    {
    public:
    };

    class DOMStringList
    {
    public:
    };

    class DOMText
    {
    public:
    };

    class DOMTreeWalker
    {
    public:
    };

    class/*or struct*/ DOMTypeInfo
    {
    public:
      // Enumerations:
      enum DerivationMethods : int {
      };

      // VFTable. Offset=0, Size=0, Start=0
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ DOMTypeInfoImpl : public DOMTypeInfo, public DOMPSVITypeInfo
    {
      // Functions:
      public: DOMTypeInfoImpl(char16_t const *, char16_t const *)
#if 0 // All found virtual functions names:
      public: virtual ~DOMTypeInfoImpl(void)
      public: virtual int getNumericProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty) const
      public: virtual char16_t const * getStringProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty) const
      public: virtual char16_t const * getTypeName(void) const
      public: virtual char16_t const * getTypeNamespace(void) const
      public: virtual bool isDerivedFrom(char16_t const *, char16_t const *, enum xercesc_3_2::DOMTypeInfo::DerivationMethods) const
      public: virtual void setNumericProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty, int)
      public: virtual void setStringProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty, char16_t const *)
#endif

      // VFTable. Offset=0, Size=6, Start=0
      // Corresponding base: xercesc_3_2::DOMTypeInfo
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual ~DOMTypeInfoImpl(void); // 0
      public: virtual char16_t const * getTypeName(void) const; // 1
      public: virtual char16_t const * getTypeNamespace(void) const; // 2
      public: virtual bool isDerivedFrom(char16_t const *, char16_t const *, enum xercesc_3_2::DOMTypeInfo::DerivationMethods) const; // 3
      public: virtual void setStringProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty, char16_t const *); // 4
      public: virtual void setNumericProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty, int); // 5
      // VFTable with 0 offset end

      // VFTable. Offset=8, Size=3, Start=3
      // Corresponding base: xercesc_3_2::DOMPSVITypeInfo
      // Owner: SophisXML.dll
      // public: virtual ~DOMTypeInfoImpl(void); // 0
      // Overrides:
      public: virtual char16_t const * getStringProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty) const override; // 1
      public: virtual int getNumericProperty(enum xercesc_3_2::DOMPSVITypeInfo::PSVIProperty) const override; // 2
      // VFTable with 8 offset end

    public:
    };

    class DOMUserDataHandler
    {
    public:
    };

    class/*or struct*/ DOMXPathEvaluator
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual class xercesc_3_2::DOMXPathExpression * createExpression(char16_t const *, class xercesc_3_2::DOMXPathNSResolver const *); // 1 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMXPathNSResolver * createNSResolver(class xercesc_3_2::DOMNode const *); // 2 (xercesc_3_2::DOMDocumentImpl)
      public: virtual class xercesc_3_2::DOMXPathResult * evaluate(char16_t const *, class xercesc_3_2::DOMNode const *, class xercesc_3_2::DOMXPathNSResolver const *, enum xercesc_3_2::DOMXPathResult::ResultType, class xercesc_3_2::DOMXPathResult *); // 3 (xercesc_3_2::DOMDocumentImpl)
      // VFTable with 0 offset end

    public:
    };

    class DOMXPathExpression
    {
    public:
    };

    class DOMXPathNSResolver
    {
    public:
    };

    class DOMXPathResult
    {
    public:
      // Enumerations:
      enum ResultType : int {
      };

    public:
    };

    class DTDAttDef
    {
    public:
    };

    class DTDElementDecl
    {
    public:
    };

    class DTDEntityDecl
    {
    public:
    };

    class DTDGrammar
    {
    public:
    };

    class DatatypeValidator
    {
      // Functions:
      public: char16_t const * getTypeLocalName(void) const
      public: char16_t const * getTypeName(void) const
    public:
    };

    class/*or struct*/ DocTypeHandler
    {
      // VFTable. Offset=0, Size=17, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void attDef(class xercesc_3_2::DTDElementDecl const &, class xercesc_3_2::DTDAttDef const &, bool); // 1 (xercesc_3_2::AbstractDOMParser)
      public: virtual void doctypeComment(char16_t const *const); // 2 (xercesc_3_2::AbstractDOMParser)
      public: virtual void doctypeDecl(class xercesc_3_2::DTDElementDecl const &, char16_t const *const, char16_t const *const, bool, bool); // 3 (xercesc_3_2::AbstractDOMParser)
      public: virtual void doctypePI(char16_t const *const, char16_t const *const); // 4 (xercesc_3_2::AbstractDOMParser)
      public: virtual void doctypeWhitespace(char16_t const *const, unsigned __int64); // 5 (xercesc_3_2::AbstractDOMParser)
      public: virtual void elementDecl(class xercesc_3_2::DTDElementDecl const &, bool); // 6 (xercesc_3_2::AbstractDOMParser)
      public: virtual void endAttList(class xercesc_3_2::DTDElementDecl const &); // 7 (xercesc_3_2::AbstractDOMParser)
      public: virtual void endIntSubset(void); // 8 (xercesc_3_2::AbstractDOMParser)
      public: virtual void endExtSubset(void); // 9 (xercesc_3_2::AbstractDOMParser)
      public: virtual void entityDecl(class xercesc_3_2::DTDEntityDecl const &, bool, bool); // 10 (xercesc_3_2::AbstractDOMParser)
      public: virtual void resetDocType(void); // 11 (xercesc_3_2::AbstractDOMParser)
      public: virtual void notationDecl(class xercesc_3_2::XMLNotationDecl const &, bool); // 12 (xercesc_3_2::AbstractDOMParser)
      public: virtual void startAttList(class xercesc_3_2::DTDElementDecl const &); // 13 (xercesc_3_2::AbstractDOMParser)
      public: virtual void startIntSubset(void); // 14 (xercesc_3_2::AbstractDOMParser)
      public: virtual void startExtSubset(void); // 15 (xercesc_3_2::AbstractDOMParser)
      public: virtual void TextDecl(char16_t const *const, char16_t const *const); // 16 (xercesc_3_2::AbstractDOMParser)
      // VFTable with 0 offset end

    public:
    };

    class Grammar
    {
    public:
      // Enumerations:
      enum GrammarType : int {
      };

    public:
    };

    class/*or struct*/ HasDOMChildImpl
    {
      // VFTable. Offset=0, Size=3, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual class xercesc_3_2::DOMChildNode const * getChildNodeImpl(void) const; // 1 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMChildNode * getChildNodeImpl(void); // 2 (xercesc_3_2::DOMDocumentTypeImpl)
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ HasDOMNodeImpl
    {
      // VFTable. Offset=0, Size=3, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual class xercesc_3_2::DOMNodeImpl const * getNodeImpl(void) const; // 1 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMNodeImpl * getNodeImpl(void); // 2 (xercesc_3_2::DOMDocumentTypeImpl)
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ HasDOMParentImpl
    {
      // VFTable. Offset=0, Size=3, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual class xercesc_3_2::DOMParentNode const * getParentNodeImpl(void) const; // 1 (xercesc_3_2::DOMDocumentTypeImpl)
      public: virtual class xercesc_3_2::DOMParentNode * getParentNodeImpl(void); // 2 (xercesc_3_2::DOMDocumentTypeImpl)
      // VFTable with 0 offset end

    public:
    };

    class InputSource : public XMemory
    {
      // Functions:
      protected: InputSource(class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
      public: virtual ~InputSource(void)
      public: virtual char16_t const * getEncoding(void) const
      public: virtual bool getIssueFatalErrorIfNotFound(void) const
      public: virtual char16_t const * getPublicId(void) const
      public: virtual char16_t const * getSystemId(void) const
      public: virtual void setEncoding(char16_t const *const)
      public: virtual void setIssueFatalErrorIfNotFound(bool)
      public: virtual void setPublicId(char16_t const *const)
      public: virtual void setSystemId(char16_t const *const)
#endif

      // VFTable. Offset=0, Size=10, Start=0
      // Added virtual functions:
      public: virtual ~InputSource(void); // 0
      public: virtual class xercesc_3_2::BinInputStream * makeStream(void) const; // 1 (xercesc_3_2::MemBufInputSource)
      public: virtual char16_t const * getEncoding(void) const; // 2
      public: virtual char16_t const * getPublicId(void) const; // 3
      public: virtual char16_t const * getSystemId(void) const; // 4
      public: virtual bool getIssueFatalErrorIfNotFound(void) const; // 5
      public: virtual void setEncoding(char16_t const *const); // 6
      public: virtual void setPublicId(char16_t const *const); // 7
      public: virtual void setSystemId(char16_t const *const); // 8
      public: virtual void setIssueFatalErrorIfNotFound(bool); // 9
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ MemBufInputSource : public InputSource
    {
      // Functions:
      public: MemBufInputSource(unsigned char const *const, unsigned __int64, char const *const, bool, class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
      public: virtual ~MemBufInputSource(void)
      public: virtual class xercesc_3_2::BinInputStream * makeStream(void) const
#endif

      // VFTable. Offset=0, Size=10, Start=10
      // Corresponding base: xercesc_3_2::InputSource
      // Owner: SophisXML.dll
      // public: virtual ~MemBufInputSource(void); // 0
      // Overrides:
      public: virtual class xercesc_3_2::BinInputStream * makeStream(void) const override; // 1
      // VFTable with 0 offset end

    public:
    };

    class MemoryManager
    {
      // Functions:
      protected: MemoryManager(void)
#if 0 // All found virtual functions names:
      public: virtual ~MemoryManager(void)
#endif

      // VFTable. Offset=0, Size=0, Start=0
      // VFTable with 0 offset end

    public:
    };

    class NoSuchElementException
    {
      // Functions:
      public: NoSuchElementException(class xercesc_3_2::NoSuchElementException const &)
      public: NoSuchElementException(char const *const, unsigned __int64, enum xercesc_3_2::XMLExcepts::Codes, class xercesc_3_2::MemoryManager *)
#if 0 // All found virtual functions names:
      public: virtual ~NoSuchElementException(void)
#endif

    public:
    };

    class NullPointerException
    {
      // Functions:
      public: NullPointerException(class xercesc_3_2::NullPointerException const &)
      public: NullPointerException(char const *const, unsigned __int64, enum xercesc_3_2::XMLExcepts::Codes, class xercesc_3_2::MemoryManager *)
#if 0 // All found virtual functions names:
      public: virtual ~NullPointerException(void)
#endif

    public:
    };

    class/*or struct*/ OutOfMemoryException
    {
      // Functions:
      public: char16_t const * getMessage(void) const
    public:
    };

    class PSVIAttributeList
    {
    public:
    };

    class PSVIElement
    {
    public:
    };

    class PSVIHandler
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void handleElementPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIElement *); // 1 (xercesc_3_2::AbstractDOMParser)
      public: virtual void handlePartialElementPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIElement *); // 2 (xercesc_3_2::AbstractDOMParser)
      public: virtual void handleAttributesPSVI(char16_t const *const, char16_t const *const, class xercesc_3_2::PSVIAttributeList *); // 3 (xercesc_3_2::AbstractDOMParser)
      // VFTable with 0 offset end

    public:
    };

    class PanicHandler
    {
    public:
    };

    class QName
    {
      // Functions:
      public: char16_t * getLocalPart(void)
      public: unsigned int getURI(void) const
    public:
    };

    template<typename T0, typename T2    >
    class/*or struct*/ RefHash2KeysTableOfEnumerator
    {
    public:
    };
#if 0 // Instances:
// <class xercesc_3_2::ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>, struct xercesc_3_2::StringHasher>
#if 0
    template<>
    class/*or struct*/ RefHash2KeysTableOfEnumerator<class xercesc_3_2::ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>, struct xercesc_3_2::StringHasher> : public XMLEnumerator<class xercesc_3_2::ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>>, public XMemory
    {
      // VFTable. Offset=0, Size=4, Start=4
      // Corresponding base: XMLEnumerator::XMLEnumerator::XMLEnumerator<class xercesc_3_2::ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>>
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };
#endif
#endif


    template<typename T0, typename T2    >
    class RefHash3KeysIdPoolEnumerator
    {
    public:
    };
#if 0 // Instances:
// <class xercesc_3_2::SchemaElementDecl, struct xercesc_3_2::StringHasher>
#if 0
    template<>
    class RefHash3KeysIdPoolEnumerator<class xercesc_3_2::SchemaElementDecl, struct xercesc_3_2::StringHasher> : public XMLEnumerator<class xercesc_3_2::SchemaElementDecl>, public XMemory
    {
      // VFTable. Offset=0, Size=4, Start=4
      // Corresponding base: XMLEnumerator::XMLEnumerator::XMLEnumerator<class xercesc_3_2::SchemaElementDecl>
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };
#endif
#endif


    template<typename T0, typename T2    >
    class RefHashTableOfEnumerator
    {
    public:
    };
#if 0 // Instances:
// <class xercesc_3_2::ComplexTypeInfo, struct xercesc_3_2::StringHasher>
#if 0
    template<>
    class/*or struct*/ RefHashTableOfEnumerator<class xercesc_3_2::ComplexTypeInfo, struct xercesc_3_2::StringHasher> : public XMLEnumerator<class xercesc_3_2::ComplexTypeInfo>, public XMemory
    {
      // VFTable. Offset=0, Size=4, Start=4
      // Corresponding base: XMLEnumerator::XMLEnumerator::XMLEnumerator<class xercesc_3_2::ComplexTypeInfo>
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };
#endif
// <class xercesc_3_2::DatatypeValidator, struct xercesc_3_2::StringHasher>
#if 0
    template<>
    class/*or struct*/ RefHashTableOfEnumerator<class xercesc_3_2::DatatypeValidator, struct xercesc_3_2::StringHasher> : public XMLEnumerator<class xercesc_3_2::DatatypeValidator>, public XMemory
    {
      // VFTable. Offset=0, Size=4, Start=4
      // Corresponding base: XMLEnumerator::XMLEnumerator::XMLEnumerator<class xercesc_3_2::DatatypeValidator>
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };
#endif
// <class xercesc_3_2::Grammar, struct xercesc_3_2::StringHasher>
#if 0
    template<>
    class RefHashTableOfEnumerator<class xercesc_3_2::Grammar, struct xercesc_3_2::StringHasher> : public XMLEnumerator<class xercesc_3_2::Grammar>, public XMemory
    {
      // VFTable. Offset=0, Size=4, Start=4
      // Corresponding base: XMLEnumerator::XMLEnumerator::XMLEnumerator<class xercesc_3_2::Grammar>
      // Owner: SophisXML.dll
      // VFTable with 0 offset end

    public:
    };
#endif
#endif


    template<typename T1    >
    class RefVectorOf
    {
    public:
    };
#if 0 // Instances:
// <class xercesc_3_2::DOMNodeIteratorImpl>
#if 0
    template<>
    class RefVectorOf<class xercesc_3_2::DOMNodeIteratorImpl>
    {
    public:
    };
#endif
// <class xercesc_3_2::DOMRangeImpl>
#if 0
    template<>
    class RefVectorOf<class xercesc_3_2::DOMRangeImpl>
    {
    public:
    };
#endif
// <class xercesc_3_2::XMLAttr>
#if 0
    template<>
    class RefVectorOf<class xercesc_3_2::XMLAttr>
    {
    public:
    };
#endif
#endif


    class SchemaElementDecl
    {
      // Functions:
      public: class xercesc_3_2::ComplexTypeInfo * getComplexTypeInfo(void) const
    public:
    };

    class SchemaGrammar
    {
      // Functions:
      public: class xercesc_3_2::RefHash3KeysIdPoolEnumerator<class xercesc_3_2::SchemaElementDecl, struct xercesc_3_2::StringHasher> getElemEnumerator(void) const
    public:
    };

    namespace/*or class/struct?*/ SchemaSymbols
    {
      // Variables:
      public: static char16_t const *const fgATTVAL_ANYTYPE
      public: static char16_t const *const fgATT_NILL
      public: static char16_t const *const fgDT_ANYSIMPLETYPE
      public: static char16_t const *const fgDT_ANYURI
      public: static char16_t const *const fgDT_BASE64BINARY
      public: static char16_t const *const fgDT_BOOLEAN
      public: static char16_t const *const fgDT_BYTE
      public: static char16_t const *const fgDT_DATE
      public: static char16_t const *const fgDT_DATETIME
      public: static char16_t const *const fgDT_DECIMAL
      public: static char16_t const *const fgDT_DOUBLE
      public: static char16_t const *const fgDT_FLOAT
      public: static char16_t const *const fgDT_INT
      public: static char16_t const *const fgDT_INTEGER
      public: static char16_t const *const fgDT_LONG
      public: static char16_t const *const fgDT_MONTHDAY
      public: static char16_t const *const fgDT_NAME
      public: static char16_t const *const fgDT_NCNAME
      public: static char16_t const *const fgDT_NEGATIVEINTEGER
      public: static char16_t const *const fgDT_NONNEGATIVEINTEGER
      public: static char16_t const *const fgDT_NONPOSITIVEINTEGER
      public: static char16_t const *const fgDT_NORMALIZEDSTRING
      public: static char16_t const *const fgDT_POSITIVEINTEGER
      public: static char16_t const *const fgDT_QNAME
      public: static char16_t const *const fgDT_SHORT
      public: static char16_t const *const fgDT_STRING
      public: static char16_t const *const fgDT_TIME
      public: static char16_t const *const fgDT_UBYTE
      public: static char16_t const *const fgDT_UINT
      public: static char16_t const *const fgDT_ULONG
      public: static char16_t const *const fgDT_USHORT
      public: static char16_t const *const fgDT_YEARMONTH
      public: static char16_t const *const fgELT_ALL
      public: static char16_t const *const fgELT_ATTRIBUTE
      public: static char16_t const *const fgELT_ATTRIBUTEGROUP
      public: static char16_t const *const fgELT_COMPLEXCONTENT
      public: static char16_t const *const fgELT_COMPLEXTYPE
      public: static char16_t const *const fgELT_ELEMENT
      public: static char16_t const *const fgELT_ENUMERATION
      public: static char16_t const *const fgELT_EXTENSION
      public: static char16_t const *const fgELT_IMPORT
      public: static char16_t const *const fgELT_RESTRICTION
      public: static char16_t const *const fgELT_SEQUENCE
      public: static char16_t const *const fgELT_SIMPLECONTENT
      public: static char16_t const *const fgELT_SIMPLETYPE
      public: static char16_t const *const fgURI_SCHEMAFORSCHEMA
      public: static char16_t const *const fgURI_XSI
      public: static char16_t const *const fgXSI_TYPE
    };

    struct StringHasher
    {
    public:
    };

    template<typename T1    >
    class ValueVectorOf
    {
    public:
    };
#if 0 // Instances:
// <class xercesc_3_2::SchemaElementDecl *>
#if 0
    template<>
    class ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>
    {
    public:
    };
#endif
#endif


    class/*or struct*/ Wrapper4InputSource
    {
      // Functions:
      public: Wrapper4InputSource(class xercesc_3_2::InputSource *const, bool, class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
      public: virtual ~Wrapper4InputSource(void)
#endif

    public:
    };

    class XMLAttr
    {
    public:
    };

    class XMLBigInteger
    {
      // Functions:
      public: XMLBigInteger(char16_t const *const, class xercesc_3_2::MemoryManager *const)
      public: ~XMLBigInteger(void)
      public: char16_t * getRawData(void) const
      // Static functions:
      public: static int compareValues(class xercesc_3_2::XMLBigInteger const *const, class xercesc_3_2::XMLBigInteger const *const, class xercesc_3_2::MemoryManager *const)
    public:
    };

    class XMLBuffer
    {
    public:
    };

    class/*or struct*/ XMLChar1_0
    {
      // Static functions:
      public: static bool isValidName(char16_t const *const, unsigned __int64)
    public:
    };

    class/*or struct*/ XMLChar1_1
    {
      // Static functions:
      public: static bool isFirstNameChar(char16_t, char16_t)
      public: static bool isNameChar(char16_t, char16_t)
      public: static bool isValidNCName(char16_t const *const, unsigned __int64)
      public: static bool isValidName(char16_t const *const, unsigned __int64)
      public: static bool isValidQName(char16_t const *const, unsigned __int64)
    public:
    };

    class XMLDTDDescription
    {
    public:
    };

    class/*or struct*/ XMLDocumentHandler
    {
      // VFTable. Offset=0, Size=0, Start=0
      // VFTable with 0 offset end

    public:
    };

    class XMLElementDecl
    {
      // Functions:
      public: class xercesc_3_2::QName * getElementName(void)
    public:
    };

    class XMLEntityDecl
    {
    public:
    };

    class/*or struct*/ XMLEntityHandler
    {
      // VFTable. Offset=0, Size=6, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void endInputSource(class xercesc_3_2::InputSource const &); // 1 (xercesc_3_2::DOMLSParserImpl)
      public: virtual bool expandSystemId(char16_t const *const, class xercesc_3_2::XMLBuffer &); // 2 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void resetEntities(void); // 3 (xercesc_3_2::DOMLSParserImpl)
      public: virtual class xercesc_3_2::InputSource * resolveEntity(class xercesc_3_2::XMLResourceIdentifier *); // 4 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void startInputSource(class xercesc_3_2::InputSource const &); // 5 (xercesc_3_2::DOMLSParserImpl)
      // VFTable with 0 offset end

    public:
    };

    template<typename T1    >
    class/*or struct*/ XMLEnumerator
    {
    public:
    };
#if 0 // Instances:
// <class xercesc_3_2::ComplexTypeInfo>
#if 0
    template<>
    class/*or struct*/ XMLEnumerator<class xercesc_3_2::ComplexTypeInfo>
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void) = 0; // 1
      public: virtual void unknown_vf_0_2(void) = 0; // 2
      public: virtual void unknown_vf_0_3(void) = 0; // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class xercesc_3_2::DatatypeValidator>
#if 0
    template<>
    class/*or struct*/ XMLEnumerator<class xercesc_3_2::DatatypeValidator>
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void) = 0; // 1
      public: virtual void unknown_vf_0_2(void) = 0; // 2
      public: virtual void unknown_vf_0_3(void) = 0; // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class xercesc_3_2::Grammar>
#if 0
    template<>
    class/*or struct*/ XMLEnumerator<class xercesc_3_2::Grammar>
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void) = 0; // 1
      public: virtual void unknown_vf_0_2(void) = 0; // 2
      public: virtual void unknown_vf_0_3(void) = 0; // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class xercesc_3_2::SchemaElementDecl>
#if 0
    template<>
    class/*or struct*/ XMLEnumerator<class xercesc_3_2::SchemaElementDecl>
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void) = 0; // 1
      public: virtual void unknown_vf_0_2(void) = 0; // 2
      public: virtual void unknown_vf_0_3(void) = 0; // 3
      // VFTable with 0 offset end

    public:
    };
#endif
// <class xercesc_3_2::ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>>
#if 0
    template<>
    class/*or struct*/ XMLEnumerator<class xercesc_3_2::ValueVectorOf<class xercesc_3_2::SchemaElementDecl *>>
    {
      // VFTable. Offset=0, Size=4, Start=0
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void unknown_vf_0_1(void) = 0; // 1
      public: virtual void unknown_vf_0_2(void) = 0; // 2
      public: virtual void unknown_vf_0_3(void) = 0; // 3
      // VFTable with 0 offset end

    public:
    };
#endif
#endif


    class/*or struct*/ XMLErrorReporter
    {
    public:
      // Enumerations:
      enum ErrTypes : int {
      };

      // VFTable. Offset=0, Size=3, Start=0
      // Added virtual functions:
      public: virtual void unknown_vf_0_0(void); // 0
      public: virtual void error(unsigned int, char16_t const *const, enum xercesc_3_2::XMLErrorReporter::ErrTypes, char16_t const *const, char16_t const *const, char16_t const *const, unsigned __int64, unsigned __int64); // 1 (xercesc_3_2::DOMLSParserImpl)
      public: virtual void resetErrors(void); // 2 (xercesc_3_2::DOMLSParserImpl)
      // VFTable with 0 offset end

    public:
    };

    class XMLException
    {
      // Functions:
      public: XMLException(class xercesc_3_2::XMLException const &)
      public: char16_t const * getMessage(void) const
    public:
    };

    namespace/*or class/struct?*/ XMLExcepts
    {
      // Enumerations:
      enum Codes : int {
      };

    };

    class XMLFormatTarget : public XMemory
    {
      // Functions:
      protected: XMLFormatTarget(void)
#if 0 // All found virtual functions names:
      public: virtual ~XMLFormatTarget(void)
#endif

    public:
    };

    class XMLGrammarDescription
    {
    public:
    };

    class XMLGrammarPool : public XMemory
    {
      // VFTable. Offset=0, Size=0, Start=0
      // VFTable with 0 offset end

    public:
    };

    class/*or struct*/ XMLGrammarPoolImpl : public XMLGrammarPool
    {
      // Functions:
      public: XMLGrammarPoolImpl(class xercesc_3_2::MemoryManager *const)
#if 0 // All found virtual functions names:
      public: virtual ~XMLGrammarPoolImpl(void)
      public: virtual bool cacheGrammar(class xercesc_3_2::Grammar *const)
      public: virtual bool clear(void)
      public: virtual class xercesc_3_2::XMLDTDDescription * createDTDDescription(char16_t const *const)
      public: virtual class xercesc_3_2::DTDGrammar * createDTDGrammar(void)
      public: virtual class xercesc_3_2::XMLSchemaDescription * createSchemaDescription(char16_t const *const)
      public: virtual class xercesc_3_2::SchemaGrammar * createSchemaGrammar(void)
      private: virtual void createXSModel(void)
      public: virtual void deserializeGrammars(class xercesc_3_2::BinInputStream *const)
      public: virtual class xercesc_3_2::RefHashTableOfEnumerator<class xercesc_3_2::Grammar, struct xercesc_3_2::StringHasher> getGrammarEnumerator(void) const
      public: virtual class xercesc_3_2::XMLStringPool * getURIStringPool(void)
      public: virtual class xercesc_3_2::XSModel * getXSModel(bool &)
      public: virtual void lockPool(void)
      public: virtual class xercesc_3_2::Grammar * orphanGrammar(char16_t const *const)
      public: virtual class xercesc_3_2::Grammar * retrieveGrammar(class xercesc_3_2::XMLGrammarDescription *const)
      public: virtual void serializeGrammars(class xercesc_3_2::BinOutputStream *const)
      public: virtual void unlockPool(void)
#endif

      // VFTable. Offset=0, Size=17, Start=0
      // Corresponding base: xercesc_3_2::XMLGrammarPool
      // Owner: SophisXML.dll
      // Added virtual functions:
      public: virtual ~XMLGrammarPoolImpl(void); // 0
      public: virtual bool cacheGrammar(class xercesc_3_2::Grammar *const); // 1
      public: virtual class xercesc_3_2::Grammar * retrieveGrammar(class xercesc_3_2::XMLGrammarDescription *const); // 2
      public: virtual class xercesc_3_2::Grammar * orphanGrammar(char16_t const *const); // 3
      public: virtual class xercesc_3_2::RefHashTableOfEnumerator<class xercesc_3_2::Grammar, struct xercesc_3_2::StringHasher> getGrammarEnumerator(void) const; // 4
      public: virtual bool clear(void); // 5
      public: virtual void lockPool(void); // 6
      public: virtual void unlockPool(void); // 7
      public: virtual class xercesc_3_2::DTDGrammar * createDTDGrammar(void); // 8
      public: virtual class xercesc_3_2::SchemaGrammar * createSchemaGrammar(void); // 9
      public: virtual class xercesc_3_2::XMLDTDDescription * createDTDDescription(char16_t const *const); // 10
      public: virtual class xercesc_3_2::XMLSchemaDescription * createSchemaDescription(char16_t const *const); // 11
      public: virtual class xercesc_3_2::XSModel * getXSModel(bool &); // 12
      public: virtual class xercesc_3_2::XMLStringPool * getURIStringPool(void); // 13
      public: virtual void serializeGrammars(class xercesc_3_2::BinOutputStream *const); // 14
      public: virtual void deserializeGrammars(class xercesc_3_2::BinInputStream *const); // 15
      private: virtual void createXSModel(void); // 16
      // VFTable with 0 offset end

    public:
    };

    class XMLNotationDecl
    {
    public:
    };

    class/*or struct*/ XMLPlatformUtils
    {
      // Static functions:
      public: static void Initialize(char const *const, char const *const, class xercesc_3_2::PanicHandler *const, class xercesc_3_2::MemoryManager *const)
      public: static void Terminate(void)
      // Variables:
      public: static class xercesc_3_2::MemoryManager *fgMemoryManager
    public:
    };

    class XMLResourceIdentifier
    {
    public:
    };

    class XMLSchemaDescription
    {
    public:
    };

    class/*or struct*/ XMLString
    {
      // Static functions:
      public: static int compareIString(char16_t const *const, char16_t const *const)
      public: static int compareString(char16_t const *const, char16_t const *const)
      public: static bool equals(char16_t const *, char16_t const *)
      public: static unsigned __int64 hash(char16_t const *const, unsigned __int64)
      public: static int indexOf(char16_t const *const, char16_t)
      public: static bool isDigit(char16_t)
      public: static void release(char **, class xercesc_3_2::MemoryManager *const)
      public: static void release(char16_t **, class xercesc_3_2::MemoryManager *const)
      public: static bool startsWith(char16_t const *const, char16_t const *const)
      public: static unsigned __int64 stringLen(char const *const)
      public: static unsigned __int64 stringLen(char16_t const *const)
      public: static void subString(char16_t *const, char16_t const *const, unsigned __int64, unsigned __int64, class xercesc_3_2::MemoryManager *const)
      public: static char * transcode(char16_t const *const, class xercesc_3_2::MemoryManager *const)
      public: static char16_t * transcode(char const *const, class xercesc_3_2::MemoryManager *const)
      public: static bool transcode(char const *const, char16_t *const, unsigned __int64, class xercesc_3_2::MemoryManager *const)
      public: static void trim(char16_t *const)
    public:
    };

    class XMLStringPool
    {
    public:
    };

    class/*or struct*/ XMLStringTokenizer
    {
      // Functions:
      public: XMLStringTokenizer(char16_t const *const, class xercesc_3_2::MemoryManager *const)
      public: ~XMLStringTokenizer(void)
      public: bool hasMoreTokens(void)
      public: char16_t * nextToken(void)
    public:
    };

    namespace/*or class/struct?*/ XMLUni
    {
      // Variables:
      public: static char16_t const *const fgCDATAString
      public: static char16_t const *const fgDOMComments
      public: static char16_t const *const fgDOMErrorHandler
      public: static char16_t const *const fgDOMNamespaces
      public: static char16_t const *const fgDOMValidate
      public: static char16_t const *const fgDOMValidateIfSchema
      public: static char16_t const *const fgDOMWRTDiscardDefaultContent
      public: static char16_t const *const fgDOMWRTFormatPrettyPrint
      public: static char16_t const *const fgDOMXMLDeclaration
      public: static char16_t const *const fgISO88591EncodingString
      public: static char16_t const *const fgSGXMLScanner
      public: static char16_t const *const fgUTF8EncodingString
      public: static char16_t const *const fgXMLNSString
      public: static char16_t const *const fgXMLNSURIName
      public: static char16_t const *const fgXMLString
      public: static char16_t const *const fgXMLURIName
      public: static char16_t const *const fgXercesCacheGrammarFromParse
      public: static char16_t const *const fgXercesDOMHasPSVIInfo
      public: static char16_t const *const fgXercesScannerName
      public: static char16_t const *const fgXercesSchema
      public: static char16_t const *const fgXercesSchemaFullChecking
      public: static char16_t const *const fgXercesUseCachedGrammarInParse
      public: static char const *const fgXercescDefaultLocale
    };

    class XMLValidator
    {
    public:
    };

    class/*or struct*/ XMemory
    {
      // Static functions:
      public: static void * operator new(unsigned __int64)
      public: static void * operator new(unsigned __int64, class xercesc_3_2::MemoryManager *)
      public: static void operator delete(void *)
      public: static void operator delete(void *, class xercesc_3_2::MemoryManager *)
    public:
    };

    class XSModel
    {
    public:
    };


    // Functions:
    class std::basic_ostream<char, struct std::char_traits<char>> & operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class DOMError const &)
    class std::basic_ostream<char, struct std::char_traits<char>> & operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class DOMException const &)
    class std::basic_ostream<char, struct std::char_traits<char>> & operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class QName const &)
  public:
  };


  // Functions:
  class stdbasic_ostream<char, struct stdchar_traits<char>> & operator<<(class stdbasic_ostream<char, struct stdchar_traits<char>> &, class sphSystemconfigArgMap const &)
  class stdbasic_ostream<char, struct stdchar_traits<char>> & operator<<(class stdbasic_ostream<char, struct stdchar_traits<char>> &, class sophisToolsbaseExceptionBase const &)
  class stdbasic_ostream<char, struct stdchar_traits<char>> & operator<<(class stdbasic_ostream<char, struct stdchar_traits<char>> &, class sphSystemconfigInitParameters const &)
  class stdbasic_ostream<char, struct stdchar_traits<char>> & operator<<(class stdbasic_ostream<char, struct stdchar_traits<char>> &, char16_t const *)
  long DonneNouveauSicovam(void)
  long DonneSicoParReference(char const *, enum sophisinstrumenteInstrumentType)
  struct TableauDefProd ** GiveCoutPretEmpruntFromContext(struct sophisDALBaseInstrumentData *)
  struct TableauDefProd ** GiveDividendeFromContext(struct sophisDALBaseInstrumentData *)
  struct sophisDALBaseInstrumentData * RechercheTitre(long)
  void __ExceptionPtrCopy(void *, void const *)
  void __ExceptionPtrDestroy(void *)
  void after_historique_save_session_and_commit(void)
  void sendMultiHistoricMessages(class stdlist<class sophiseventCSHistoricPriceData *, class stdallocator<class sophiseventCSHistoricPriceData *>> const &, bool, bool, class sophistoolsCSREventVector *)
  // Variables:
  long (__cdecl *GetAffectationByName)(char const *)
  int gCSXMLDocumentClipboardAllotment
  struct TConfigClient gConfigClient
  int gExportDoubleXmlPrecision
  class CSRColleUtilisateur_v1 *gExtCollage
  bool gIgnoreLocalHistEvents
  class CSSimulation gSimulation
public:
};
